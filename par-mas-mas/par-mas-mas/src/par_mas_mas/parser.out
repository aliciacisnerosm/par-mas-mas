Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DO

Grammar

Rule 0     S' -> program
Rule 1     cte_f -> CTE_I DOT CTE_I
Rule 2     program -> PROGRAM ID punto_program COLON main
Rule 3     program -> PROGRAM ID punto_program COLON variables main
Rule 4     program -> PROGRAM ID punto_program COLON variables funciones main
Rule 5     program -> PROGRAM ID punto_program COLON funciones main
Rule 6     punto_program -> <empty>
Rule 7     main -> MAIN LEFT_PAR RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL
Rule 8     main_aux -> estatutos_main_multiple
Rule 9     main_aux -> empty
Rule 10    variables -> VAR punto_variables_1 SEMICOLON
Rule 11    variables -> VAR punto_variables_1 variables_aux SEMICOLON
Rule 12    punto_variables_1 -> <empty>
Rule 13    variables_aux -> tipo COLON declaracion_inicial
Rule 14    variables_aux -> tipo COLON declaracion_inicial MORE variables_aux
Rule 15    tipo -> INT
Rule 16    tipo -> FLOAT
Rule 17    tipo -> CHAR
Rule 18    declaracion_inicial -> dec_varaux punto_dec_var_1 COMMA declaracion_inicial
Rule 19    declaracion_inicial -> dec_varaux punto_dec_var_1
Rule 20    punto_dec_var_1 -> <empty>
Rule 21    dec_varaux -> ID
Rule 22    dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR
Rule 23    dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
Rule 24    punto_dec_varaux_1 -> <empty>
Rule 25    dec_var -> dec_varaux COMMA dec_var
Rule 26    dec_var -> dec_varaux
Rule 27    funciones -> funciones_aux
Rule 28    funciones -> funciones_aux funciones
Rule 29    funciones_aux -> tipo FUNC ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return
Rule 30    funciones_aux -> VOID FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func
Rule 31    punto_return_value -> <empty>
Rule 32    not_variables -> variables count_vars
Rule 33    not_variables -> empty
Rule 34    not_params -> parametros count_params
Rule 35    not_params -> empty
Rule 36    punto_end_function_return -> <empty>
Rule 37    punto_id_func -> <empty>
Rule 38    parametros -> dec_var_param COMMA parametros
Rule 39    parametros -> dec_var_param
Rule 40    dec_var_param -> tipo ID punto_push_param
Rule 41    punto_push_param -> <empty>
Rule 42    count_params -> <empty>
Rule 43    count_vars -> <empty>
Rule 44    end_func -> <empty>
Rule 45    exp_or -> t_exp punto_pop_or t_exp_or_aux
Rule 46    exp_or -> t_exp punto_pop_or
Rule 47    punto_pop_or -> <empty>
Rule 48    t_exp_or_aux -> OR punto_push_or exp_or
Rule 49    punto_push_or -> <empty>
Rule 50    t_exp -> g_exp pop_and t_exp_aux
Rule 51    t_exp -> g_exp pop_and
Rule 52    pop_and -> <empty>
Rule 53    t_exp_aux -> AND punto_push_and t_exp
Rule 54    punto_push_and -> <empty>
Rule 55    g_exp -> m_exp
Rule 56    g_exp -> m_exp relacionales punto_relacionales m_exp punto_pop_relacional
Rule 57    punto_relacionales -> <empty>
Rule 58    punto_pop_relacional -> <empty>
Rule 59    m_exp -> termino punto_mexp_pop
Rule 60    m_exp -> termino punto_mexp_pop m_exp_aux
Rule 61    punto_mexp_pop -> <empty>
Rule 62    m_exp_aux -> PLUS punto_m_exp_push m_exp
Rule 63    m_exp_aux -> MINUS punto_m_exp_push m_exp
Rule 64    punto_m_exp_push -> <empty>
Rule 65    termino -> factor punto_termino_pop
Rule 66    termino -> factor punto_termino_pop termino_aux
Rule 67    punto_termino_pop -> <empty>
Rule 68    termino_aux -> MULTIPLY punto_termino_aux termino
Rule 69    termino_aux -> DIVIDE punto_termino_aux termino
Rule 70    punto_termino_aux -> <empty>
Rule 71    factor -> cte
Rule 72    factor -> ID LEFT_PAR dec_var RIGHT_PAR
Rule 73    factor -> ID LEFT_PAR RIGHT_PAR
Rule 74    factor -> LEFT_PAR exp_or RIGHT_PAR
Rule 75    relacionales -> LESS_THAN
Rule 76    relacionales -> GREATER_THAN
Rule 77    relacionales -> DIFFERENT
Rule 78    relacionales -> EQUAL
Rule 79    relacionales -> GREATER_EQUAL
Rule 80    relacionales -> LESS_EQUAL
Rule 81    estatutos -> estatutos_main_aux
Rule 82    estatutos -> retorno SEMICOLON
Rule 83    estatutos_main -> asignacion SEMICOLON
Rule 84    estatutos_main -> llamada SEMICOLON
Rule 85    estatutos_main -> lectura SEMICOLON
Rule 86    estatutos_main -> escritura SEMICOLON
Rule 87    estatutos_main -> decision SEMICOLON
Rule 88    estatutos_main -> repeticion SEMICOLON
Rule 89    estatutos_main_multiple -> estatutos_main estatutos_main_multiple
Rule 90    estatutos_main_multiple -> estatutos_main
Rule 91    estatutos_main_aux -> estatutos_main estatutos
Rule 92    estatutos_main_aux -> estatutos_main
Rule 93    asignacion -> dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
Rule 94    punto_asignacion_var -> <empty>
Rule 95    punto_igual -> <empty>
Rule 96    punto_asignacion -> <empty>
Rule 97    llamada -> VD ID LEFT_PAR RIGHT_PAR
Rule 98    llamada -> VD ID LEFT_PAR dec_var RIGHT_PAR
Rule 99    retorno -> RETURN LEFT_PAR m_exp RIGHT_PAR punto_return
Rule 100   punto_return -> <empty>
Rule 101   punto_read_stack -> <empty>
Rule 102   lectura -> READ LEFT_PAR lectura_var RIGHT_PAR
Rule 103   lectura_var -> punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand COMMA lectura_var
Rule 104   lectura_var -> punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand
Rule 105   punto_push_dec_var -> <empty>
Rule 106   punto_add_read_operand -> <empty>
Rule 107   escritura -> WRITE LEFT_PAR escritura_aux RIGHT_PAR
Rule 108   escritura_aux -> punto_write_stack STR punto_escritura_push punto_add_write_operand
Rule 109   escritura_aux -> punto_write_stack m_exp punto_escritura_push punto_add_write_operand
Rule 110   escritura_aux -> punto_write_stack STR punto_escritura_push punto_add_write_operand COMMA escritura_aux
Rule 111   escritura_aux -> punto_write_stack m_exp punto_escritura_push punto_add_write_operand COMMA escritura_aux
Rule 112   punto_escritura_push -> <empty>
Rule 113   punto_write_stack -> <empty>
Rule 114   punto_add_write_operand -> <empty>
Rule 115   decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if
Rule 116   decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if
Rule 117   punto_if_exp -> <empty>
Rule 118   punto_else -> <empty>
Rule 119   punto_end_if -> <empty>
Rule 120   repeticion -> condicional
Rule 121   repeticion -> no_condicional
Rule 122   no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for
Rule 123   punto_for -> <empty>
Rule 124   punto_exp_for_inf -> <empty>
Rule 125   punto_exp_for_sup -> <empty>
Rule 126   punto_end_for -> <empty>
Rule 127   condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while
Rule 128   punto_while -> <empty>
Rule 129   punto_validar_exp -> <empty>
Rule 130   punto_end_while -> <empty>
Rule 131   cte -> ID factor_push_operand
Rule 132   cte -> CTE_I factor_int_push
Rule 133   cte -> cte_f factor_float_push
Rule 134   cte -> CTE_CHAR factor_char_push
Rule 135   factor_push_operand -> <empty>
Rule 136   factor_float_push -> <empty>
Rule 137   factor_int_push -> <empty>
Rule 138   factor_char_push -> <empty>
Rule 139   empty -> <empty>

Terminals, with rules where they appear

AND                  : 53
CHAR                 : 17
COLON                : 2 3 4 5 13 14
COMMA                : 18 25 38 103 110 111
CTE_CHAR             : 134
CTE_I                : 1 1 22 23 23 132
DIFFERENT            : 77
DIVIDE               : 69
DO                   : 
DOT                  : 1
ELSE                 : 116
EQUAL                : 78
EQUALS               : 93 122
FLOAT                : 16
FOR                  : 122
FUNC                 : 29 30
GREATER_EQUAL        : 79
GREATER_THAN         : 76
ID                   : 2 3 4 5 21 22 23 29 30 40 72 73 97 98 131
IF                   : 115 116
INT                  : 15
LEFT_BR              : 22 23 23
LEFT_CURL            : 7 29 30 115 116 116 122 127
LEFT_PAR             : 7 29 30 72 73 74 97 98 99 102 107 115 116 122 127
LESS_EQUAL           : 80
LESS_THAN            : 75
MAIN                 : 7
MINUS                : 63
MORE                 : 14
MULTIPLY             : 68
OR                   : 48
PLUS                 : 62
PROGRAM              : 2 3 4 5
READ                 : 102
RETURN               : 99
RIGHT_BR             : 22 23 23
RIGHT_CURL           : 7 29 30 115 116 116 122 127
RIGHT_PAR            : 7 29 30 72 73 74 97 98 99 102 107 115 116 122 127
SEMICOLON            : 10 11 82 83 84 85 86 87 88
STR                  : 108 110
THEN                 : 115 116
TO                   : 122
VAR                  : 10 11
VD                   : 97 98
VOID                 : 30
WHILE                : 127
WRITE                : 107
error                : 

Nonterminals, with rules where they appear

asignacion           : 83
condicional          : 120
count_params         : 34
count_vars           : 30 32
cte                  : 71
cte_f                : 133
dec_var              : 25 72 98
dec_var_param        : 38 39
dec_varaux           : 18 19 25 26 93 103 104 122
decision             : 87
declaracion_inicial  : 13 14 18
empty                : 9 33 35
end_func             : 30
escritura            : 86
escritura_aux        : 107 110 111
estatutos            : 29 30 91 115 116 116 122 127
estatutos_main       : 89 90 91 92
estatutos_main_aux   : 81
estatutos_main_multiple : 8 89
exp_or               : 48 74 115 116 127
factor               : 65 66
factor_char_push     : 134
factor_float_push    : 133
factor_int_push      : 132
factor_push_operand  : 131
funciones            : 4 5 28
funciones_aux        : 27 28
g_exp                : 50 51
lectura              : 85
lectura_var          : 102 103
llamada              : 84
m_exp                : 55 56 56 62 63 93 99 109 111 122 122
m_exp_aux            : 60
main                 : 2 3 4 5
main_aux             : 7
no_condicional       : 121
not_params           : 29 30
not_variables        : 29 30
parametros           : 34 38
pop_and              : 50 51
program              : 0
punto_add_read_operand : 103 104
punto_add_write_operand : 108 109 110 111
punto_asignacion     : 93
punto_asignacion_var : 93
punto_dec_var_1      : 18 19
punto_dec_varaux_1   : 
punto_else           : 116
punto_end_for        : 122
punto_end_function_return : 29
punto_end_if         : 115 116
punto_end_while      : 127
punto_escritura_push : 108 109 110 111
punto_exp_for_inf    : 122
punto_exp_for_sup    : 122
punto_for            : 122
punto_id_func        : 29 30
punto_if_exp         : 115 116
punto_igual          : 93
punto_m_exp_push     : 62 63
punto_mexp_pop       : 59 60
punto_pop_or         : 45 46
punto_pop_relacional : 56
punto_program        : 2 3 4 5
punto_push_and       : 53
punto_push_dec_var   : 103 104
punto_push_or        : 48
punto_push_param     : 40
punto_read_stack     : 103 104
punto_relacionales   : 56
punto_return         : 99
punto_return_value   : 29
punto_termino_aux    : 68 69
punto_termino_pop    : 65 66
punto_validar_exp    : 127
punto_variables_1    : 10 11
punto_while          : 127
punto_write_stack    : 108 109 110 111
relacionales         : 56
repeticion           : 88
retorno              : 82
t_exp                : 45 46 53
t_exp_aux            : 50
t_exp_or_aux         : 45
termino              : 59 60 68 69
termino_aux          : 66
tipo                 : 13 14 29 40
variables            : 3 4 32
variables_aux        : 11 14

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . PROGRAM ID punto_program COLON main
    (3) program -> . PROGRAM ID punto_program COLON variables main
    (4) program -> . PROGRAM ID punto_program COLON variables funciones main
    (5) program -> . PROGRAM ID punto_program COLON funciones main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (2) program -> PROGRAM . ID punto_program COLON main
    (3) program -> PROGRAM . ID punto_program COLON variables main
    (4) program -> PROGRAM . ID punto_program COLON variables funciones main
    (5) program -> PROGRAM . ID punto_program COLON funciones main

    ID              shift and go to state 3


state 3

    (2) program -> PROGRAM ID . punto_program COLON main
    (3) program -> PROGRAM ID . punto_program COLON variables main
    (4) program -> PROGRAM ID . punto_program COLON variables funciones main
    (5) program -> PROGRAM ID . punto_program COLON funciones main
    (6) punto_program -> .

    COLON           reduce using rule 6 (punto_program -> .)

    punto_program                  shift and go to state 4

state 4

    (2) program -> PROGRAM ID punto_program . COLON main
    (3) program -> PROGRAM ID punto_program . COLON variables main
    (4) program -> PROGRAM ID punto_program . COLON variables funciones main
    (5) program -> PROGRAM ID punto_program . COLON funciones main

    COLON           shift and go to state 5


state 5

    (2) program -> PROGRAM ID punto_program COLON . main
    (3) program -> PROGRAM ID punto_program COLON . variables main
    (4) program -> PROGRAM ID punto_program COLON . variables funciones main
    (5) program -> PROGRAM ID punto_program COLON . funciones main
    (7) main -> . MAIN LEFT_PAR RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL
    (10) variables -> . VAR punto_variables_1 SEMICOLON
    (11) variables -> . VAR punto_variables_1 variables_aux SEMICOLON
    (27) funciones -> . funciones_aux
    (28) funciones -> . funciones_aux funciones
    (29) funciones_aux -> . tipo FUNC ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return
    (30) funciones_aux -> . VOID FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func
    (15) tipo -> . INT
    (16) tipo -> . FLOAT
    (17) tipo -> . CHAR

    MAIN            shift and go to state 9
    VAR             shift and go to state 10
    VOID            shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    main                           shift and go to state 6
    variables                      shift and go to state 7
    funciones                      shift and go to state 8
    funciones_aux                  shift and go to state 11
    tipo                           shift and go to state 12

state 6

    (2) program -> PROGRAM ID punto_program COLON main .

    $end            reduce using rule 2 (program -> PROGRAM ID punto_program COLON main .)


state 7

    (3) program -> PROGRAM ID punto_program COLON variables . main
    (4) program -> PROGRAM ID punto_program COLON variables . funciones main
    (7) main -> . MAIN LEFT_PAR RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL
    (27) funciones -> . funciones_aux
    (28) funciones -> . funciones_aux funciones
    (29) funciones_aux -> . tipo FUNC ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return
    (30) funciones_aux -> . VOID FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func
    (15) tipo -> . INT
    (16) tipo -> . FLOAT
    (17) tipo -> . CHAR

    MAIN            shift and go to state 9
    VOID            shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    main                           shift and go to state 17
    funciones                      shift and go to state 18
    funciones_aux                  shift and go to state 11
    tipo                           shift and go to state 12

state 8

    (5) program -> PROGRAM ID punto_program COLON funciones . main
    (7) main -> . MAIN LEFT_PAR RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL

    MAIN            shift and go to state 9

    main                           shift and go to state 19

state 9

    (7) main -> MAIN . LEFT_PAR RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL

    LEFT_PAR        shift and go to state 20


state 10

    (10) variables -> VAR . punto_variables_1 SEMICOLON
    (11) variables -> VAR . punto_variables_1 variables_aux SEMICOLON
    (12) punto_variables_1 -> .

    SEMICOLON       reduce using rule 12 (punto_variables_1 -> .)
    INT             reduce using rule 12 (punto_variables_1 -> .)
    FLOAT           reduce using rule 12 (punto_variables_1 -> .)
    CHAR            reduce using rule 12 (punto_variables_1 -> .)

    punto_variables_1              shift and go to state 21

state 11

    (27) funciones -> funciones_aux .
    (28) funciones -> funciones_aux . funciones
    (27) funciones -> . funciones_aux
    (28) funciones -> . funciones_aux funciones
    (29) funciones_aux -> . tipo FUNC ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return
    (30) funciones_aux -> . VOID FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func
    (15) tipo -> . INT
    (16) tipo -> . FLOAT
    (17) tipo -> . CHAR

    MAIN            reduce using rule 27 (funciones -> funciones_aux .)
    VOID            shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    funciones_aux                  shift and go to state 11
    funciones                      shift and go to state 22
    tipo                           shift and go to state 12

state 12

    (29) funciones_aux -> tipo . FUNC ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return

    FUNC            shift and go to state 23


state 13

    (30) funciones_aux -> VOID . FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func

    FUNC            shift and go to state 24


state 14

    (15) tipo -> INT .

    FUNC            reduce using rule 15 (tipo -> INT .)
    COLON           reduce using rule 15 (tipo -> INT .)
    ID              reduce using rule 15 (tipo -> INT .)


state 15

    (16) tipo -> FLOAT .

    FUNC            reduce using rule 16 (tipo -> FLOAT .)
    COLON           reduce using rule 16 (tipo -> FLOAT .)
    ID              reduce using rule 16 (tipo -> FLOAT .)


state 16

    (17) tipo -> CHAR .

    FUNC            reduce using rule 17 (tipo -> CHAR .)
    COLON           reduce using rule 17 (tipo -> CHAR .)
    ID              reduce using rule 17 (tipo -> CHAR .)


state 17

    (3) program -> PROGRAM ID punto_program COLON variables main .

    $end            reduce using rule 3 (program -> PROGRAM ID punto_program COLON variables main .)


state 18

    (4) program -> PROGRAM ID punto_program COLON variables funciones . main
    (7) main -> . MAIN LEFT_PAR RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL

    MAIN            shift and go to state 9

    main                           shift and go to state 25

state 19

    (5) program -> PROGRAM ID punto_program COLON funciones main .

    $end            reduce using rule 5 (program -> PROGRAM ID punto_program COLON funciones main .)


state 20

    (7) main -> MAIN LEFT_PAR . RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL

    RIGHT_PAR       shift and go to state 26


state 21

    (10) variables -> VAR punto_variables_1 . SEMICOLON
    (11) variables -> VAR punto_variables_1 . variables_aux SEMICOLON
    (13) variables_aux -> . tipo COLON declaracion_inicial
    (14) variables_aux -> . tipo COLON declaracion_inicial MORE variables_aux
    (15) tipo -> . INT
    (16) tipo -> . FLOAT
    (17) tipo -> . CHAR

    SEMICOLON       shift and go to state 27
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    variables_aux                  shift and go to state 28
    tipo                           shift and go to state 29

state 22

    (28) funciones -> funciones_aux funciones .

    MAIN            reduce using rule 28 (funciones -> funciones_aux funciones .)


state 23

    (29) funciones_aux -> tipo FUNC . ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return

    ID              shift and go to state 30


state 24

    (30) funciones_aux -> VOID FUNC . ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func

    ID              shift and go to state 31


state 25

    (4) program -> PROGRAM ID punto_program COLON variables funciones main .

    $end            reduce using rule 4 (program -> PROGRAM ID punto_program COLON variables funciones main .)


state 26

    (7) main -> MAIN LEFT_PAR RIGHT_PAR . LEFT_CURL main_aux RIGHT_CURL

    LEFT_CURL       shift and go to state 32


state 27

    (10) variables -> VAR punto_variables_1 SEMICOLON .

    MAIN            reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    VOID            reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    INT             reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    FLOAT           reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    CHAR            reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    RETURN          reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    VD              reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    READ            reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    WRITE           reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    IF              reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    ID              reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    WHILE           reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    FOR             reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)


state 28

    (11) variables -> VAR punto_variables_1 variables_aux . SEMICOLON

    SEMICOLON       shift and go to state 33


state 29

    (13) variables_aux -> tipo . COLON declaracion_inicial
    (14) variables_aux -> tipo . COLON declaracion_inicial MORE variables_aux

    COLON           shift and go to state 34


state 30

    (29) funciones_aux -> tipo FUNC ID . punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return
    (37) punto_id_func -> .

    LEFT_PAR        reduce using rule 37 (punto_id_func -> .)

    punto_id_func                  shift and go to state 35

state 31

    (30) funciones_aux -> VOID FUNC ID . punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func
    (37) punto_id_func -> .

    LEFT_PAR        reduce using rule 37 (punto_id_func -> .)

    punto_id_func                  shift and go to state 36

state 32

    (7) main -> MAIN LEFT_PAR RIGHT_PAR LEFT_CURL . main_aux RIGHT_CURL
    (8) main_aux -> . estatutos_main_multiple
    (9) main_aux -> . empty
    (89) estatutos_main_multiple -> . estatutos_main estatutos_main_multiple
    (90) estatutos_main_multiple -> . estatutos_main
    (139) empty -> .
    (83) estatutos_main -> . asignacion SEMICOLON
    (84) estatutos_main -> . llamada SEMICOLON
    (85) estatutos_main -> . lectura SEMICOLON
    (86) estatutos_main -> . escritura SEMICOLON
    (87) estatutos_main -> . decision SEMICOLON
    (88) estatutos_main -> . repeticion SEMICOLON
    (93) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (97) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (98) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (102) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (107) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (115) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (116) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (120) repeticion -> . condicional
    (121) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (127) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (122) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RIGHT_CURL      reduce using rule 139 (empty -> .)
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    main_aux                       shift and go to state 37
    estatutos_main_multiple        shift and go to state 38
    empty                          shift and go to state 39
    estatutos_main                 shift and go to state 40
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 33

    (11) variables -> VAR punto_variables_1 variables_aux SEMICOLON .

    MAIN            reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    VOID            reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    INT             reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    FLOAT           reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    CHAR            reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    RETURN          reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    VD              reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    READ            reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    WRITE           reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    IF              reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    ID              reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    WHILE           reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    FOR             reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)


state 34

    (13) variables_aux -> tipo COLON . declaracion_inicial
    (14) variables_aux -> tipo COLON . declaracion_inicial MORE variables_aux
    (18) declaracion_inicial -> . dec_varaux punto_dec_var_1 COMMA declaracion_inicial
    (19) declaracion_inicial -> . dec_varaux punto_dec_var_1
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    ID              shift and go to state 49

    declaracion_inicial            shift and go to state 57
    dec_varaux                     shift and go to state 58

state 35

    (29) funciones_aux -> tipo FUNC ID punto_id_func . punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return
    (31) punto_return_value -> .

    LEFT_PAR        reduce using rule 31 (punto_return_value -> .)

    punto_return_value             shift and go to state 59

state 36

    (30) funciones_aux -> VOID FUNC ID punto_id_func . LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func

    LEFT_PAR        shift and go to state 60


state 37

    (7) main -> MAIN LEFT_PAR RIGHT_PAR LEFT_CURL main_aux . RIGHT_CURL

    RIGHT_CURL      shift and go to state 61


state 38

    (8) main_aux -> estatutos_main_multiple .

    RIGHT_CURL      reduce using rule 8 (main_aux -> estatutos_main_multiple .)


state 39

    (9) main_aux -> empty .

    RIGHT_CURL      reduce using rule 9 (main_aux -> empty .)


state 40

    (89) estatutos_main_multiple -> estatutos_main . estatutos_main_multiple
    (90) estatutos_main_multiple -> estatutos_main .
    (89) estatutos_main_multiple -> . estatutos_main estatutos_main_multiple
    (90) estatutos_main_multiple -> . estatutos_main
    (83) estatutos_main -> . asignacion SEMICOLON
    (84) estatutos_main -> . llamada SEMICOLON
    (85) estatutos_main -> . lectura SEMICOLON
    (86) estatutos_main -> . escritura SEMICOLON
    (87) estatutos_main -> . decision SEMICOLON
    (88) estatutos_main -> . repeticion SEMICOLON
    (93) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (97) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (98) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (102) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (107) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (115) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (116) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (120) repeticion -> . condicional
    (121) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (127) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (122) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RIGHT_CURL      reduce using rule 90 (estatutos_main_multiple -> estatutos_main .)
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    estatutos_main                 shift and go to state 40
    estatutos_main_multiple        shift and go to state 62
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 41

    (83) estatutos_main -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 63


state 42

    (84) estatutos_main -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 64


state 43

    (85) estatutos_main -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 65


state 44

    (86) estatutos_main -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 66


state 45

    (87) estatutos_main -> decision . SEMICOLON

    SEMICOLON       shift and go to state 67


state 46

    (88) estatutos_main -> repeticion . SEMICOLON

    SEMICOLON       shift and go to state 68


state 47

    (93) asignacion -> dec_varaux . punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (94) punto_asignacion_var -> .

    EQUALS          reduce using rule 94 (punto_asignacion_var -> .)

    punto_asignacion_var           shift and go to state 69

state 48

    (97) llamada -> VD . ID LEFT_PAR RIGHT_PAR
    (98) llamada -> VD . ID LEFT_PAR dec_var RIGHT_PAR

    ID              shift and go to state 70


state 49

    (21) dec_varaux -> ID .
    (22) dec_varaux -> ID . LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> ID . LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    EQUALS          reduce using rule 21 (dec_varaux -> ID .)
    COMMA           reduce using rule 21 (dec_varaux -> ID .)
    MORE            reduce using rule 21 (dec_varaux -> ID .)
    SEMICOLON       reduce using rule 21 (dec_varaux -> ID .)
    RIGHT_PAR       reduce using rule 21 (dec_varaux -> ID .)
    LEFT_BR         shift and go to state 71


state 50

    (102) lectura -> READ . LEFT_PAR lectura_var RIGHT_PAR

    LEFT_PAR        shift and go to state 72


state 51

    (107) escritura -> WRITE . LEFT_PAR escritura_aux RIGHT_PAR

    LEFT_PAR        shift and go to state 73


state 52

    (115) decision -> IF . LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (116) decision -> IF . LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if

    LEFT_PAR        shift and go to state 74


state 53

    (120) repeticion -> condicional .

    SEMICOLON       reduce using rule 120 (repeticion -> condicional .)


state 54

    (121) repeticion -> no_condicional .

    SEMICOLON       reduce using rule 121 (repeticion -> no_condicional .)


state 55

    (127) condicional -> WHILE . punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (128) punto_while -> .

    LEFT_PAR        reduce using rule 128 (punto_while -> .)

    punto_while                    shift and go to state 75

state 56

    (122) no_condicional -> FOR . LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for

    LEFT_PAR        shift and go to state 76


state 57

    (13) variables_aux -> tipo COLON declaracion_inicial .
    (14) variables_aux -> tipo COLON declaracion_inicial . MORE variables_aux

    SEMICOLON       reduce using rule 13 (variables_aux -> tipo COLON declaracion_inicial .)
    MORE            shift and go to state 77


state 58

    (18) declaracion_inicial -> dec_varaux . punto_dec_var_1 COMMA declaracion_inicial
    (19) declaracion_inicial -> dec_varaux . punto_dec_var_1
    (20) punto_dec_var_1 -> .

    COMMA           reduce using rule 20 (punto_dec_var_1 -> .)
    MORE            reduce using rule 20 (punto_dec_var_1 -> .)
    SEMICOLON       reduce using rule 20 (punto_dec_var_1 -> .)

    punto_dec_var_1                shift and go to state 78

state 59

    (29) funciones_aux -> tipo FUNC ID punto_id_func punto_return_value . LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return

    LEFT_PAR        shift and go to state 79


state 60

    (30) funciones_aux -> VOID FUNC ID punto_id_func LEFT_PAR . not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func
    (34) not_params -> . parametros count_params
    (35) not_params -> . empty
    (38) parametros -> . dec_var_param COMMA parametros
    (39) parametros -> . dec_var_param
    (139) empty -> .
    (40) dec_var_param -> . tipo ID punto_push_param
    (15) tipo -> . INT
    (16) tipo -> . FLOAT
    (17) tipo -> . CHAR

    RIGHT_PAR       reduce using rule 139 (empty -> .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    not_params                     shift and go to state 80
    parametros                     shift and go to state 81
    empty                          shift and go to state 82
    dec_var_param                  shift and go to state 83
    tipo                           shift and go to state 84

state 61

    (7) main -> MAIN LEFT_PAR RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL .

    $end            reduce using rule 7 (main -> MAIN LEFT_PAR RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL .)


state 62

    (89) estatutos_main_multiple -> estatutos_main estatutos_main_multiple .

    RIGHT_CURL      reduce using rule 89 (estatutos_main_multiple -> estatutos_main estatutos_main_multiple .)


state 63

    (83) estatutos_main -> asignacion SEMICOLON .

    VD              reduce using rule 83 (estatutos_main -> asignacion SEMICOLON .)
    READ            reduce using rule 83 (estatutos_main -> asignacion SEMICOLON .)
    WRITE           reduce using rule 83 (estatutos_main -> asignacion SEMICOLON .)
    IF              reduce using rule 83 (estatutos_main -> asignacion SEMICOLON .)
    ID              reduce using rule 83 (estatutos_main -> asignacion SEMICOLON .)
    WHILE           reduce using rule 83 (estatutos_main -> asignacion SEMICOLON .)
    FOR             reduce using rule 83 (estatutos_main -> asignacion SEMICOLON .)
    RIGHT_CURL      reduce using rule 83 (estatutos_main -> asignacion SEMICOLON .)
    RETURN          reduce using rule 83 (estatutos_main -> asignacion SEMICOLON .)


state 64

    (84) estatutos_main -> llamada SEMICOLON .

    VD              reduce using rule 84 (estatutos_main -> llamada SEMICOLON .)
    READ            reduce using rule 84 (estatutos_main -> llamada SEMICOLON .)
    WRITE           reduce using rule 84 (estatutos_main -> llamada SEMICOLON .)
    IF              reduce using rule 84 (estatutos_main -> llamada SEMICOLON .)
    ID              reduce using rule 84 (estatutos_main -> llamada SEMICOLON .)
    WHILE           reduce using rule 84 (estatutos_main -> llamada SEMICOLON .)
    FOR             reduce using rule 84 (estatutos_main -> llamada SEMICOLON .)
    RIGHT_CURL      reduce using rule 84 (estatutos_main -> llamada SEMICOLON .)
    RETURN          reduce using rule 84 (estatutos_main -> llamada SEMICOLON .)


state 65

    (85) estatutos_main -> lectura SEMICOLON .

    VD              reduce using rule 85 (estatutos_main -> lectura SEMICOLON .)
    READ            reduce using rule 85 (estatutos_main -> lectura SEMICOLON .)
    WRITE           reduce using rule 85 (estatutos_main -> lectura SEMICOLON .)
    IF              reduce using rule 85 (estatutos_main -> lectura SEMICOLON .)
    ID              reduce using rule 85 (estatutos_main -> lectura SEMICOLON .)
    WHILE           reduce using rule 85 (estatutos_main -> lectura SEMICOLON .)
    FOR             reduce using rule 85 (estatutos_main -> lectura SEMICOLON .)
    RIGHT_CURL      reduce using rule 85 (estatutos_main -> lectura SEMICOLON .)
    RETURN          reduce using rule 85 (estatutos_main -> lectura SEMICOLON .)


state 66

    (86) estatutos_main -> escritura SEMICOLON .

    VD              reduce using rule 86 (estatutos_main -> escritura SEMICOLON .)
    READ            reduce using rule 86 (estatutos_main -> escritura SEMICOLON .)
    WRITE           reduce using rule 86 (estatutos_main -> escritura SEMICOLON .)
    IF              reduce using rule 86 (estatutos_main -> escritura SEMICOLON .)
    ID              reduce using rule 86 (estatutos_main -> escritura SEMICOLON .)
    WHILE           reduce using rule 86 (estatutos_main -> escritura SEMICOLON .)
    FOR             reduce using rule 86 (estatutos_main -> escritura SEMICOLON .)
    RIGHT_CURL      reduce using rule 86 (estatutos_main -> escritura SEMICOLON .)
    RETURN          reduce using rule 86 (estatutos_main -> escritura SEMICOLON .)


state 67

    (87) estatutos_main -> decision SEMICOLON .

    VD              reduce using rule 87 (estatutos_main -> decision SEMICOLON .)
    READ            reduce using rule 87 (estatutos_main -> decision SEMICOLON .)
    WRITE           reduce using rule 87 (estatutos_main -> decision SEMICOLON .)
    IF              reduce using rule 87 (estatutos_main -> decision SEMICOLON .)
    ID              reduce using rule 87 (estatutos_main -> decision SEMICOLON .)
    WHILE           reduce using rule 87 (estatutos_main -> decision SEMICOLON .)
    FOR             reduce using rule 87 (estatutos_main -> decision SEMICOLON .)
    RIGHT_CURL      reduce using rule 87 (estatutos_main -> decision SEMICOLON .)
    RETURN          reduce using rule 87 (estatutos_main -> decision SEMICOLON .)


state 68

    (88) estatutos_main -> repeticion SEMICOLON .

    VD              reduce using rule 88 (estatutos_main -> repeticion SEMICOLON .)
    READ            reduce using rule 88 (estatutos_main -> repeticion SEMICOLON .)
    WRITE           reduce using rule 88 (estatutos_main -> repeticion SEMICOLON .)
    IF              reduce using rule 88 (estatutos_main -> repeticion SEMICOLON .)
    ID              reduce using rule 88 (estatutos_main -> repeticion SEMICOLON .)
    WHILE           reduce using rule 88 (estatutos_main -> repeticion SEMICOLON .)
    FOR             reduce using rule 88 (estatutos_main -> repeticion SEMICOLON .)
    RIGHT_CURL      reduce using rule 88 (estatutos_main -> repeticion SEMICOLON .)
    RETURN          reduce using rule 88 (estatutos_main -> repeticion SEMICOLON .)


state 69

    (93) asignacion -> dec_varaux punto_asignacion_var . EQUALS punto_igual m_exp punto_asignacion

    EQUALS          shift and go to state 85


state 70

    (97) llamada -> VD ID . LEFT_PAR RIGHT_PAR
    (98) llamada -> VD ID . LEFT_PAR dec_var RIGHT_PAR

    LEFT_PAR        shift and go to state 86


state 71

    (22) dec_varaux -> ID LEFT_BR . CTE_I RIGHT_BR
    (23) dec_varaux -> ID LEFT_BR . CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    CTE_I           shift and go to state 87


state 72

    (102) lectura -> READ LEFT_PAR . lectura_var RIGHT_PAR
    (103) lectura_var -> . punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand COMMA lectura_var
    (104) lectura_var -> . punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand
    (101) punto_read_stack -> .

    ID              reduce using rule 101 (punto_read_stack -> .)

    lectura_var                    shift and go to state 88
    punto_read_stack               shift and go to state 89

state 73

    (107) escritura -> WRITE LEFT_PAR . escritura_aux RIGHT_PAR
    (108) escritura_aux -> . punto_write_stack STR punto_escritura_push punto_add_write_operand
    (109) escritura_aux -> . punto_write_stack m_exp punto_escritura_push punto_add_write_operand
    (110) escritura_aux -> . punto_write_stack STR punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (111) escritura_aux -> . punto_write_stack m_exp punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (113) punto_write_stack -> .

    STR             reduce using rule 113 (punto_write_stack -> .)
    ID              reduce using rule 113 (punto_write_stack -> .)
    LEFT_PAR        reduce using rule 113 (punto_write_stack -> .)
    CTE_I           reduce using rule 113 (punto_write_stack -> .)
    CTE_CHAR        reduce using rule 113 (punto_write_stack -> .)

    escritura_aux                  shift and go to state 90
    punto_write_stack              shift and go to state 91

state 74

    (115) decision -> IF LEFT_PAR . exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (116) decision -> IF LEFT_PAR . exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (45) exp_or -> . t_exp punto_pop_or t_exp_or_aux
    (46) exp_or -> . t_exp punto_pop_or
    (50) t_exp -> . g_exp pop_and t_exp_aux
    (51) t_exp -> . g_exp pop_and
    (55) g_exp -> . m_exp
    (56) g_exp -> . m_exp relacionales punto_relacionales m_exp punto_pop_relacional
    (59) m_exp -> . termino punto_mexp_pop
    (60) m_exp -> . termino punto_mexp_pop m_exp_aux
    (65) termino -> . factor punto_termino_pop
    (66) termino -> . factor punto_termino_pop termino_aux
    (71) factor -> . cte
    (72) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (73) factor -> . ID LEFT_PAR RIGHT_PAR
    (74) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (131) cte -> . ID factor_push_operand
    (132) cte -> . CTE_I factor_int_push
    (133) cte -> . cte_f factor_float_push
    (134) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 100
    LEFT_PAR        shift and go to state 92
    CTE_I           shift and go to state 101
    CTE_CHAR        shift and go to state 103

    exp_or                         shift and go to state 93
    t_exp                          shift and go to state 94
    g_exp                          shift and go to state 95
    m_exp                          shift and go to state 96
    termino                        shift and go to state 97
    factor                         shift and go to state 98
    cte                            shift and go to state 99
    cte_f                          shift and go to state 102

state 75

    (127) condicional -> WHILE punto_while . LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while

    LEFT_PAR        shift and go to state 104


state 76

    (122) no_condicional -> FOR LEFT_PAR . dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    ID              shift and go to state 49

    dec_varaux                     shift and go to state 105

state 77

    (14) variables_aux -> tipo COLON declaracion_inicial MORE . variables_aux
    (13) variables_aux -> . tipo COLON declaracion_inicial
    (14) variables_aux -> . tipo COLON declaracion_inicial MORE variables_aux
    (15) tipo -> . INT
    (16) tipo -> . FLOAT
    (17) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    tipo                           shift and go to state 29
    variables_aux                  shift and go to state 106

state 78

    (18) declaracion_inicial -> dec_varaux punto_dec_var_1 . COMMA declaracion_inicial
    (19) declaracion_inicial -> dec_varaux punto_dec_var_1 .

    COMMA           shift and go to state 107
    MORE            reduce using rule 19 (declaracion_inicial -> dec_varaux punto_dec_var_1 .)
    SEMICOLON       reduce using rule 19 (declaracion_inicial -> dec_varaux punto_dec_var_1 .)


state 79

    (29) funciones_aux -> tipo FUNC ID punto_id_func punto_return_value LEFT_PAR . not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return
    (34) not_params -> . parametros count_params
    (35) not_params -> . empty
    (38) parametros -> . dec_var_param COMMA parametros
    (39) parametros -> . dec_var_param
    (139) empty -> .
    (40) dec_var_param -> . tipo ID punto_push_param
    (15) tipo -> . INT
    (16) tipo -> . FLOAT
    (17) tipo -> . CHAR

    RIGHT_PAR       reduce using rule 139 (empty -> .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    tipo                           shift and go to state 84
    not_params                     shift and go to state 108
    parametros                     shift and go to state 81
    empty                          shift and go to state 82
    dec_var_param                  shift and go to state 83

state 80

    (30) funciones_aux -> VOID FUNC ID punto_id_func LEFT_PAR not_params . RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func

    RIGHT_PAR       shift and go to state 109


state 81

    (34) not_params -> parametros . count_params
    (42) count_params -> .

    RIGHT_PAR       reduce using rule 42 (count_params -> .)

    count_params                   shift and go to state 110

state 82

    (35) not_params -> empty .

    RIGHT_PAR       reduce using rule 35 (not_params -> empty .)


state 83

    (38) parametros -> dec_var_param . COMMA parametros
    (39) parametros -> dec_var_param .

    COMMA           shift and go to state 111
    RIGHT_PAR       reduce using rule 39 (parametros -> dec_var_param .)


state 84

    (40) dec_var_param -> tipo . ID punto_push_param

    ID              shift and go to state 112


state 85

    (93) asignacion -> dec_varaux punto_asignacion_var EQUALS . punto_igual m_exp punto_asignacion
    (95) punto_igual -> .

    ID              reduce using rule 95 (punto_igual -> .)
    LEFT_PAR        reduce using rule 95 (punto_igual -> .)
    CTE_I           reduce using rule 95 (punto_igual -> .)
    CTE_CHAR        reduce using rule 95 (punto_igual -> .)

    punto_igual                    shift and go to state 113

state 86

    (97) llamada -> VD ID LEFT_PAR . RIGHT_PAR
    (98) llamada -> VD ID LEFT_PAR . dec_var RIGHT_PAR
    (25) dec_var -> . dec_varaux COMMA dec_var
    (26) dec_var -> . dec_varaux
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    RIGHT_PAR       shift and go to state 114
    ID              shift and go to state 49

    dec_var                        shift and go to state 115
    dec_varaux                     shift and go to state 116

state 87

    (22) dec_varaux -> ID LEFT_BR CTE_I . RIGHT_BR
    (23) dec_varaux -> ID LEFT_BR CTE_I . RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    RIGHT_BR        shift and go to state 117


state 88

    (102) lectura -> READ LEFT_PAR lectura_var . RIGHT_PAR

    RIGHT_PAR       shift and go to state 118


state 89

    (103) lectura_var -> punto_read_stack . dec_varaux punto_push_dec_var punto_add_read_operand COMMA lectura_var
    (104) lectura_var -> punto_read_stack . dec_varaux punto_push_dec_var punto_add_read_operand
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    ID              shift and go to state 49

    dec_varaux                     shift and go to state 119

state 90

    (107) escritura -> WRITE LEFT_PAR escritura_aux . RIGHT_PAR

    RIGHT_PAR       shift and go to state 120


state 91

    (108) escritura_aux -> punto_write_stack . STR punto_escritura_push punto_add_write_operand
    (109) escritura_aux -> punto_write_stack . m_exp punto_escritura_push punto_add_write_operand
    (110) escritura_aux -> punto_write_stack . STR punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (111) escritura_aux -> punto_write_stack . m_exp punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (59) m_exp -> . termino punto_mexp_pop
    (60) m_exp -> . termino punto_mexp_pop m_exp_aux
    (65) termino -> . factor punto_termino_pop
    (66) termino -> . factor punto_termino_pop termino_aux
    (71) factor -> . cte
    (72) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (73) factor -> . ID LEFT_PAR RIGHT_PAR
    (74) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (131) cte -> . ID factor_push_operand
    (132) cte -> . CTE_I factor_int_push
    (133) cte -> . cte_f factor_float_push
    (134) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    STR             shift and go to state 121
    ID              shift and go to state 100
    LEFT_PAR        shift and go to state 92
    CTE_I           shift and go to state 101
    CTE_CHAR        shift and go to state 103

    m_exp                          shift and go to state 122
    termino                        shift and go to state 97
    factor                         shift and go to state 98
    cte                            shift and go to state 99
    cte_f                          shift and go to state 102

state 92

    (74) factor -> LEFT_PAR . exp_or RIGHT_PAR
    (45) exp_or -> . t_exp punto_pop_or t_exp_or_aux
    (46) exp_or -> . t_exp punto_pop_or
    (50) t_exp -> . g_exp pop_and t_exp_aux
    (51) t_exp -> . g_exp pop_and
    (55) g_exp -> . m_exp
    (56) g_exp -> . m_exp relacionales punto_relacionales m_exp punto_pop_relacional
    (59) m_exp -> . termino punto_mexp_pop
    (60) m_exp -> . termino punto_mexp_pop m_exp_aux
    (65) termino -> . factor punto_termino_pop
    (66) termino -> . factor punto_termino_pop termino_aux
    (71) factor -> . cte
    (72) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (73) factor -> . ID LEFT_PAR RIGHT_PAR
    (74) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (131) cte -> . ID factor_push_operand
    (132) cte -> . CTE_I factor_int_push
    (133) cte -> . cte_f factor_float_push
    (134) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 100
    LEFT_PAR        shift and go to state 92
    CTE_I           shift and go to state 101
    CTE_CHAR        shift and go to state 103

    exp_or                         shift and go to state 123
    t_exp                          shift and go to state 94
    g_exp                          shift and go to state 95
    m_exp                          shift and go to state 96
    termino                        shift and go to state 97
    factor                         shift and go to state 98
    cte                            shift and go to state 99
    cte_f                          shift and go to state 102

state 93

    (115) decision -> IF LEFT_PAR exp_or . RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (116) decision -> IF LEFT_PAR exp_or . RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if

    RIGHT_PAR       shift and go to state 124


state 94

    (45) exp_or -> t_exp . punto_pop_or t_exp_or_aux
    (46) exp_or -> t_exp . punto_pop_or
    (47) punto_pop_or -> .

    OR              reduce using rule 47 (punto_pop_or -> .)
    RIGHT_PAR       reduce using rule 47 (punto_pop_or -> .)

    punto_pop_or                   shift and go to state 125

state 95

    (50) t_exp -> g_exp . pop_and t_exp_aux
    (51) t_exp -> g_exp . pop_and
    (52) pop_and -> .

    AND             reduce using rule 52 (pop_and -> .)
    OR              reduce using rule 52 (pop_and -> .)
    RIGHT_PAR       reduce using rule 52 (pop_and -> .)

    pop_and                        shift and go to state 126

state 96

    (55) g_exp -> m_exp .
    (56) g_exp -> m_exp . relacionales punto_relacionales m_exp punto_pop_relacional
    (75) relacionales -> . LESS_THAN
    (76) relacionales -> . GREATER_THAN
    (77) relacionales -> . DIFFERENT
    (78) relacionales -> . EQUAL
    (79) relacionales -> . GREATER_EQUAL
    (80) relacionales -> . LESS_EQUAL

    AND             reduce using rule 55 (g_exp -> m_exp .)
    OR              reduce using rule 55 (g_exp -> m_exp .)
    RIGHT_PAR       reduce using rule 55 (g_exp -> m_exp .)
    LESS_THAN       shift and go to state 128
    GREATER_THAN    shift and go to state 129
    DIFFERENT       shift and go to state 130
    EQUAL           shift and go to state 131
    GREATER_EQUAL   shift and go to state 132
    LESS_EQUAL      shift and go to state 133

    relacionales                   shift and go to state 127

state 97

    (59) m_exp -> termino . punto_mexp_pop
    (60) m_exp -> termino . punto_mexp_pop m_exp_aux
    (61) punto_mexp_pop -> .

    PLUS            reduce using rule 61 (punto_mexp_pop -> .)
    MINUS           reduce using rule 61 (punto_mexp_pop -> .)
    LESS_THAN       reduce using rule 61 (punto_mexp_pop -> .)
    GREATER_THAN    reduce using rule 61 (punto_mexp_pop -> .)
    DIFFERENT       reduce using rule 61 (punto_mexp_pop -> .)
    EQUAL           reduce using rule 61 (punto_mexp_pop -> .)
    GREATER_EQUAL   reduce using rule 61 (punto_mexp_pop -> .)
    LESS_EQUAL      reduce using rule 61 (punto_mexp_pop -> .)
    AND             reduce using rule 61 (punto_mexp_pop -> .)
    OR              reduce using rule 61 (punto_mexp_pop -> .)
    RIGHT_PAR       reduce using rule 61 (punto_mexp_pop -> .)
    COMMA           reduce using rule 61 (punto_mexp_pop -> .)
    SEMICOLON       reduce using rule 61 (punto_mexp_pop -> .)
    TO              reduce using rule 61 (punto_mexp_pop -> .)

    punto_mexp_pop                 shift and go to state 134

state 98

    (65) termino -> factor . punto_termino_pop
    (66) termino -> factor . punto_termino_pop termino_aux
    (67) punto_termino_pop -> .

    MULTIPLY        reduce using rule 67 (punto_termino_pop -> .)
    DIVIDE          reduce using rule 67 (punto_termino_pop -> .)
    PLUS            reduce using rule 67 (punto_termino_pop -> .)
    MINUS           reduce using rule 67 (punto_termino_pop -> .)
    LESS_THAN       reduce using rule 67 (punto_termino_pop -> .)
    GREATER_THAN    reduce using rule 67 (punto_termino_pop -> .)
    DIFFERENT       reduce using rule 67 (punto_termino_pop -> .)
    EQUAL           reduce using rule 67 (punto_termino_pop -> .)
    GREATER_EQUAL   reduce using rule 67 (punto_termino_pop -> .)
    LESS_EQUAL      reduce using rule 67 (punto_termino_pop -> .)
    AND             reduce using rule 67 (punto_termino_pop -> .)
    OR              reduce using rule 67 (punto_termino_pop -> .)
    RIGHT_PAR       reduce using rule 67 (punto_termino_pop -> .)
    COMMA           reduce using rule 67 (punto_termino_pop -> .)
    SEMICOLON       reduce using rule 67 (punto_termino_pop -> .)
    TO              reduce using rule 67 (punto_termino_pop -> .)

    punto_termino_pop              shift and go to state 135

state 99

    (71) factor -> cte .

    MULTIPLY        reduce using rule 71 (factor -> cte .)
    DIVIDE          reduce using rule 71 (factor -> cte .)
    PLUS            reduce using rule 71 (factor -> cte .)
    MINUS           reduce using rule 71 (factor -> cte .)
    LESS_THAN       reduce using rule 71 (factor -> cte .)
    GREATER_THAN    reduce using rule 71 (factor -> cte .)
    DIFFERENT       reduce using rule 71 (factor -> cte .)
    EQUAL           reduce using rule 71 (factor -> cte .)
    GREATER_EQUAL   reduce using rule 71 (factor -> cte .)
    LESS_EQUAL      reduce using rule 71 (factor -> cte .)
    AND             reduce using rule 71 (factor -> cte .)
    OR              reduce using rule 71 (factor -> cte .)
    RIGHT_PAR       reduce using rule 71 (factor -> cte .)
    COMMA           reduce using rule 71 (factor -> cte .)
    SEMICOLON       reduce using rule 71 (factor -> cte .)
    TO              reduce using rule 71 (factor -> cte .)


state 100

    (72) factor -> ID . LEFT_PAR dec_var RIGHT_PAR
    (73) factor -> ID . LEFT_PAR RIGHT_PAR
    (131) cte -> ID . factor_push_operand
    (135) factor_push_operand -> .

    LEFT_PAR        shift and go to state 136
    MULTIPLY        reduce using rule 135 (factor_push_operand -> .)
    DIVIDE          reduce using rule 135 (factor_push_operand -> .)
    PLUS            reduce using rule 135 (factor_push_operand -> .)
    MINUS           reduce using rule 135 (factor_push_operand -> .)
    LESS_THAN       reduce using rule 135 (factor_push_operand -> .)
    GREATER_THAN    reduce using rule 135 (factor_push_operand -> .)
    DIFFERENT       reduce using rule 135 (factor_push_operand -> .)
    EQUAL           reduce using rule 135 (factor_push_operand -> .)
    GREATER_EQUAL   reduce using rule 135 (factor_push_operand -> .)
    LESS_EQUAL      reduce using rule 135 (factor_push_operand -> .)
    AND             reduce using rule 135 (factor_push_operand -> .)
    OR              reduce using rule 135 (factor_push_operand -> .)
    RIGHT_PAR       reduce using rule 135 (factor_push_operand -> .)
    COMMA           reduce using rule 135 (factor_push_operand -> .)
    SEMICOLON       reduce using rule 135 (factor_push_operand -> .)
    TO              reduce using rule 135 (factor_push_operand -> .)

    factor_push_operand            shift and go to state 137

state 101

    (132) cte -> CTE_I . factor_int_push
    (1) cte_f -> CTE_I . DOT CTE_I
    (137) factor_int_push -> .

    DOT             shift and go to state 139
    MULTIPLY        reduce using rule 137 (factor_int_push -> .)
    DIVIDE          reduce using rule 137 (factor_int_push -> .)
    PLUS            reduce using rule 137 (factor_int_push -> .)
    MINUS           reduce using rule 137 (factor_int_push -> .)
    LESS_THAN       reduce using rule 137 (factor_int_push -> .)
    GREATER_THAN    reduce using rule 137 (factor_int_push -> .)
    DIFFERENT       reduce using rule 137 (factor_int_push -> .)
    EQUAL           reduce using rule 137 (factor_int_push -> .)
    GREATER_EQUAL   reduce using rule 137 (factor_int_push -> .)
    LESS_EQUAL      reduce using rule 137 (factor_int_push -> .)
    AND             reduce using rule 137 (factor_int_push -> .)
    OR              reduce using rule 137 (factor_int_push -> .)
    RIGHT_PAR       reduce using rule 137 (factor_int_push -> .)
    COMMA           reduce using rule 137 (factor_int_push -> .)
    SEMICOLON       reduce using rule 137 (factor_int_push -> .)
    TO              reduce using rule 137 (factor_int_push -> .)

    factor_int_push                shift and go to state 138

state 102

    (133) cte -> cte_f . factor_float_push
    (136) factor_float_push -> .

    MULTIPLY        reduce using rule 136 (factor_float_push -> .)
    DIVIDE          reduce using rule 136 (factor_float_push -> .)
    PLUS            reduce using rule 136 (factor_float_push -> .)
    MINUS           reduce using rule 136 (factor_float_push -> .)
    LESS_THAN       reduce using rule 136 (factor_float_push -> .)
    GREATER_THAN    reduce using rule 136 (factor_float_push -> .)
    DIFFERENT       reduce using rule 136 (factor_float_push -> .)
    EQUAL           reduce using rule 136 (factor_float_push -> .)
    GREATER_EQUAL   reduce using rule 136 (factor_float_push -> .)
    LESS_EQUAL      reduce using rule 136 (factor_float_push -> .)
    AND             reduce using rule 136 (factor_float_push -> .)
    OR              reduce using rule 136 (factor_float_push -> .)
    RIGHT_PAR       reduce using rule 136 (factor_float_push -> .)
    COMMA           reduce using rule 136 (factor_float_push -> .)
    SEMICOLON       reduce using rule 136 (factor_float_push -> .)
    TO              reduce using rule 136 (factor_float_push -> .)

    factor_float_push              shift and go to state 140

state 103

    (134) cte -> CTE_CHAR . factor_char_push
    (138) factor_char_push -> .

    MULTIPLY        reduce using rule 138 (factor_char_push -> .)
    DIVIDE          reduce using rule 138 (factor_char_push -> .)
    PLUS            reduce using rule 138 (factor_char_push -> .)
    MINUS           reduce using rule 138 (factor_char_push -> .)
    LESS_THAN       reduce using rule 138 (factor_char_push -> .)
    GREATER_THAN    reduce using rule 138 (factor_char_push -> .)
    DIFFERENT       reduce using rule 138 (factor_char_push -> .)
    EQUAL           reduce using rule 138 (factor_char_push -> .)
    GREATER_EQUAL   reduce using rule 138 (factor_char_push -> .)
    LESS_EQUAL      reduce using rule 138 (factor_char_push -> .)
    AND             reduce using rule 138 (factor_char_push -> .)
    OR              reduce using rule 138 (factor_char_push -> .)
    RIGHT_PAR       reduce using rule 138 (factor_char_push -> .)
    COMMA           reduce using rule 138 (factor_char_push -> .)
    SEMICOLON       reduce using rule 138 (factor_char_push -> .)
    TO              reduce using rule 138 (factor_char_push -> .)

    factor_char_push               shift and go to state 141

state 104

    (127) condicional -> WHILE punto_while LEFT_PAR . exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (45) exp_or -> . t_exp punto_pop_or t_exp_or_aux
    (46) exp_or -> . t_exp punto_pop_or
    (50) t_exp -> . g_exp pop_and t_exp_aux
    (51) t_exp -> . g_exp pop_and
    (55) g_exp -> . m_exp
    (56) g_exp -> . m_exp relacionales punto_relacionales m_exp punto_pop_relacional
    (59) m_exp -> . termino punto_mexp_pop
    (60) m_exp -> . termino punto_mexp_pop m_exp_aux
    (65) termino -> . factor punto_termino_pop
    (66) termino -> . factor punto_termino_pop termino_aux
    (71) factor -> . cte
    (72) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (73) factor -> . ID LEFT_PAR RIGHT_PAR
    (74) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (131) cte -> . ID factor_push_operand
    (132) cte -> . CTE_I factor_int_push
    (133) cte -> . cte_f factor_float_push
    (134) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 100
    LEFT_PAR        shift and go to state 92
    CTE_I           shift and go to state 101
    CTE_CHAR        shift and go to state 103

    exp_or                         shift and go to state 142
    t_exp                          shift and go to state 94
    g_exp                          shift and go to state 95
    m_exp                          shift and go to state 96
    termino                        shift and go to state 97
    factor                         shift and go to state 98
    cte                            shift and go to state 99
    cte_f                          shift and go to state 102

state 105

    (122) no_condicional -> FOR LEFT_PAR dec_varaux . punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for
    (123) punto_for -> .

    EQUALS          reduce using rule 123 (punto_for -> .)

    punto_for                      shift and go to state 143

state 106

    (14) variables_aux -> tipo COLON declaracion_inicial MORE variables_aux .

    SEMICOLON       reduce using rule 14 (variables_aux -> tipo COLON declaracion_inicial MORE variables_aux .)


state 107

    (18) declaracion_inicial -> dec_varaux punto_dec_var_1 COMMA . declaracion_inicial
    (18) declaracion_inicial -> . dec_varaux punto_dec_var_1 COMMA declaracion_inicial
    (19) declaracion_inicial -> . dec_varaux punto_dec_var_1
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    ID              shift and go to state 49

    dec_varaux                     shift and go to state 58
    declaracion_inicial            shift and go to state 144

state 108

    (29) funciones_aux -> tipo FUNC ID punto_id_func punto_return_value LEFT_PAR not_params . RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return

    RIGHT_PAR       shift and go to state 145


state 109

    (30) funciones_aux -> VOID FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR . LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func

    LEFT_CURL       shift and go to state 146


state 110

    (34) not_params -> parametros count_params .

    RIGHT_PAR       reduce using rule 34 (not_params -> parametros count_params .)


state 111

    (38) parametros -> dec_var_param COMMA . parametros
    (38) parametros -> . dec_var_param COMMA parametros
    (39) parametros -> . dec_var_param
    (40) dec_var_param -> . tipo ID punto_push_param
    (15) tipo -> . INT
    (16) tipo -> . FLOAT
    (17) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    dec_var_param                  shift and go to state 83
    parametros                     shift and go to state 147
    tipo                           shift and go to state 84

state 112

    (40) dec_var_param -> tipo ID . punto_push_param
    (41) punto_push_param -> .

    COMMA           reduce using rule 41 (punto_push_param -> .)
    RIGHT_PAR       reduce using rule 41 (punto_push_param -> .)

    punto_push_param               shift and go to state 148

state 113

    (93) asignacion -> dec_varaux punto_asignacion_var EQUALS punto_igual . m_exp punto_asignacion
    (59) m_exp -> . termino punto_mexp_pop
    (60) m_exp -> . termino punto_mexp_pop m_exp_aux
    (65) termino -> . factor punto_termino_pop
    (66) termino -> . factor punto_termino_pop termino_aux
    (71) factor -> . cte
    (72) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (73) factor -> . ID LEFT_PAR RIGHT_PAR
    (74) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (131) cte -> . ID factor_push_operand
    (132) cte -> . CTE_I factor_int_push
    (133) cte -> . cte_f factor_float_push
    (134) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 100
    LEFT_PAR        shift and go to state 92
    CTE_I           shift and go to state 101
    CTE_CHAR        shift and go to state 103

    m_exp                          shift and go to state 149
    termino                        shift and go to state 97
    factor                         shift and go to state 98
    cte                            shift and go to state 99
    cte_f                          shift and go to state 102

state 114

    (97) llamada -> VD ID LEFT_PAR RIGHT_PAR .

    SEMICOLON       reduce using rule 97 (llamada -> VD ID LEFT_PAR RIGHT_PAR .)


state 115

    (98) llamada -> VD ID LEFT_PAR dec_var . RIGHT_PAR

    RIGHT_PAR       shift and go to state 150


state 116

    (25) dec_var -> dec_varaux . COMMA dec_var
    (26) dec_var -> dec_varaux .

    COMMA           shift and go to state 151
    RIGHT_PAR       reduce using rule 26 (dec_var -> dec_varaux .)


state 117

    (22) dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR .
    (23) dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR . LEFT_BR CTE_I RIGHT_BR

    EQUALS          reduce using rule 22 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR .)
    COMMA           reduce using rule 22 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR .)
    MORE            reduce using rule 22 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR .)
    SEMICOLON       reduce using rule 22 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR .)
    RIGHT_PAR       reduce using rule 22 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR .)
    LEFT_BR         shift and go to state 152


state 118

    (102) lectura -> READ LEFT_PAR lectura_var RIGHT_PAR .

    SEMICOLON       reduce using rule 102 (lectura -> READ LEFT_PAR lectura_var RIGHT_PAR .)


state 119

    (103) lectura_var -> punto_read_stack dec_varaux . punto_push_dec_var punto_add_read_operand COMMA lectura_var
    (104) lectura_var -> punto_read_stack dec_varaux . punto_push_dec_var punto_add_read_operand
    (105) punto_push_dec_var -> .

    COMMA           reduce using rule 105 (punto_push_dec_var -> .)
    RIGHT_PAR       reduce using rule 105 (punto_push_dec_var -> .)

    punto_push_dec_var             shift and go to state 153

state 120

    (107) escritura -> WRITE LEFT_PAR escritura_aux RIGHT_PAR .

    SEMICOLON       reduce using rule 107 (escritura -> WRITE LEFT_PAR escritura_aux RIGHT_PAR .)


state 121

    (108) escritura_aux -> punto_write_stack STR . punto_escritura_push punto_add_write_operand
    (110) escritura_aux -> punto_write_stack STR . punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (112) punto_escritura_push -> .

    COMMA           reduce using rule 112 (punto_escritura_push -> .)
    RIGHT_PAR       reduce using rule 112 (punto_escritura_push -> .)

    punto_escritura_push           shift and go to state 154

state 122

    (109) escritura_aux -> punto_write_stack m_exp . punto_escritura_push punto_add_write_operand
    (111) escritura_aux -> punto_write_stack m_exp . punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (112) punto_escritura_push -> .

    COMMA           reduce using rule 112 (punto_escritura_push -> .)
    RIGHT_PAR       reduce using rule 112 (punto_escritura_push -> .)

    punto_escritura_push           shift and go to state 155

state 123

    (74) factor -> LEFT_PAR exp_or . RIGHT_PAR

    RIGHT_PAR       shift and go to state 156


state 124

    (115) decision -> IF LEFT_PAR exp_or RIGHT_PAR . punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (116) decision -> IF LEFT_PAR exp_or RIGHT_PAR . punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (117) punto_if_exp -> .

    THEN            reduce using rule 117 (punto_if_exp -> .)

    punto_if_exp                   shift and go to state 157

state 125

    (45) exp_or -> t_exp punto_pop_or . t_exp_or_aux
    (46) exp_or -> t_exp punto_pop_or .
    (48) t_exp_or_aux -> . OR punto_push_or exp_or

    RIGHT_PAR       reduce using rule 46 (exp_or -> t_exp punto_pop_or .)
    OR              shift and go to state 159

    t_exp_or_aux                   shift and go to state 158

state 126

    (50) t_exp -> g_exp pop_and . t_exp_aux
    (51) t_exp -> g_exp pop_and .
    (53) t_exp_aux -> . AND punto_push_and t_exp

    OR              reduce using rule 51 (t_exp -> g_exp pop_and .)
    RIGHT_PAR       reduce using rule 51 (t_exp -> g_exp pop_and .)
    AND             shift and go to state 161

    t_exp_aux                      shift and go to state 160

state 127

    (56) g_exp -> m_exp relacionales . punto_relacionales m_exp punto_pop_relacional
    (57) punto_relacionales -> .

    ID              reduce using rule 57 (punto_relacionales -> .)
    LEFT_PAR        reduce using rule 57 (punto_relacionales -> .)
    CTE_I           reduce using rule 57 (punto_relacionales -> .)
    CTE_CHAR        reduce using rule 57 (punto_relacionales -> .)

    punto_relacionales             shift and go to state 162

state 128

    (75) relacionales -> LESS_THAN .

    ID              reduce using rule 75 (relacionales -> LESS_THAN .)
    LEFT_PAR        reduce using rule 75 (relacionales -> LESS_THAN .)
    CTE_I           reduce using rule 75 (relacionales -> LESS_THAN .)
    CTE_CHAR        reduce using rule 75 (relacionales -> LESS_THAN .)


state 129

    (76) relacionales -> GREATER_THAN .

    ID              reduce using rule 76 (relacionales -> GREATER_THAN .)
    LEFT_PAR        reduce using rule 76 (relacionales -> GREATER_THAN .)
    CTE_I           reduce using rule 76 (relacionales -> GREATER_THAN .)
    CTE_CHAR        reduce using rule 76 (relacionales -> GREATER_THAN .)


state 130

    (77) relacionales -> DIFFERENT .

    ID              reduce using rule 77 (relacionales -> DIFFERENT .)
    LEFT_PAR        reduce using rule 77 (relacionales -> DIFFERENT .)
    CTE_I           reduce using rule 77 (relacionales -> DIFFERENT .)
    CTE_CHAR        reduce using rule 77 (relacionales -> DIFFERENT .)


state 131

    (78) relacionales -> EQUAL .

    ID              reduce using rule 78 (relacionales -> EQUAL .)
    LEFT_PAR        reduce using rule 78 (relacionales -> EQUAL .)
    CTE_I           reduce using rule 78 (relacionales -> EQUAL .)
    CTE_CHAR        reduce using rule 78 (relacionales -> EQUAL .)


state 132

    (79) relacionales -> GREATER_EQUAL .

    ID              reduce using rule 79 (relacionales -> GREATER_EQUAL .)
    LEFT_PAR        reduce using rule 79 (relacionales -> GREATER_EQUAL .)
    CTE_I           reduce using rule 79 (relacionales -> GREATER_EQUAL .)
    CTE_CHAR        reduce using rule 79 (relacionales -> GREATER_EQUAL .)


state 133

    (80) relacionales -> LESS_EQUAL .

    ID              reduce using rule 80 (relacionales -> LESS_EQUAL .)
    LEFT_PAR        reduce using rule 80 (relacionales -> LESS_EQUAL .)
    CTE_I           reduce using rule 80 (relacionales -> LESS_EQUAL .)
    CTE_CHAR        reduce using rule 80 (relacionales -> LESS_EQUAL .)


state 134

    (59) m_exp -> termino punto_mexp_pop .
    (60) m_exp -> termino punto_mexp_pop . m_exp_aux
    (62) m_exp_aux -> . PLUS punto_m_exp_push m_exp
    (63) m_exp_aux -> . MINUS punto_m_exp_push m_exp

    LESS_THAN       reduce using rule 59 (m_exp -> termino punto_mexp_pop .)
    GREATER_THAN    reduce using rule 59 (m_exp -> termino punto_mexp_pop .)
    DIFFERENT       reduce using rule 59 (m_exp -> termino punto_mexp_pop .)
    EQUAL           reduce using rule 59 (m_exp -> termino punto_mexp_pop .)
    GREATER_EQUAL   reduce using rule 59 (m_exp -> termino punto_mexp_pop .)
    LESS_EQUAL      reduce using rule 59 (m_exp -> termino punto_mexp_pop .)
    AND             reduce using rule 59 (m_exp -> termino punto_mexp_pop .)
    OR              reduce using rule 59 (m_exp -> termino punto_mexp_pop .)
    RIGHT_PAR       reduce using rule 59 (m_exp -> termino punto_mexp_pop .)
    COMMA           reduce using rule 59 (m_exp -> termino punto_mexp_pop .)
    SEMICOLON       reduce using rule 59 (m_exp -> termino punto_mexp_pop .)
    TO              reduce using rule 59 (m_exp -> termino punto_mexp_pop .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165

    m_exp_aux                      shift and go to state 163

state 135

    (65) termino -> factor punto_termino_pop .
    (66) termino -> factor punto_termino_pop . termino_aux
    (68) termino_aux -> . MULTIPLY punto_termino_aux termino
    (69) termino_aux -> . DIVIDE punto_termino_aux termino

    PLUS            reduce using rule 65 (termino -> factor punto_termino_pop .)
    MINUS           reduce using rule 65 (termino -> factor punto_termino_pop .)
    LESS_THAN       reduce using rule 65 (termino -> factor punto_termino_pop .)
    GREATER_THAN    reduce using rule 65 (termino -> factor punto_termino_pop .)
    DIFFERENT       reduce using rule 65 (termino -> factor punto_termino_pop .)
    EQUAL           reduce using rule 65 (termino -> factor punto_termino_pop .)
    GREATER_EQUAL   reduce using rule 65 (termino -> factor punto_termino_pop .)
    LESS_EQUAL      reduce using rule 65 (termino -> factor punto_termino_pop .)
    AND             reduce using rule 65 (termino -> factor punto_termino_pop .)
    OR              reduce using rule 65 (termino -> factor punto_termino_pop .)
    RIGHT_PAR       reduce using rule 65 (termino -> factor punto_termino_pop .)
    COMMA           reduce using rule 65 (termino -> factor punto_termino_pop .)
    SEMICOLON       reduce using rule 65 (termino -> factor punto_termino_pop .)
    TO              reduce using rule 65 (termino -> factor punto_termino_pop .)
    MULTIPLY        shift and go to state 167
    DIVIDE          shift and go to state 168

    termino_aux                    shift and go to state 166

state 136

    (72) factor -> ID LEFT_PAR . dec_var RIGHT_PAR
    (73) factor -> ID LEFT_PAR . RIGHT_PAR
    (25) dec_var -> . dec_varaux COMMA dec_var
    (26) dec_var -> . dec_varaux
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    RIGHT_PAR       shift and go to state 170
    ID              shift and go to state 49

    dec_var                        shift and go to state 169
    dec_varaux                     shift and go to state 116

state 137

    (131) cte -> ID factor_push_operand .

    MULTIPLY        reduce using rule 131 (cte -> ID factor_push_operand .)
    DIVIDE          reduce using rule 131 (cte -> ID factor_push_operand .)
    PLUS            reduce using rule 131 (cte -> ID factor_push_operand .)
    MINUS           reduce using rule 131 (cte -> ID factor_push_operand .)
    LESS_THAN       reduce using rule 131 (cte -> ID factor_push_operand .)
    GREATER_THAN    reduce using rule 131 (cte -> ID factor_push_operand .)
    DIFFERENT       reduce using rule 131 (cte -> ID factor_push_operand .)
    EQUAL           reduce using rule 131 (cte -> ID factor_push_operand .)
    GREATER_EQUAL   reduce using rule 131 (cte -> ID factor_push_operand .)
    LESS_EQUAL      reduce using rule 131 (cte -> ID factor_push_operand .)
    AND             reduce using rule 131 (cte -> ID factor_push_operand .)
    OR              reduce using rule 131 (cte -> ID factor_push_operand .)
    RIGHT_PAR       reduce using rule 131 (cte -> ID factor_push_operand .)
    COMMA           reduce using rule 131 (cte -> ID factor_push_operand .)
    SEMICOLON       reduce using rule 131 (cte -> ID factor_push_operand .)
    TO              reduce using rule 131 (cte -> ID factor_push_operand .)


state 138

    (132) cte -> CTE_I factor_int_push .

    MULTIPLY        reduce using rule 132 (cte -> CTE_I factor_int_push .)
    DIVIDE          reduce using rule 132 (cte -> CTE_I factor_int_push .)
    PLUS            reduce using rule 132 (cte -> CTE_I factor_int_push .)
    MINUS           reduce using rule 132 (cte -> CTE_I factor_int_push .)
    LESS_THAN       reduce using rule 132 (cte -> CTE_I factor_int_push .)
    GREATER_THAN    reduce using rule 132 (cte -> CTE_I factor_int_push .)
    DIFFERENT       reduce using rule 132 (cte -> CTE_I factor_int_push .)
    EQUAL           reduce using rule 132 (cte -> CTE_I factor_int_push .)
    GREATER_EQUAL   reduce using rule 132 (cte -> CTE_I factor_int_push .)
    LESS_EQUAL      reduce using rule 132 (cte -> CTE_I factor_int_push .)
    AND             reduce using rule 132 (cte -> CTE_I factor_int_push .)
    OR              reduce using rule 132 (cte -> CTE_I factor_int_push .)
    RIGHT_PAR       reduce using rule 132 (cte -> CTE_I factor_int_push .)
    COMMA           reduce using rule 132 (cte -> CTE_I factor_int_push .)
    SEMICOLON       reduce using rule 132 (cte -> CTE_I factor_int_push .)
    TO              reduce using rule 132 (cte -> CTE_I factor_int_push .)


state 139

    (1) cte_f -> CTE_I DOT . CTE_I

    CTE_I           shift and go to state 171


state 140

    (133) cte -> cte_f factor_float_push .

    MULTIPLY        reduce using rule 133 (cte -> cte_f factor_float_push .)
    DIVIDE          reduce using rule 133 (cte -> cte_f factor_float_push .)
    PLUS            reduce using rule 133 (cte -> cte_f factor_float_push .)
    MINUS           reduce using rule 133 (cte -> cte_f factor_float_push .)
    LESS_THAN       reduce using rule 133 (cte -> cte_f factor_float_push .)
    GREATER_THAN    reduce using rule 133 (cte -> cte_f factor_float_push .)
    DIFFERENT       reduce using rule 133 (cte -> cte_f factor_float_push .)
    EQUAL           reduce using rule 133 (cte -> cte_f factor_float_push .)
    GREATER_EQUAL   reduce using rule 133 (cte -> cte_f factor_float_push .)
    LESS_EQUAL      reduce using rule 133 (cte -> cte_f factor_float_push .)
    AND             reduce using rule 133 (cte -> cte_f factor_float_push .)
    OR              reduce using rule 133 (cte -> cte_f factor_float_push .)
    RIGHT_PAR       reduce using rule 133 (cte -> cte_f factor_float_push .)
    COMMA           reduce using rule 133 (cte -> cte_f factor_float_push .)
    SEMICOLON       reduce using rule 133 (cte -> cte_f factor_float_push .)
    TO              reduce using rule 133 (cte -> cte_f factor_float_push .)


state 141

    (134) cte -> CTE_CHAR factor_char_push .

    MULTIPLY        reduce using rule 134 (cte -> CTE_CHAR factor_char_push .)
    DIVIDE          reduce using rule 134 (cte -> CTE_CHAR factor_char_push .)
    PLUS            reduce using rule 134 (cte -> CTE_CHAR factor_char_push .)
    MINUS           reduce using rule 134 (cte -> CTE_CHAR factor_char_push .)
    LESS_THAN       reduce using rule 134 (cte -> CTE_CHAR factor_char_push .)
    GREATER_THAN    reduce using rule 134 (cte -> CTE_CHAR factor_char_push .)
    DIFFERENT       reduce using rule 134 (cte -> CTE_CHAR factor_char_push .)
    EQUAL           reduce using rule 134 (cte -> CTE_CHAR factor_char_push .)
    GREATER_EQUAL   reduce using rule 134 (cte -> CTE_CHAR factor_char_push .)
    LESS_EQUAL      reduce using rule 134 (cte -> CTE_CHAR factor_char_push .)
    AND             reduce using rule 134 (cte -> CTE_CHAR factor_char_push .)
    OR              reduce using rule 134 (cte -> CTE_CHAR factor_char_push .)
    RIGHT_PAR       reduce using rule 134 (cte -> CTE_CHAR factor_char_push .)
    COMMA           reduce using rule 134 (cte -> CTE_CHAR factor_char_push .)
    SEMICOLON       reduce using rule 134 (cte -> CTE_CHAR factor_char_push .)
    TO              reduce using rule 134 (cte -> CTE_CHAR factor_char_push .)


state 142

    (127) condicional -> WHILE punto_while LEFT_PAR exp_or . RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while

    RIGHT_PAR       shift and go to state 172


state 143

    (122) no_condicional -> FOR LEFT_PAR dec_varaux punto_for . EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for

    EQUALS          shift and go to state 173


state 144

    (18) declaracion_inicial -> dec_varaux punto_dec_var_1 COMMA declaracion_inicial .

    MORE            reduce using rule 18 (declaracion_inicial -> dec_varaux punto_dec_var_1 COMMA declaracion_inicial .)
    SEMICOLON       reduce using rule 18 (declaracion_inicial -> dec_varaux punto_dec_var_1 COMMA declaracion_inicial .)


state 145

    (29) funciones_aux -> tipo FUNC ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR . LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return

    LEFT_CURL       shift and go to state 174


state 146

    (30) funciones_aux -> VOID FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL . not_variables count_vars estatutos RIGHT_CURL end_func
    (32) not_variables -> . variables count_vars
    (33) not_variables -> . empty
    (10) variables -> . VAR punto_variables_1 SEMICOLON
    (11) variables -> . VAR punto_variables_1 variables_aux SEMICOLON
    (139) empty -> .

    VAR             shift and go to state 10
    RETURN          reduce using rule 139 (empty -> .)
    VD              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    FOR             reduce using rule 139 (empty -> .)

    not_variables                  shift and go to state 175
    variables                      shift and go to state 176
    empty                          shift and go to state 177

state 147

    (38) parametros -> dec_var_param COMMA parametros .

    RIGHT_PAR       reduce using rule 38 (parametros -> dec_var_param COMMA parametros .)


state 148

    (40) dec_var_param -> tipo ID punto_push_param .

    COMMA           reduce using rule 40 (dec_var_param -> tipo ID punto_push_param .)
    RIGHT_PAR       reduce using rule 40 (dec_var_param -> tipo ID punto_push_param .)


state 149

    (93) asignacion -> dec_varaux punto_asignacion_var EQUALS punto_igual m_exp . punto_asignacion
    (96) punto_asignacion -> .

    SEMICOLON       reduce using rule 96 (punto_asignacion -> .)

    punto_asignacion               shift and go to state 178

state 150

    (98) llamada -> VD ID LEFT_PAR dec_var RIGHT_PAR .

    SEMICOLON       reduce using rule 98 (llamada -> VD ID LEFT_PAR dec_var RIGHT_PAR .)


state 151

    (25) dec_var -> dec_varaux COMMA . dec_var
    (25) dec_var -> . dec_varaux COMMA dec_var
    (26) dec_var -> . dec_varaux
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    ID              shift and go to state 49

    dec_varaux                     shift and go to state 116
    dec_var                        shift and go to state 179

state 152

    (23) dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR . CTE_I RIGHT_BR

    CTE_I           shift and go to state 180


state 153

    (103) lectura_var -> punto_read_stack dec_varaux punto_push_dec_var . punto_add_read_operand COMMA lectura_var
    (104) lectura_var -> punto_read_stack dec_varaux punto_push_dec_var . punto_add_read_operand
    (106) punto_add_read_operand -> .

    COMMA           reduce using rule 106 (punto_add_read_operand -> .)
    RIGHT_PAR       reduce using rule 106 (punto_add_read_operand -> .)

    punto_add_read_operand         shift and go to state 181

state 154

    (108) escritura_aux -> punto_write_stack STR punto_escritura_push . punto_add_write_operand
    (110) escritura_aux -> punto_write_stack STR punto_escritura_push . punto_add_write_operand COMMA escritura_aux
    (114) punto_add_write_operand -> .

    COMMA           reduce using rule 114 (punto_add_write_operand -> .)
    RIGHT_PAR       reduce using rule 114 (punto_add_write_operand -> .)

    punto_add_write_operand        shift and go to state 182

state 155

    (109) escritura_aux -> punto_write_stack m_exp punto_escritura_push . punto_add_write_operand
    (111) escritura_aux -> punto_write_stack m_exp punto_escritura_push . punto_add_write_operand COMMA escritura_aux
    (114) punto_add_write_operand -> .

    COMMA           reduce using rule 114 (punto_add_write_operand -> .)
    RIGHT_PAR       reduce using rule 114 (punto_add_write_operand -> .)

    punto_add_write_operand        shift and go to state 183

state 156

    (74) factor -> LEFT_PAR exp_or RIGHT_PAR .

    MULTIPLY        reduce using rule 74 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    DIVIDE          reduce using rule 74 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    PLUS            reduce using rule 74 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    MINUS           reduce using rule 74 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    LESS_THAN       reduce using rule 74 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    GREATER_THAN    reduce using rule 74 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    DIFFERENT       reduce using rule 74 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    EQUAL           reduce using rule 74 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    GREATER_EQUAL   reduce using rule 74 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    LESS_EQUAL      reduce using rule 74 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    AND             reduce using rule 74 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    OR              reduce using rule 74 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    RIGHT_PAR       reduce using rule 74 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    COMMA           reduce using rule 74 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    SEMICOLON       reduce using rule 74 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    TO              reduce using rule 74 (factor -> LEFT_PAR exp_or RIGHT_PAR .)


state 157

    (115) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp . THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (116) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp . THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if

    THEN            shift and go to state 184


state 158

    (45) exp_or -> t_exp punto_pop_or t_exp_or_aux .

    RIGHT_PAR       reduce using rule 45 (exp_or -> t_exp punto_pop_or t_exp_or_aux .)


state 159

    (48) t_exp_or_aux -> OR . punto_push_or exp_or
    (49) punto_push_or -> .

    ID              reduce using rule 49 (punto_push_or -> .)
    LEFT_PAR        reduce using rule 49 (punto_push_or -> .)
    CTE_I           reduce using rule 49 (punto_push_or -> .)
    CTE_CHAR        reduce using rule 49 (punto_push_or -> .)

    punto_push_or                  shift and go to state 185

state 160

    (50) t_exp -> g_exp pop_and t_exp_aux .

    OR              reduce using rule 50 (t_exp -> g_exp pop_and t_exp_aux .)
    RIGHT_PAR       reduce using rule 50 (t_exp -> g_exp pop_and t_exp_aux .)


state 161

    (53) t_exp_aux -> AND . punto_push_and t_exp
    (54) punto_push_and -> .

    ID              reduce using rule 54 (punto_push_and -> .)
    LEFT_PAR        reduce using rule 54 (punto_push_and -> .)
    CTE_I           reduce using rule 54 (punto_push_and -> .)
    CTE_CHAR        reduce using rule 54 (punto_push_and -> .)

    punto_push_and                 shift and go to state 186

state 162

    (56) g_exp -> m_exp relacionales punto_relacionales . m_exp punto_pop_relacional
    (59) m_exp -> . termino punto_mexp_pop
    (60) m_exp -> . termino punto_mexp_pop m_exp_aux
    (65) termino -> . factor punto_termino_pop
    (66) termino -> . factor punto_termino_pop termino_aux
    (71) factor -> . cte
    (72) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (73) factor -> . ID LEFT_PAR RIGHT_PAR
    (74) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (131) cte -> . ID factor_push_operand
    (132) cte -> . CTE_I factor_int_push
    (133) cte -> . cte_f factor_float_push
    (134) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 100
    LEFT_PAR        shift and go to state 92
    CTE_I           shift and go to state 101
    CTE_CHAR        shift and go to state 103

    m_exp                          shift and go to state 187
    termino                        shift and go to state 97
    factor                         shift and go to state 98
    cte                            shift and go to state 99
    cte_f                          shift and go to state 102

state 163

    (60) m_exp -> termino punto_mexp_pop m_exp_aux .

    LESS_THAN       reduce using rule 60 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    GREATER_THAN    reduce using rule 60 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    DIFFERENT       reduce using rule 60 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    EQUAL           reduce using rule 60 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    GREATER_EQUAL   reduce using rule 60 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    LESS_EQUAL      reduce using rule 60 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    AND             reduce using rule 60 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    OR              reduce using rule 60 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    RIGHT_PAR       reduce using rule 60 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    COMMA           reduce using rule 60 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    SEMICOLON       reduce using rule 60 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    TO              reduce using rule 60 (m_exp -> termino punto_mexp_pop m_exp_aux .)


state 164

    (62) m_exp_aux -> PLUS . punto_m_exp_push m_exp
    (64) punto_m_exp_push -> .

    ID              reduce using rule 64 (punto_m_exp_push -> .)
    LEFT_PAR        reduce using rule 64 (punto_m_exp_push -> .)
    CTE_I           reduce using rule 64 (punto_m_exp_push -> .)
    CTE_CHAR        reduce using rule 64 (punto_m_exp_push -> .)

    punto_m_exp_push               shift and go to state 188

state 165

    (63) m_exp_aux -> MINUS . punto_m_exp_push m_exp
    (64) punto_m_exp_push -> .

    ID              reduce using rule 64 (punto_m_exp_push -> .)
    LEFT_PAR        reduce using rule 64 (punto_m_exp_push -> .)
    CTE_I           reduce using rule 64 (punto_m_exp_push -> .)
    CTE_CHAR        reduce using rule 64 (punto_m_exp_push -> .)

    punto_m_exp_push               shift and go to state 189

state 166

    (66) termino -> factor punto_termino_pop termino_aux .

    PLUS            reduce using rule 66 (termino -> factor punto_termino_pop termino_aux .)
    MINUS           reduce using rule 66 (termino -> factor punto_termino_pop termino_aux .)
    LESS_THAN       reduce using rule 66 (termino -> factor punto_termino_pop termino_aux .)
    GREATER_THAN    reduce using rule 66 (termino -> factor punto_termino_pop termino_aux .)
    DIFFERENT       reduce using rule 66 (termino -> factor punto_termino_pop termino_aux .)
    EQUAL           reduce using rule 66 (termino -> factor punto_termino_pop termino_aux .)
    GREATER_EQUAL   reduce using rule 66 (termino -> factor punto_termino_pop termino_aux .)
    LESS_EQUAL      reduce using rule 66 (termino -> factor punto_termino_pop termino_aux .)
    AND             reduce using rule 66 (termino -> factor punto_termino_pop termino_aux .)
    OR              reduce using rule 66 (termino -> factor punto_termino_pop termino_aux .)
    RIGHT_PAR       reduce using rule 66 (termino -> factor punto_termino_pop termino_aux .)
    COMMA           reduce using rule 66 (termino -> factor punto_termino_pop termino_aux .)
    SEMICOLON       reduce using rule 66 (termino -> factor punto_termino_pop termino_aux .)
    TO              reduce using rule 66 (termino -> factor punto_termino_pop termino_aux .)


state 167

    (68) termino_aux -> MULTIPLY . punto_termino_aux termino
    (70) punto_termino_aux -> .

    ID              reduce using rule 70 (punto_termino_aux -> .)
    LEFT_PAR        reduce using rule 70 (punto_termino_aux -> .)
    CTE_I           reduce using rule 70 (punto_termino_aux -> .)
    CTE_CHAR        reduce using rule 70 (punto_termino_aux -> .)

    punto_termino_aux              shift and go to state 190

state 168

    (69) termino_aux -> DIVIDE . punto_termino_aux termino
    (70) punto_termino_aux -> .

    ID              reduce using rule 70 (punto_termino_aux -> .)
    LEFT_PAR        reduce using rule 70 (punto_termino_aux -> .)
    CTE_I           reduce using rule 70 (punto_termino_aux -> .)
    CTE_CHAR        reduce using rule 70 (punto_termino_aux -> .)

    punto_termino_aux              shift and go to state 191

state 169

    (72) factor -> ID LEFT_PAR dec_var . RIGHT_PAR

    RIGHT_PAR       shift and go to state 192


state 170

    (73) factor -> ID LEFT_PAR RIGHT_PAR .

    MULTIPLY        reduce using rule 73 (factor -> ID LEFT_PAR RIGHT_PAR .)
    DIVIDE          reduce using rule 73 (factor -> ID LEFT_PAR RIGHT_PAR .)
    PLUS            reduce using rule 73 (factor -> ID LEFT_PAR RIGHT_PAR .)
    MINUS           reduce using rule 73 (factor -> ID LEFT_PAR RIGHT_PAR .)
    LESS_THAN       reduce using rule 73 (factor -> ID LEFT_PAR RIGHT_PAR .)
    GREATER_THAN    reduce using rule 73 (factor -> ID LEFT_PAR RIGHT_PAR .)
    DIFFERENT       reduce using rule 73 (factor -> ID LEFT_PAR RIGHT_PAR .)
    EQUAL           reduce using rule 73 (factor -> ID LEFT_PAR RIGHT_PAR .)
    GREATER_EQUAL   reduce using rule 73 (factor -> ID LEFT_PAR RIGHT_PAR .)
    LESS_EQUAL      reduce using rule 73 (factor -> ID LEFT_PAR RIGHT_PAR .)
    AND             reduce using rule 73 (factor -> ID LEFT_PAR RIGHT_PAR .)
    OR              reduce using rule 73 (factor -> ID LEFT_PAR RIGHT_PAR .)
    RIGHT_PAR       reduce using rule 73 (factor -> ID LEFT_PAR RIGHT_PAR .)
    COMMA           reduce using rule 73 (factor -> ID LEFT_PAR RIGHT_PAR .)
    SEMICOLON       reduce using rule 73 (factor -> ID LEFT_PAR RIGHT_PAR .)
    TO              reduce using rule 73 (factor -> ID LEFT_PAR RIGHT_PAR .)


state 171

    (1) cte_f -> CTE_I DOT CTE_I .

    MULTIPLY        reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    DIVIDE          reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    PLUS            reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    MINUS           reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    LESS_THAN       reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    GREATER_THAN    reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    DIFFERENT       reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    EQUAL           reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    GREATER_EQUAL   reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    LESS_EQUAL      reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    AND             reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    OR              reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    RIGHT_PAR       reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    COMMA           reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    SEMICOLON       reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    TO              reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)


state 172

    (127) condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR . punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (129) punto_validar_exp -> .

    LEFT_CURL       reduce using rule 129 (punto_validar_exp -> .)

    punto_validar_exp              shift and go to state 193

state 173

    (122) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS . m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for
    (59) m_exp -> . termino punto_mexp_pop
    (60) m_exp -> . termino punto_mexp_pop m_exp_aux
    (65) termino -> . factor punto_termino_pop
    (66) termino -> . factor punto_termino_pop termino_aux
    (71) factor -> . cte
    (72) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (73) factor -> . ID LEFT_PAR RIGHT_PAR
    (74) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (131) cte -> . ID factor_push_operand
    (132) cte -> . CTE_I factor_int_push
    (133) cte -> . cte_f factor_float_push
    (134) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 100
    LEFT_PAR        shift and go to state 92
    CTE_I           shift and go to state 101
    CTE_CHAR        shift and go to state 103

    m_exp                          shift and go to state 194
    termino                        shift and go to state 97
    factor                         shift and go to state 98
    cte                            shift and go to state 99
    cte_f                          shift and go to state 102

state 174

    (29) funciones_aux -> tipo FUNC ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL . not_variables estatutos RIGHT_CURL punto_end_function_return
    (32) not_variables -> . variables count_vars
    (33) not_variables -> . empty
    (10) variables -> . VAR punto_variables_1 SEMICOLON
    (11) variables -> . VAR punto_variables_1 variables_aux SEMICOLON
    (139) empty -> .

    VAR             shift and go to state 10
    RETURN          reduce using rule 139 (empty -> .)
    VD              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    FOR             reduce using rule 139 (empty -> .)

    not_variables                  shift and go to state 195
    variables                      shift and go to state 176
    empty                          shift and go to state 177

state 175

    (30) funciones_aux -> VOID FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables . count_vars estatutos RIGHT_CURL end_func
    (43) count_vars -> .

    RETURN          reduce using rule 43 (count_vars -> .)
    VD              reduce using rule 43 (count_vars -> .)
    READ            reduce using rule 43 (count_vars -> .)
    WRITE           reduce using rule 43 (count_vars -> .)
    IF              reduce using rule 43 (count_vars -> .)
    ID              reduce using rule 43 (count_vars -> .)
    WHILE           reduce using rule 43 (count_vars -> .)
    FOR             reduce using rule 43 (count_vars -> .)

    count_vars                     shift and go to state 196

state 176

    (32) not_variables -> variables . count_vars
    (43) count_vars -> .

    RETURN          reduce using rule 43 (count_vars -> .)
    VD              reduce using rule 43 (count_vars -> .)
    READ            reduce using rule 43 (count_vars -> .)
    WRITE           reduce using rule 43 (count_vars -> .)
    IF              reduce using rule 43 (count_vars -> .)
    ID              reduce using rule 43 (count_vars -> .)
    WHILE           reduce using rule 43 (count_vars -> .)
    FOR             reduce using rule 43 (count_vars -> .)

    count_vars                     shift and go to state 197

state 177

    (33) not_variables -> empty .

    RETURN          reduce using rule 33 (not_variables -> empty .)
    VD              reduce using rule 33 (not_variables -> empty .)
    READ            reduce using rule 33 (not_variables -> empty .)
    WRITE           reduce using rule 33 (not_variables -> empty .)
    IF              reduce using rule 33 (not_variables -> empty .)
    ID              reduce using rule 33 (not_variables -> empty .)
    WHILE           reduce using rule 33 (not_variables -> empty .)
    FOR             reduce using rule 33 (not_variables -> empty .)


state 178

    (93) asignacion -> dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion .

    SEMICOLON       reduce using rule 93 (asignacion -> dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion .)


state 179

    (25) dec_var -> dec_varaux COMMA dec_var .

    RIGHT_PAR       reduce using rule 25 (dec_var -> dec_varaux COMMA dec_var .)


state 180

    (23) dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I . RIGHT_BR

    RIGHT_BR        shift and go to state 198


state 181

    (103) lectura_var -> punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand . COMMA lectura_var
    (104) lectura_var -> punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand .

    COMMA           shift and go to state 199
    RIGHT_PAR       reduce using rule 104 (lectura_var -> punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand .)


state 182

    (108) escritura_aux -> punto_write_stack STR punto_escritura_push punto_add_write_operand .
    (110) escritura_aux -> punto_write_stack STR punto_escritura_push punto_add_write_operand . COMMA escritura_aux

    RIGHT_PAR       reduce using rule 108 (escritura_aux -> punto_write_stack STR punto_escritura_push punto_add_write_operand .)
    COMMA           shift and go to state 200


state 183

    (109) escritura_aux -> punto_write_stack m_exp punto_escritura_push punto_add_write_operand .
    (111) escritura_aux -> punto_write_stack m_exp punto_escritura_push punto_add_write_operand . COMMA escritura_aux

    RIGHT_PAR       reduce using rule 109 (escritura_aux -> punto_write_stack m_exp punto_escritura_push punto_add_write_operand .)
    COMMA           shift and go to state 201


state 184

    (115) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN . LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (116) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN . LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if

    LEFT_CURL       shift and go to state 202


state 185

    (48) t_exp_or_aux -> OR punto_push_or . exp_or
    (45) exp_or -> . t_exp punto_pop_or t_exp_or_aux
    (46) exp_or -> . t_exp punto_pop_or
    (50) t_exp -> . g_exp pop_and t_exp_aux
    (51) t_exp -> . g_exp pop_and
    (55) g_exp -> . m_exp
    (56) g_exp -> . m_exp relacionales punto_relacionales m_exp punto_pop_relacional
    (59) m_exp -> . termino punto_mexp_pop
    (60) m_exp -> . termino punto_mexp_pop m_exp_aux
    (65) termino -> . factor punto_termino_pop
    (66) termino -> . factor punto_termino_pop termino_aux
    (71) factor -> . cte
    (72) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (73) factor -> . ID LEFT_PAR RIGHT_PAR
    (74) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (131) cte -> . ID factor_push_operand
    (132) cte -> . CTE_I factor_int_push
    (133) cte -> . cte_f factor_float_push
    (134) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 100
    LEFT_PAR        shift and go to state 92
    CTE_I           shift and go to state 101
    CTE_CHAR        shift and go to state 103

    exp_or                         shift and go to state 203
    t_exp                          shift and go to state 94
    g_exp                          shift and go to state 95
    m_exp                          shift and go to state 96
    termino                        shift and go to state 97
    factor                         shift and go to state 98
    cte                            shift and go to state 99
    cte_f                          shift and go to state 102

state 186

    (53) t_exp_aux -> AND punto_push_and . t_exp
    (50) t_exp -> . g_exp pop_and t_exp_aux
    (51) t_exp -> . g_exp pop_and
    (55) g_exp -> . m_exp
    (56) g_exp -> . m_exp relacionales punto_relacionales m_exp punto_pop_relacional
    (59) m_exp -> . termino punto_mexp_pop
    (60) m_exp -> . termino punto_mexp_pop m_exp_aux
    (65) termino -> . factor punto_termino_pop
    (66) termino -> . factor punto_termino_pop termino_aux
    (71) factor -> . cte
    (72) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (73) factor -> . ID LEFT_PAR RIGHT_PAR
    (74) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (131) cte -> . ID factor_push_operand
    (132) cte -> . CTE_I factor_int_push
    (133) cte -> . cte_f factor_float_push
    (134) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 100
    LEFT_PAR        shift and go to state 92
    CTE_I           shift and go to state 101
    CTE_CHAR        shift and go to state 103

    t_exp                          shift and go to state 204
    g_exp                          shift and go to state 95
    m_exp                          shift and go to state 96
    termino                        shift and go to state 97
    factor                         shift and go to state 98
    cte                            shift and go to state 99
    cte_f                          shift and go to state 102

state 187

    (56) g_exp -> m_exp relacionales punto_relacionales m_exp . punto_pop_relacional
    (58) punto_pop_relacional -> .

    AND             reduce using rule 58 (punto_pop_relacional -> .)
    OR              reduce using rule 58 (punto_pop_relacional -> .)
    RIGHT_PAR       reduce using rule 58 (punto_pop_relacional -> .)

    punto_pop_relacional           shift and go to state 205

state 188

    (62) m_exp_aux -> PLUS punto_m_exp_push . m_exp
    (59) m_exp -> . termino punto_mexp_pop
    (60) m_exp -> . termino punto_mexp_pop m_exp_aux
    (65) termino -> . factor punto_termino_pop
    (66) termino -> . factor punto_termino_pop termino_aux
    (71) factor -> . cte
    (72) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (73) factor -> . ID LEFT_PAR RIGHT_PAR
    (74) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (131) cte -> . ID factor_push_operand
    (132) cte -> . CTE_I factor_int_push
    (133) cte -> . cte_f factor_float_push
    (134) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 100
    LEFT_PAR        shift and go to state 92
    CTE_I           shift and go to state 101
    CTE_CHAR        shift and go to state 103

    m_exp                          shift and go to state 206
    termino                        shift and go to state 97
    factor                         shift and go to state 98
    cte                            shift and go to state 99
    cte_f                          shift and go to state 102

state 189

    (63) m_exp_aux -> MINUS punto_m_exp_push . m_exp
    (59) m_exp -> . termino punto_mexp_pop
    (60) m_exp -> . termino punto_mexp_pop m_exp_aux
    (65) termino -> . factor punto_termino_pop
    (66) termino -> . factor punto_termino_pop termino_aux
    (71) factor -> . cte
    (72) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (73) factor -> . ID LEFT_PAR RIGHT_PAR
    (74) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (131) cte -> . ID factor_push_operand
    (132) cte -> . CTE_I factor_int_push
    (133) cte -> . cte_f factor_float_push
    (134) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 100
    LEFT_PAR        shift and go to state 92
    CTE_I           shift and go to state 101
    CTE_CHAR        shift and go to state 103

    m_exp                          shift and go to state 207
    termino                        shift and go to state 97
    factor                         shift and go to state 98
    cte                            shift and go to state 99
    cte_f                          shift and go to state 102

state 190

    (68) termino_aux -> MULTIPLY punto_termino_aux . termino
    (65) termino -> . factor punto_termino_pop
    (66) termino -> . factor punto_termino_pop termino_aux
    (71) factor -> . cte
    (72) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (73) factor -> . ID LEFT_PAR RIGHT_PAR
    (74) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (131) cte -> . ID factor_push_operand
    (132) cte -> . CTE_I factor_int_push
    (133) cte -> . cte_f factor_float_push
    (134) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 100
    LEFT_PAR        shift and go to state 92
    CTE_I           shift and go to state 101
    CTE_CHAR        shift and go to state 103

    termino                        shift and go to state 208
    factor                         shift and go to state 98
    cte                            shift and go to state 99
    cte_f                          shift and go to state 102

state 191

    (69) termino_aux -> DIVIDE punto_termino_aux . termino
    (65) termino -> . factor punto_termino_pop
    (66) termino -> . factor punto_termino_pop termino_aux
    (71) factor -> . cte
    (72) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (73) factor -> . ID LEFT_PAR RIGHT_PAR
    (74) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (131) cte -> . ID factor_push_operand
    (132) cte -> . CTE_I factor_int_push
    (133) cte -> . cte_f factor_float_push
    (134) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 100
    LEFT_PAR        shift and go to state 92
    CTE_I           shift and go to state 101
    CTE_CHAR        shift and go to state 103

    termino                        shift and go to state 209
    factor                         shift and go to state 98
    cte                            shift and go to state 99
    cte_f                          shift and go to state 102

state 192

    (72) factor -> ID LEFT_PAR dec_var RIGHT_PAR .

    MULTIPLY        reduce using rule 72 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    DIVIDE          reduce using rule 72 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    PLUS            reduce using rule 72 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    MINUS           reduce using rule 72 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    LESS_THAN       reduce using rule 72 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    GREATER_THAN    reduce using rule 72 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    DIFFERENT       reduce using rule 72 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    EQUAL           reduce using rule 72 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    GREATER_EQUAL   reduce using rule 72 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    LESS_EQUAL      reduce using rule 72 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    AND             reduce using rule 72 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    OR              reduce using rule 72 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    RIGHT_PAR       reduce using rule 72 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    COMMA           reduce using rule 72 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    SEMICOLON       reduce using rule 72 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    TO              reduce using rule 72 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)


state 193

    (127) condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp . LEFT_CURL estatutos RIGHT_CURL punto_end_while

    LEFT_CURL       shift and go to state 210


state 194

    (122) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp . punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for
    (124) punto_exp_for_inf -> .

    TO              reduce using rule 124 (punto_exp_for_inf -> .)

    punto_exp_for_inf              shift and go to state 211

state 195

    (29) funciones_aux -> tipo FUNC ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables . estatutos RIGHT_CURL punto_end_function_return
    (81) estatutos -> . estatutos_main_aux
    (82) estatutos -> . retorno SEMICOLON
    (91) estatutos_main_aux -> . estatutos_main estatutos
    (92) estatutos_main_aux -> . estatutos_main
    (99) retorno -> . RETURN LEFT_PAR m_exp RIGHT_PAR punto_return
    (83) estatutos_main -> . asignacion SEMICOLON
    (84) estatutos_main -> . llamada SEMICOLON
    (85) estatutos_main -> . lectura SEMICOLON
    (86) estatutos_main -> . escritura SEMICOLON
    (87) estatutos_main -> . decision SEMICOLON
    (88) estatutos_main -> . repeticion SEMICOLON
    (93) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (97) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (98) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (102) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (107) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (115) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (116) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (120) repeticion -> . condicional
    (121) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (127) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (122) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RETURN          shift and go to state 216
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    estatutos                      shift and go to state 212
    estatutos_main_aux             shift and go to state 213
    retorno                        shift and go to state 214
    estatutos_main                 shift and go to state 215
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 196

    (30) funciones_aux -> VOID FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars . estatutos RIGHT_CURL end_func
    (81) estatutos -> . estatutos_main_aux
    (82) estatutos -> . retorno SEMICOLON
    (91) estatutos_main_aux -> . estatutos_main estatutos
    (92) estatutos_main_aux -> . estatutos_main
    (99) retorno -> . RETURN LEFT_PAR m_exp RIGHT_PAR punto_return
    (83) estatutos_main -> . asignacion SEMICOLON
    (84) estatutos_main -> . llamada SEMICOLON
    (85) estatutos_main -> . lectura SEMICOLON
    (86) estatutos_main -> . escritura SEMICOLON
    (87) estatutos_main -> . decision SEMICOLON
    (88) estatutos_main -> . repeticion SEMICOLON
    (93) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (97) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (98) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (102) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (107) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (115) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (116) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (120) repeticion -> . condicional
    (121) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (127) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (122) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RETURN          shift and go to state 216
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    estatutos                      shift and go to state 217
    estatutos_main_aux             shift and go to state 213
    retorno                        shift and go to state 214
    estatutos_main                 shift and go to state 215
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 197

    (32) not_variables -> variables count_vars .

    RETURN          reduce using rule 32 (not_variables -> variables count_vars .)
    VD              reduce using rule 32 (not_variables -> variables count_vars .)
    READ            reduce using rule 32 (not_variables -> variables count_vars .)
    WRITE           reduce using rule 32 (not_variables -> variables count_vars .)
    IF              reduce using rule 32 (not_variables -> variables count_vars .)
    ID              reduce using rule 32 (not_variables -> variables count_vars .)
    WHILE           reduce using rule 32 (not_variables -> variables count_vars .)
    FOR             reduce using rule 32 (not_variables -> variables count_vars .)


state 198

    (23) dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR .

    EQUALS          reduce using rule 23 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR .)
    COMMA           reduce using rule 23 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR .)
    MORE            reduce using rule 23 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR .)
    SEMICOLON       reduce using rule 23 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR .)
    RIGHT_PAR       reduce using rule 23 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR .)


state 199

    (103) lectura_var -> punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand COMMA . lectura_var
    (103) lectura_var -> . punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand COMMA lectura_var
    (104) lectura_var -> . punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand
    (101) punto_read_stack -> .

    ID              reduce using rule 101 (punto_read_stack -> .)

    punto_read_stack               shift and go to state 89
    lectura_var                    shift and go to state 218

state 200

    (110) escritura_aux -> punto_write_stack STR punto_escritura_push punto_add_write_operand COMMA . escritura_aux
    (108) escritura_aux -> . punto_write_stack STR punto_escritura_push punto_add_write_operand
    (109) escritura_aux -> . punto_write_stack m_exp punto_escritura_push punto_add_write_operand
    (110) escritura_aux -> . punto_write_stack STR punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (111) escritura_aux -> . punto_write_stack m_exp punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (113) punto_write_stack -> .

    STR             reduce using rule 113 (punto_write_stack -> .)
    ID              reduce using rule 113 (punto_write_stack -> .)
    LEFT_PAR        reduce using rule 113 (punto_write_stack -> .)
    CTE_I           reduce using rule 113 (punto_write_stack -> .)
    CTE_CHAR        reduce using rule 113 (punto_write_stack -> .)

    punto_write_stack              shift and go to state 91
    escritura_aux                  shift and go to state 219

state 201

    (111) escritura_aux -> punto_write_stack m_exp punto_escritura_push punto_add_write_operand COMMA . escritura_aux
    (108) escritura_aux -> . punto_write_stack STR punto_escritura_push punto_add_write_operand
    (109) escritura_aux -> . punto_write_stack m_exp punto_escritura_push punto_add_write_operand
    (110) escritura_aux -> . punto_write_stack STR punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (111) escritura_aux -> . punto_write_stack m_exp punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (113) punto_write_stack -> .

    STR             reduce using rule 113 (punto_write_stack -> .)
    ID              reduce using rule 113 (punto_write_stack -> .)
    LEFT_PAR        reduce using rule 113 (punto_write_stack -> .)
    CTE_I           reduce using rule 113 (punto_write_stack -> .)
    CTE_CHAR        reduce using rule 113 (punto_write_stack -> .)

    punto_write_stack              shift and go to state 91
    escritura_aux                  shift and go to state 220

state 202

    (115) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL . estatutos RIGHT_CURL punto_end_if
    (116) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL . estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (81) estatutos -> . estatutos_main_aux
    (82) estatutos -> . retorno SEMICOLON
    (91) estatutos_main_aux -> . estatutos_main estatutos
    (92) estatutos_main_aux -> . estatutos_main
    (99) retorno -> . RETURN LEFT_PAR m_exp RIGHT_PAR punto_return
    (83) estatutos_main -> . asignacion SEMICOLON
    (84) estatutos_main -> . llamada SEMICOLON
    (85) estatutos_main -> . lectura SEMICOLON
    (86) estatutos_main -> . escritura SEMICOLON
    (87) estatutos_main -> . decision SEMICOLON
    (88) estatutos_main -> . repeticion SEMICOLON
    (93) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (97) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (98) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (102) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (107) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (115) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (116) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (120) repeticion -> . condicional
    (121) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (127) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (122) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RETURN          shift and go to state 216
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    estatutos                      shift and go to state 221
    estatutos_main_aux             shift and go to state 213
    retorno                        shift and go to state 214
    estatutos_main                 shift and go to state 215
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 203

    (48) t_exp_or_aux -> OR punto_push_or exp_or .

    RIGHT_PAR       reduce using rule 48 (t_exp_or_aux -> OR punto_push_or exp_or .)


state 204

    (53) t_exp_aux -> AND punto_push_and t_exp .

    OR              reduce using rule 53 (t_exp_aux -> AND punto_push_and t_exp .)
    RIGHT_PAR       reduce using rule 53 (t_exp_aux -> AND punto_push_and t_exp .)


state 205

    (56) g_exp -> m_exp relacionales punto_relacionales m_exp punto_pop_relacional .

    AND             reduce using rule 56 (g_exp -> m_exp relacionales punto_relacionales m_exp punto_pop_relacional .)
    OR              reduce using rule 56 (g_exp -> m_exp relacionales punto_relacionales m_exp punto_pop_relacional .)
    RIGHT_PAR       reduce using rule 56 (g_exp -> m_exp relacionales punto_relacionales m_exp punto_pop_relacional .)


state 206

    (62) m_exp_aux -> PLUS punto_m_exp_push m_exp .

    LESS_THAN       reduce using rule 62 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    GREATER_THAN    reduce using rule 62 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    DIFFERENT       reduce using rule 62 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    EQUAL           reduce using rule 62 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    GREATER_EQUAL   reduce using rule 62 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    LESS_EQUAL      reduce using rule 62 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    AND             reduce using rule 62 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    OR              reduce using rule 62 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    RIGHT_PAR       reduce using rule 62 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    COMMA           reduce using rule 62 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    SEMICOLON       reduce using rule 62 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    TO              reduce using rule 62 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)


state 207

    (63) m_exp_aux -> MINUS punto_m_exp_push m_exp .

    LESS_THAN       reduce using rule 63 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    GREATER_THAN    reduce using rule 63 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    DIFFERENT       reduce using rule 63 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    EQUAL           reduce using rule 63 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    GREATER_EQUAL   reduce using rule 63 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    LESS_EQUAL      reduce using rule 63 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    AND             reduce using rule 63 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    OR              reduce using rule 63 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    RIGHT_PAR       reduce using rule 63 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    COMMA           reduce using rule 63 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    SEMICOLON       reduce using rule 63 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    TO              reduce using rule 63 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)


state 208

    (68) termino_aux -> MULTIPLY punto_termino_aux termino .

    PLUS            reduce using rule 68 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    MINUS           reduce using rule 68 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    LESS_THAN       reduce using rule 68 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    GREATER_THAN    reduce using rule 68 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    DIFFERENT       reduce using rule 68 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    EQUAL           reduce using rule 68 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    GREATER_EQUAL   reduce using rule 68 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    LESS_EQUAL      reduce using rule 68 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    AND             reduce using rule 68 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    OR              reduce using rule 68 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    RIGHT_PAR       reduce using rule 68 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    COMMA           reduce using rule 68 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    SEMICOLON       reduce using rule 68 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    TO              reduce using rule 68 (termino_aux -> MULTIPLY punto_termino_aux termino .)


state 209

    (69) termino_aux -> DIVIDE punto_termino_aux termino .

    PLUS            reduce using rule 69 (termino_aux -> DIVIDE punto_termino_aux termino .)
    MINUS           reduce using rule 69 (termino_aux -> DIVIDE punto_termino_aux termino .)
    LESS_THAN       reduce using rule 69 (termino_aux -> DIVIDE punto_termino_aux termino .)
    GREATER_THAN    reduce using rule 69 (termino_aux -> DIVIDE punto_termino_aux termino .)
    DIFFERENT       reduce using rule 69 (termino_aux -> DIVIDE punto_termino_aux termino .)
    EQUAL           reduce using rule 69 (termino_aux -> DIVIDE punto_termino_aux termino .)
    GREATER_EQUAL   reduce using rule 69 (termino_aux -> DIVIDE punto_termino_aux termino .)
    LESS_EQUAL      reduce using rule 69 (termino_aux -> DIVIDE punto_termino_aux termino .)
    AND             reduce using rule 69 (termino_aux -> DIVIDE punto_termino_aux termino .)
    OR              reduce using rule 69 (termino_aux -> DIVIDE punto_termino_aux termino .)
    RIGHT_PAR       reduce using rule 69 (termino_aux -> DIVIDE punto_termino_aux termino .)
    COMMA           reduce using rule 69 (termino_aux -> DIVIDE punto_termino_aux termino .)
    SEMICOLON       reduce using rule 69 (termino_aux -> DIVIDE punto_termino_aux termino .)
    TO              reduce using rule 69 (termino_aux -> DIVIDE punto_termino_aux termino .)


state 210

    (127) condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL . estatutos RIGHT_CURL punto_end_while
    (81) estatutos -> . estatutos_main_aux
    (82) estatutos -> . retorno SEMICOLON
    (91) estatutos_main_aux -> . estatutos_main estatutos
    (92) estatutos_main_aux -> . estatutos_main
    (99) retorno -> . RETURN LEFT_PAR m_exp RIGHT_PAR punto_return
    (83) estatutos_main -> . asignacion SEMICOLON
    (84) estatutos_main -> . llamada SEMICOLON
    (85) estatutos_main -> . lectura SEMICOLON
    (86) estatutos_main -> . escritura SEMICOLON
    (87) estatutos_main -> . decision SEMICOLON
    (88) estatutos_main -> . repeticion SEMICOLON
    (93) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (97) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (98) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (102) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (107) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (115) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (116) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (120) repeticion -> . condicional
    (121) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (127) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (122) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RETURN          shift and go to state 216
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    estatutos                      shift and go to state 222
    estatutos_main_aux             shift and go to state 213
    retorno                        shift and go to state 214
    estatutos_main                 shift and go to state 215
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 211

    (122) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf . TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for

    TO              shift and go to state 223


state 212

    (29) funciones_aux -> tipo FUNC ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos . RIGHT_CURL punto_end_function_return

    RIGHT_CURL      shift and go to state 224


state 213

    (81) estatutos -> estatutos_main_aux .

    RIGHT_CURL      reduce using rule 81 (estatutos -> estatutos_main_aux .)


state 214

    (82) estatutos -> retorno . SEMICOLON

    SEMICOLON       shift and go to state 225


state 215

    (91) estatutos_main_aux -> estatutos_main . estatutos
    (92) estatutos_main_aux -> estatutos_main .
    (81) estatutos -> . estatutos_main_aux
    (82) estatutos -> . retorno SEMICOLON
    (91) estatutos_main_aux -> . estatutos_main estatutos
    (92) estatutos_main_aux -> . estatutos_main
    (99) retorno -> . RETURN LEFT_PAR m_exp RIGHT_PAR punto_return
    (83) estatutos_main -> . asignacion SEMICOLON
    (84) estatutos_main -> . llamada SEMICOLON
    (85) estatutos_main -> . lectura SEMICOLON
    (86) estatutos_main -> . escritura SEMICOLON
    (87) estatutos_main -> . decision SEMICOLON
    (88) estatutos_main -> . repeticion SEMICOLON
    (93) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (97) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (98) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (102) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (107) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (115) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (116) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (120) repeticion -> . condicional
    (121) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (127) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (122) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RIGHT_CURL      reduce using rule 92 (estatutos_main_aux -> estatutos_main .)
    RETURN          shift and go to state 216
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    estatutos_main                 shift and go to state 215
    estatutos                      shift and go to state 226
    estatutos_main_aux             shift and go to state 213
    retorno                        shift and go to state 214
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 216

    (99) retorno -> RETURN . LEFT_PAR m_exp RIGHT_PAR punto_return

    LEFT_PAR        shift and go to state 227


state 217

    (30) funciones_aux -> VOID FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos . RIGHT_CURL end_func

    RIGHT_CURL      shift and go to state 228


state 218

    (103) lectura_var -> punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand COMMA lectura_var .

    RIGHT_PAR       reduce using rule 103 (lectura_var -> punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand COMMA lectura_var .)


state 219

    (110) escritura_aux -> punto_write_stack STR punto_escritura_push punto_add_write_operand COMMA escritura_aux .

    RIGHT_PAR       reduce using rule 110 (escritura_aux -> punto_write_stack STR punto_escritura_push punto_add_write_operand COMMA escritura_aux .)


state 220

    (111) escritura_aux -> punto_write_stack m_exp punto_escritura_push punto_add_write_operand COMMA escritura_aux .

    RIGHT_PAR       reduce using rule 111 (escritura_aux -> punto_write_stack m_exp punto_escritura_push punto_add_write_operand COMMA escritura_aux .)


state 221

    (115) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos . RIGHT_CURL punto_end_if
    (116) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos . RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if

    RIGHT_CURL      shift and go to state 229


state 222

    (127) condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos . RIGHT_CURL punto_end_while

    RIGHT_CURL      shift and go to state 230


state 223

    (122) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO . m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for
    (59) m_exp -> . termino punto_mexp_pop
    (60) m_exp -> . termino punto_mexp_pop m_exp_aux
    (65) termino -> . factor punto_termino_pop
    (66) termino -> . factor punto_termino_pop termino_aux
    (71) factor -> . cte
    (72) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (73) factor -> . ID LEFT_PAR RIGHT_PAR
    (74) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (131) cte -> . ID factor_push_operand
    (132) cte -> . CTE_I factor_int_push
    (133) cte -> . cte_f factor_float_push
    (134) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 100
    LEFT_PAR        shift and go to state 92
    CTE_I           shift and go to state 101
    CTE_CHAR        shift and go to state 103

    m_exp                          shift and go to state 231
    termino                        shift and go to state 97
    factor                         shift and go to state 98
    cte                            shift and go to state 99
    cte_f                          shift and go to state 102

state 224

    (29) funciones_aux -> tipo FUNC ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL . punto_end_function_return
    (36) punto_end_function_return -> .

    VOID            reduce using rule 36 (punto_end_function_return -> .)
    INT             reduce using rule 36 (punto_end_function_return -> .)
    FLOAT           reduce using rule 36 (punto_end_function_return -> .)
    CHAR            reduce using rule 36 (punto_end_function_return -> .)
    MAIN            reduce using rule 36 (punto_end_function_return -> .)

    punto_end_function_return      shift and go to state 232

state 225

    (82) estatutos -> retorno SEMICOLON .

    RIGHT_CURL      reduce using rule 82 (estatutos -> retorno SEMICOLON .)


state 226

    (91) estatutos_main_aux -> estatutos_main estatutos .

    RIGHT_CURL      reduce using rule 91 (estatutos_main_aux -> estatutos_main estatutos .)


state 227

    (99) retorno -> RETURN LEFT_PAR . m_exp RIGHT_PAR punto_return
    (59) m_exp -> . termino punto_mexp_pop
    (60) m_exp -> . termino punto_mexp_pop m_exp_aux
    (65) termino -> . factor punto_termino_pop
    (66) termino -> . factor punto_termino_pop termino_aux
    (71) factor -> . cte
    (72) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (73) factor -> . ID LEFT_PAR RIGHT_PAR
    (74) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (131) cte -> . ID factor_push_operand
    (132) cte -> . CTE_I factor_int_push
    (133) cte -> . cte_f factor_float_push
    (134) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 100
    LEFT_PAR        shift and go to state 92
    CTE_I           shift and go to state 101
    CTE_CHAR        shift and go to state 103

    m_exp                          shift and go to state 233
    termino                        shift and go to state 97
    factor                         shift and go to state 98
    cte                            shift and go to state 99
    cte_f                          shift and go to state 102

state 228

    (30) funciones_aux -> VOID FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL . end_func
    (44) end_func -> .

    VOID            reduce using rule 44 (end_func -> .)
    INT             reduce using rule 44 (end_func -> .)
    FLOAT           reduce using rule 44 (end_func -> .)
    CHAR            reduce using rule 44 (end_func -> .)
    MAIN            reduce using rule 44 (end_func -> .)

    end_func                       shift and go to state 234

state 229

    (115) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL . punto_end_if
    (116) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL . ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (119) punto_end_if -> .

    ELSE            shift and go to state 236
    SEMICOLON       reduce using rule 119 (punto_end_if -> .)

    punto_end_if                   shift and go to state 235

state 230

    (127) condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL . punto_end_while
    (130) punto_end_while -> .

    SEMICOLON       reduce using rule 130 (punto_end_while -> .)

    punto_end_while                shift and go to state 237

state 231

    (122) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp . punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for
    (125) punto_exp_for_sup -> .

    RIGHT_PAR       reduce using rule 125 (punto_exp_for_sup -> .)

    punto_exp_for_sup              shift and go to state 238

state 232

    (29) funciones_aux -> tipo FUNC ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return .

    VOID            reduce using rule 29 (funciones_aux -> tipo FUNC ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return .)
    INT             reduce using rule 29 (funciones_aux -> tipo FUNC ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return .)
    FLOAT           reduce using rule 29 (funciones_aux -> tipo FUNC ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return .)
    CHAR            reduce using rule 29 (funciones_aux -> tipo FUNC ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return .)
    MAIN            reduce using rule 29 (funciones_aux -> tipo FUNC ID punto_id_func punto_return_value LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables estatutos RIGHT_CURL punto_end_function_return .)


state 233

    (99) retorno -> RETURN LEFT_PAR m_exp . RIGHT_PAR punto_return

    RIGHT_PAR       shift and go to state 239


state 234

    (30) funciones_aux -> VOID FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func .

    VOID            reduce using rule 30 (funciones_aux -> VOID FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func .)
    INT             reduce using rule 30 (funciones_aux -> VOID FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func .)
    FLOAT           reduce using rule 30 (funciones_aux -> VOID FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func .)
    CHAR            reduce using rule 30 (funciones_aux -> VOID FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func .)
    MAIN            reduce using rule 30 (funciones_aux -> VOID FUNC ID punto_id_func LEFT_PAR not_params RIGHT_PAR LEFT_CURL not_variables count_vars estatutos RIGHT_CURL end_func .)


state 235

    (115) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if .

    SEMICOLON       reduce using rule 115 (decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if .)


state 236

    (116) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE . punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (118) punto_else -> .

    LEFT_CURL       reduce using rule 118 (punto_else -> .)

    punto_else                     shift and go to state 240

state 237

    (127) condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while .

    SEMICOLON       reduce using rule 127 (condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while .)


state 238

    (122) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup . RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RIGHT_PAR       shift and go to state 241


state 239

    (99) retorno -> RETURN LEFT_PAR m_exp RIGHT_PAR . punto_return
    (100) punto_return -> .

    SEMICOLON       reduce using rule 100 (punto_return -> .)

    punto_return                   shift and go to state 242

state 240

    (116) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else . LEFT_CURL estatutos RIGHT_CURL punto_end_if

    LEFT_CURL       shift and go to state 243


state 241

    (122) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR . LEFT_CURL estatutos RIGHT_CURL punto_end_for

    LEFT_CURL       shift and go to state 244


state 242

    (99) retorno -> RETURN LEFT_PAR m_exp RIGHT_PAR punto_return .

    SEMICOLON       reduce using rule 99 (retorno -> RETURN LEFT_PAR m_exp RIGHT_PAR punto_return .)


state 243

    (116) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL . estatutos RIGHT_CURL punto_end_if
    (81) estatutos -> . estatutos_main_aux
    (82) estatutos -> . retorno SEMICOLON
    (91) estatutos_main_aux -> . estatutos_main estatutos
    (92) estatutos_main_aux -> . estatutos_main
    (99) retorno -> . RETURN LEFT_PAR m_exp RIGHT_PAR punto_return
    (83) estatutos_main -> . asignacion SEMICOLON
    (84) estatutos_main -> . llamada SEMICOLON
    (85) estatutos_main -> . lectura SEMICOLON
    (86) estatutos_main -> . escritura SEMICOLON
    (87) estatutos_main -> . decision SEMICOLON
    (88) estatutos_main -> . repeticion SEMICOLON
    (93) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (97) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (98) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (102) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (107) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (115) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (116) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (120) repeticion -> . condicional
    (121) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (127) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (122) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RETURN          shift and go to state 216
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    estatutos                      shift and go to state 245
    estatutos_main_aux             shift and go to state 213
    retorno                        shift and go to state 214
    estatutos_main                 shift and go to state 215
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 244

    (122) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL . estatutos RIGHT_CURL punto_end_for
    (81) estatutos -> . estatutos_main_aux
    (82) estatutos -> . retorno SEMICOLON
    (91) estatutos_main_aux -> . estatutos_main estatutos
    (92) estatutos_main_aux -> . estatutos_main
    (99) retorno -> . RETURN LEFT_PAR m_exp RIGHT_PAR punto_return
    (83) estatutos_main -> . asignacion SEMICOLON
    (84) estatutos_main -> . llamada SEMICOLON
    (85) estatutos_main -> . lectura SEMICOLON
    (86) estatutos_main -> . escritura SEMICOLON
    (87) estatutos_main -> . decision SEMICOLON
    (88) estatutos_main -> . repeticion SEMICOLON
    (93) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (97) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (98) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (102) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (107) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (115) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (116) decision -> . IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if
    (120) repeticion -> . condicional
    (121) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (127) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (122) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RETURN          shift and go to state 216
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    dec_varaux                     shift and go to state 47
    estatutos                      shift and go to state 246
    estatutos_main_aux             shift and go to state 213
    retorno                        shift and go to state 214
    estatutos_main                 shift and go to state 215
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 245

    (116) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos . RIGHT_CURL punto_end_if

    RIGHT_CURL      shift and go to state 247


state 246

    (122) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos . RIGHT_CURL punto_end_for

    RIGHT_CURL      shift and go to state 248


state 247

    (116) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL . punto_end_if
    (119) punto_end_if -> .

    SEMICOLON       reduce using rule 119 (punto_end_if -> .)

    punto_end_if                   shift and go to state 249

state 248

    (122) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL . punto_end_for
    (126) punto_end_for -> .

    SEMICOLON       reduce using rule 126 (punto_end_for -> .)

    punto_end_for                  shift and go to state 250

state 249

    (116) decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if .

    SEMICOLON       reduce using rule 116 (decision -> IF LEFT_PAR exp_or RIGHT_PAR punto_if_exp THEN LEFT_CURL estatutos RIGHT_CURL ELSE punto_else LEFT_CURL estatutos RIGHT_CURL punto_end_if .)


state 250

    (122) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for .

    SEMICOLON       reduce using rule 122 (no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR LEFT_CURL estatutos RIGHT_CURL punto_end_for .)


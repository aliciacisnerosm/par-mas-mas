Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     cte_f -> CTE_I DOT CTE_I
Rule 2     program -> PROGRAM ID punto_program COLON main
Rule 3     program -> PROGRAM ID punto_program COLON variables main
Rule 4     program -> PROGRAM ID punto_program COLON variables funciones main
Rule 5     program -> PROGRAM ID punto_program COLON funciones main
Rule 6     punto_program -> <empty>
Rule 7     main -> MAIN LEFT_PAR RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL
Rule 8     main_aux -> estatutos_main_multiple
Rule 9     main_aux -> empty
Rule 10    variables -> VAR punto_variables_1 SEMICOLON
Rule 11    variables -> VAR punto_variables_1 variables_aux SEMICOLON
Rule 12    punto_variables_1 -> <empty>
Rule 13    variables_aux -> tipo COLON declaracion_inicial
Rule 14    variables_aux -> tipo COLON declaracion_inicial MORE variables_aux
Rule 15    tipo -> INT
Rule 16    tipo -> FLOAT
Rule 17    tipo -> CHAR
Rule 18    declaracion_inicial -> dec_varaux punto_dec_var_1 COMMA declaracion_inicial
Rule 19    declaracion_inicial -> dec_varaux punto_dec_var_1
Rule 20    punto_dec_var_1 -> <empty>
Rule 21    dec_varaux -> ID
Rule 22    dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR
Rule 23    dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
Rule 24    punto_dec_varaux_1 -> <empty>
Rule 25    dec_var -> dec_varaux COMMA dec_var
Rule 26    dec_var -> dec_varaux
Rule 27    funciones -> funciones_aux
Rule 28    funciones -> funciones_aux funciones
Rule 29    funciones_aux -> tipo FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
Rule 30    funciones_aux -> tipo FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
Rule 31    funciones_aux -> VOID FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
Rule 32    funciones_aux -> VOID FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
Rule 33    parametros -> dec_var_param COMMA parametros
Rule 34    parametros -> dec_var_param
Rule 35    dec_var_param -> tipo ID
Rule 36    exp_or -> t_exp punto_pop_or t_exp_or_aux
Rule 37    exp_or -> t_exp punto_pop_or
Rule 38    punto_pop_or -> <empty>
Rule 39    t_exp_or_aux -> OR punto_push_or exp_or
Rule 40    punto_push_or -> <empty>
Rule 41    t_exp -> g_exp pop_and t_exp_aux
Rule 42    t_exp -> g_exp pop_and
Rule 43    pop_and -> <empty>
Rule 44    t_exp_aux -> AND punto_push_and t_exp
Rule 45    punto_push_and -> <empty>
Rule 46    g_exp -> m_exp
Rule 47    g_exp -> m_exp relacionales punto_relacionales m_exp punto_pop_relacional
Rule 48    punto_relacionales -> <empty>
Rule 49    punto_pop_relacional -> <empty>
Rule 50    m_exp -> termino punto_mexp_pop
Rule 51    m_exp -> termino punto_mexp_pop m_exp_aux
Rule 52    punto_mexp_pop -> <empty>
Rule 53    m_exp_aux -> PLUS punto_m_exp_push m_exp
Rule 54    m_exp_aux -> MINUS punto_m_exp_push m_exp
Rule 55    punto_m_exp_push -> <empty>
Rule 56    termino -> factor punto_termino_pop
Rule 57    termino -> factor punto_termino_pop termino_aux
Rule 58    punto_termino_pop -> <empty>
Rule 59    termino_aux -> MULTIPLY punto_termino_aux termino
Rule 60    termino_aux -> DIVIDE punto_termino_aux termino
Rule 61    punto_termino_aux -> <empty>
Rule 62    factor -> cte
Rule 63    factor -> ID LEFT_PAR dec_var RIGHT_PAR
Rule 64    factor -> ID LEFT_PAR RIGHT_PAR
Rule 65    factor -> LEFT_PAR exp_or RIGHT_PAR
Rule 66    relacionales -> LESS_THAN
Rule 67    relacionales -> GREATER_THAN
Rule 68    relacionales -> DIFFERENT
Rule 69    relacionales -> EQUAL
Rule 70    relacionales -> GREATER_EQUAL
Rule 71    relacionales -> LESS_EQUAL
Rule 72    estatutos -> estatutos_main_aux
Rule 73    estatutos -> retorno SEMICOLON
Rule 74    estatutos_main -> asignacion SEMICOLON
Rule 75    estatutos_main -> llamada SEMICOLON
Rule 76    estatutos_main -> lectura SEMICOLON
Rule 77    estatutos_main -> escritura SEMICOLON
Rule 78    estatutos_main -> decision SEMICOLON
Rule 79    estatutos_main -> repeticion SEMICOLON
Rule 80    estatutos_main_multiple -> estatutos_main estatutos_main_multiple
Rule 81    estatutos_main_multiple -> estatutos_main
Rule 82    estatutos_main_aux -> estatutos_main estatutos
Rule 83    estatutos_main_aux -> estatutos_main
Rule 84    asignacion -> dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
Rule 85    punto_asignacion_var -> <empty>
Rule 86    punto_igual -> <empty>
Rule 87    punto_asignacion -> <empty>
Rule 88    llamada -> VD ID LEFT_PAR RIGHT_PAR
Rule 89    llamada -> VD ID LEFT_PAR dec_var RIGHT_PAR
Rule 90    retorno -> RETURN LEFT_PAR m_exp RIGHT_PAR
Rule 91    punto_read_stack -> <empty>
Rule 92    lectura -> READ LEFT_PAR lectura_var RIGHT_PAR
Rule 93    lectura_var -> punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand COMMA lectura_var
Rule 94    lectura_var -> punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand
Rule 95    punto_push_dec_var -> <empty>
Rule 96    punto_add_read_operand -> <empty>
Rule 97    escritura -> WRITE LEFT_PAR escritura_aux RIGHT_PAR
Rule 98    escritura_aux -> punto_write_stack STR punto_escritura_push punto_add_write_operand
Rule 99    escritura_aux -> punto_write_stack m_exp punto_escritura_push punto_add_write_operand
Rule 100   escritura_aux -> punto_write_stack STR punto_escritura_push punto_add_write_operand COMMA escritura_aux
Rule 101   escritura_aux -> punto_write_stack m_exp punto_escritura_push punto_add_write_operand COMMA escritura_aux
Rule 102   punto_escritura_push -> <empty>
Rule 103   punto_write_stack -> <empty>
Rule 104   punto_add_write_operand -> <empty>
Rule 105   decision -> IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL
Rule 106   decision -> IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL
Rule 107   repeticion -> condicional
Rule 108   repeticion -> no_condicional
Rule 109   no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for
Rule 110   punto_for -> <empty>
Rule 111   punto_exp_for_inf -> <empty>
Rule 112   punto_exp_for_sup -> <empty>
Rule 113   punto_end_for -> <empty>
Rule 114   condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while
Rule 115   punto_while -> <empty>
Rule 116   punto_validar_exp -> <empty>
Rule 117   punto_end_while -> <empty>
Rule 118   cte -> ID factor_push_operand
Rule 119   cte -> CTE_I factor_int_push
Rule 120   cte -> cte_f factor_float_push
Rule 121   cte -> CTE_CHAR factor_char_push
Rule 122   factor_push_operand -> <empty>
Rule 123   factor_float_push -> <empty>
Rule 124   factor_int_push -> <empty>
Rule 125   factor_char_push -> <empty>
Rule 126   empty -> <empty>

Terminals, with rules where they appear

AND                  : 44
CHAR                 : 17
COLON                : 2 3 4 5 13 14
COMMA                : 18 25 33 93 100 101
CTE_CHAR             : 121
CTE_I                : 1 1 22 23 23 119
DIFFERENT            : 68
DIVIDE               : 60
DO                   : 109 114
DOT                  : 1
ELSE                 : 106
EQUAL                : 69
EQUALS               : 84 109
FLOAT                : 16
FOR                  : 109
FUNC                 : 29 30 31 32
GREATER_EQUAL        : 70
GREATER_THAN         : 67
ID                   : 2 3 4 5 21 22 23 29 30 31 32 35 63 64 88 89 118
IF                   : 105 106
INT                  : 15
LEFT_BR              : 22 23 23
LEFT_CURL            : 7 29 30 31 32 105 106 106 109 114
LEFT_PAR             : 7 29 30 31 32 63 64 65 88 89 90 92 97 105 106 109 114
LESS_EQUAL           : 71
LESS_THAN            : 66
MAIN                 : 7
MINUS                : 54
MORE                 : 14
MULTIPLY             : 59
OR                   : 39
PLUS                 : 53
PROGRAM              : 2 3 4 5
READ                 : 92
RETURN               : 90
RIGHT_BR             : 22 23 23
RIGHT_CURL           : 7 29 30 31 32 105 106 106 109 114
RIGHT_PAR            : 7 29 30 31 32 63 64 65 88 89 90 92 97 105 106 109 114
SEMICOLON            : 10 11 73 74 75 76 77 78 79
STR                  : 98 100
THEN                 : 105 106
TO                   : 109
VAR                  : 10 11
VD                   : 88 89
VOID                 : 31 32
WHILE                : 114
WRITE                : 97
error                : 

Nonterminals, with rules where they appear

asignacion           : 74
condicional          : 107
cte                  : 62
cte_f                : 120
dec_var              : 25 63 89
dec_var_param        : 33 34
dec_varaux           : 18 19 25 26 84 93 94 109
decision             : 78
declaracion_inicial  : 13 14 18
empty                : 9
escritura            : 77
escritura_aux        : 97 100 101
estatutos            : 29 30 31 32 82 105 106 106 109 114
estatutos_main       : 80 81 82 83
estatutos_main_aux   : 72
estatutos_main_multiple : 8 80
exp_or               : 39 65 105 106 114
factor               : 56 57
factor_char_push     : 121
factor_float_push    : 120
factor_int_push      : 119
factor_push_operand  : 118
funciones            : 4 5 28
funciones_aux        : 27 28
g_exp                : 41 42
lectura              : 76
lectura_var          : 92 93
llamada              : 75
m_exp                : 46 47 47 53 54 84 90 99 101 109 109
m_exp_aux            : 51
main                 : 2 3 4 5
main_aux             : 7
no_condicional       : 108
parametros           : 29 32 33
pop_and              : 41 42
program              : 0
punto_add_read_operand : 93 94
punto_add_write_operand : 98 99 100 101
punto_asignacion     : 84
punto_asignacion_var : 84
punto_dec_var_1      : 18 19
punto_dec_varaux_1   : 
punto_end_for        : 109
punto_end_while      : 114
punto_escritura_push : 98 99 100 101
punto_exp_for_inf    : 109
punto_exp_for_sup    : 109
punto_for            : 109
punto_igual          : 84
punto_m_exp_push     : 53 54
punto_mexp_pop       : 50 51
punto_pop_or         : 36 37
punto_pop_relacional : 47
punto_program        : 2 3 4 5
punto_push_and       : 44
punto_push_dec_var   : 93 94
punto_push_or        : 39
punto_read_stack     : 93 94
punto_relacionales   : 47
punto_termino_aux    : 59 60
punto_termino_pop    : 56 57
punto_validar_exp    : 114
punto_variables_1    : 10 11
punto_while          : 114
punto_write_stack    : 98 99 100 101
relacionales         : 47
repeticion           : 79
retorno              : 73
t_exp                : 36 37 44
t_exp_aux            : 41
t_exp_or_aux         : 36
termino              : 50 51 59 60
termino_aux          : 57
tipo                 : 13 14 29 30 35
variables            : 3 4 29 30 31 32
variables_aux        : 11 14

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . PROGRAM ID punto_program COLON main
    (3) program -> . PROGRAM ID punto_program COLON variables main
    (4) program -> . PROGRAM ID punto_program COLON variables funciones main
    (5) program -> . PROGRAM ID punto_program COLON funciones main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (2) program -> PROGRAM . ID punto_program COLON main
    (3) program -> PROGRAM . ID punto_program COLON variables main
    (4) program -> PROGRAM . ID punto_program COLON variables funciones main
    (5) program -> PROGRAM . ID punto_program COLON funciones main

    ID              shift and go to state 3


state 3

    (2) program -> PROGRAM ID . punto_program COLON main
    (3) program -> PROGRAM ID . punto_program COLON variables main
    (4) program -> PROGRAM ID . punto_program COLON variables funciones main
    (5) program -> PROGRAM ID . punto_program COLON funciones main
    (6) punto_program -> .

    COLON           reduce using rule 6 (punto_program -> .)

    punto_program                  shift and go to state 4

state 4

    (2) program -> PROGRAM ID punto_program . COLON main
    (3) program -> PROGRAM ID punto_program . COLON variables main
    (4) program -> PROGRAM ID punto_program . COLON variables funciones main
    (5) program -> PROGRAM ID punto_program . COLON funciones main

    COLON           shift and go to state 5


state 5

    (2) program -> PROGRAM ID punto_program COLON . main
    (3) program -> PROGRAM ID punto_program COLON . variables main
    (4) program -> PROGRAM ID punto_program COLON . variables funciones main
    (5) program -> PROGRAM ID punto_program COLON . funciones main
    (7) main -> . MAIN LEFT_PAR RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL
    (10) variables -> . VAR punto_variables_1 SEMICOLON
    (11) variables -> . VAR punto_variables_1 variables_aux SEMICOLON
    (27) funciones -> . funciones_aux
    (28) funciones -> . funciones_aux funciones
    (29) funciones_aux -> . tipo FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (30) funciones_aux -> . tipo FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (31) funciones_aux -> . VOID FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (32) funciones_aux -> . VOID FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (15) tipo -> . INT
    (16) tipo -> . FLOAT
    (17) tipo -> . CHAR

    MAIN            shift and go to state 9
    VAR             shift and go to state 10
    VOID            shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    main                           shift and go to state 6
    variables                      shift and go to state 7
    funciones                      shift and go to state 8
    funciones_aux                  shift and go to state 11
    tipo                           shift and go to state 12

state 6

    (2) program -> PROGRAM ID punto_program COLON main .

    $end            reduce using rule 2 (program -> PROGRAM ID punto_program COLON main .)


state 7

    (3) program -> PROGRAM ID punto_program COLON variables . main
    (4) program -> PROGRAM ID punto_program COLON variables . funciones main
    (7) main -> . MAIN LEFT_PAR RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL
    (27) funciones -> . funciones_aux
    (28) funciones -> . funciones_aux funciones
    (29) funciones_aux -> . tipo FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (30) funciones_aux -> . tipo FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (31) funciones_aux -> . VOID FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (32) funciones_aux -> . VOID FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (15) tipo -> . INT
    (16) tipo -> . FLOAT
    (17) tipo -> . CHAR

    MAIN            shift and go to state 9
    VOID            shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    main                           shift and go to state 17
    funciones                      shift and go to state 18
    funciones_aux                  shift and go to state 11
    tipo                           shift and go to state 12

state 8

    (5) program -> PROGRAM ID punto_program COLON funciones . main
    (7) main -> . MAIN LEFT_PAR RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL

    MAIN            shift and go to state 9

    main                           shift and go to state 19

state 9

    (7) main -> MAIN . LEFT_PAR RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL

    LEFT_PAR        shift and go to state 20


state 10

    (10) variables -> VAR . punto_variables_1 SEMICOLON
    (11) variables -> VAR . punto_variables_1 variables_aux SEMICOLON
    (12) punto_variables_1 -> .

    SEMICOLON       reduce using rule 12 (punto_variables_1 -> .)
    INT             reduce using rule 12 (punto_variables_1 -> .)
    FLOAT           reduce using rule 12 (punto_variables_1 -> .)
    CHAR            reduce using rule 12 (punto_variables_1 -> .)

    punto_variables_1              shift and go to state 21

state 11

    (27) funciones -> funciones_aux .
    (28) funciones -> funciones_aux . funciones
    (27) funciones -> . funciones_aux
    (28) funciones -> . funciones_aux funciones
    (29) funciones_aux -> . tipo FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (30) funciones_aux -> . tipo FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (31) funciones_aux -> . VOID FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (32) funciones_aux -> . VOID FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (15) tipo -> . INT
    (16) tipo -> . FLOAT
    (17) tipo -> . CHAR

    MAIN            reduce using rule 27 (funciones -> funciones_aux .)
    VOID            shift and go to state 13
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    funciones_aux                  shift and go to state 11
    funciones                      shift and go to state 22
    tipo                           shift and go to state 12

state 12

    (29) funciones_aux -> tipo . FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (30) funciones_aux -> tipo . FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL

    FUNC            shift and go to state 23


state 13

    (31) funciones_aux -> VOID . FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (32) funciones_aux -> VOID . FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL

    FUNC            shift and go to state 24


state 14

    (15) tipo -> INT .

    FUNC            reduce using rule 15 (tipo -> INT .)
    COLON           reduce using rule 15 (tipo -> INT .)
    ID              reduce using rule 15 (tipo -> INT .)


state 15

    (16) tipo -> FLOAT .

    FUNC            reduce using rule 16 (tipo -> FLOAT .)
    COLON           reduce using rule 16 (tipo -> FLOAT .)
    ID              reduce using rule 16 (tipo -> FLOAT .)


state 16

    (17) tipo -> CHAR .

    FUNC            reduce using rule 17 (tipo -> CHAR .)
    COLON           reduce using rule 17 (tipo -> CHAR .)
    ID              reduce using rule 17 (tipo -> CHAR .)


state 17

    (3) program -> PROGRAM ID punto_program COLON variables main .

    $end            reduce using rule 3 (program -> PROGRAM ID punto_program COLON variables main .)


state 18

    (4) program -> PROGRAM ID punto_program COLON variables funciones . main
    (7) main -> . MAIN LEFT_PAR RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL

    MAIN            shift and go to state 9

    main                           shift and go to state 25

state 19

    (5) program -> PROGRAM ID punto_program COLON funciones main .

    $end            reduce using rule 5 (program -> PROGRAM ID punto_program COLON funciones main .)


state 20

    (7) main -> MAIN LEFT_PAR . RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL

    RIGHT_PAR       shift and go to state 26


state 21

    (10) variables -> VAR punto_variables_1 . SEMICOLON
    (11) variables -> VAR punto_variables_1 . variables_aux SEMICOLON
    (13) variables_aux -> . tipo COLON declaracion_inicial
    (14) variables_aux -> . tipo COLON declaracion_inicial MORE variables_aux
    (15) tipo -> . INT
    (16) tipo -> . FLOAT
    (17) tipo -> . CHAR

    SEMICOLON       shift and go to state 27
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    variables_aux                  shift and go to state 28
    tipo                           shift and go to state 29

state 22

    (28) funciones -> funciones_aux funciones .

    MAIN            reduce using rule 28 (funciones -> funciones_aux funciones .)


state 23

    (29) funciones_aux -> tipo FUNC . ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (30) funciones_aux -> tipo FUNC . ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL

    ID              shift and go to state 30


state 24

    (31) funciones_aux -> VOID FUNC . ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (32) funciones_aux -> VOID FUNC . ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL

    ID              shift and go to state 31


state 25

    (4) program -> PROGRAM ID punto_program COLON variables funciones main .

    $end            reduce using rule 4 (program -> PROGRAM ID punto_program COLON variables funciones main .)


state 26

    (7) main -> MAIN LEFT_PAR RIGHT_PAR . LEFT_CURL main_aux RIGHT_CURL

    LEFT_CURL       shift and go to state 32


state 27

    (10) variables -> VAR punto_variables_1 SEMICOLON .

    MAIN            reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    VOID            reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    INT             reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    FLOAT           reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    CHAR            reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    RETURN          reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    VD              reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    READ            reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    WRITE           reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    IF              reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    ID              reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    WHILE           reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)
    FOR             reduce using rule 10 (variables -> VAR punto_variables_1 SEMICOLON .)


state 28

    (11) variables -> VAR punto_variables_1 variables_aux . SEMICOLON

    SEMICOLON       shift and go to state 33


state 29

    (13) variables_aux -> tipo . COLON declaracion_inicial
    (14) variables_aux -> tipo . COLON declaracion_inicial MORE variables_aux

    COLON           shift and go to state 34


state 30

    (29) funciones_aux -> tipo FUNC ID . LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (30) funciones_aux -> tipo FUNC ID . LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL

    LEFT_PAR        shift and go to state 35


state 31

    (31) funciones_aux -> VOID FUNC ID . LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (32) funciones_aux -> VOID FUNC ID . LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL

    LEFT_PAR        shift and go to state 36


state 32

    (7) main -> MAIN LEFT_PAR RIGHT_PAR LEFT_CURL . main_aux RIGHT_CURL
    (8) main_aux -> . estatutos_main_multiple
    (9) main_aux -> . empty
    (80) estatutos_main_multiple -> . estatutos_main estatutos_main_multiple
    (81) estatutos_main_multiple -> . estatutos_main
    (126) empty -> .
    (74) estatutos_main -> . asignacion SEMICOLON
    (75) estatutos_main -> . llamada SEMICOLON
    (76) estatutos_main -> . lectura SEMICOLON
    (77) estatutos_main -> . escritura SEMICOLON
    (78) estatutos_main -> . decision SEMICOLON
    (79) estatutos_main -> . repeticion SEMICOLON
    (84) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (88) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (89) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (92) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (97) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (105) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL
    (106) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL
    (107) repeticion -> . condicional
    (108) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (114) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (109) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RIGHT_CURL      reduce using rule 126 (empty -> .)
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    main_aux                       shift and go to state 37
    estatutos_main_multiple        shift and go to state 38
    empty                          shift and go to state 39
    estatutos_main                 shift and go to state 40
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 33

    (11) variables -> VAR punto_variables_1 variables_aux SEMICOLON .

    MAIN            reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    VOID            reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    INT             reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    FLOAT           reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    CHAR            reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    RETURN          reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    VD              reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    READ            reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    WRITE           reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    IF              reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    ID              reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    WHILE           reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)
    FOR             reduce using rule 11 (variables -> VAR punto_variables_1 variables_aux SEMICOLON .)


state 34

    (13) variables_aux -> tipo COLON . declaracion_inicial
    (14) variables_aux -> tipo COLON . declaracion_inicial MORE variables_aux
    (18) declaracion_inicial -> . dec_varaux punto_dec_var_1 COMMA declaracion_inicial
    (19) declaracion_inicial -> . dec_varaux punto_dec_var_1
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    ID              shift and go to state 49

    declaracion_inicial            shift and go to state 57
    dec_varaux                     shift and go to state 58

state 35

    (29) funciones_aux -> tipo FUNC ID LEFT_PAR . parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (30) funciones_aux -> tipo FUNC ID LEFT_PAR . RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (33) parametros -> . dec_var_param COMMA parametros
    (34) parametros -> . dec_var_param
    (35) dec_var_param -> . tipo ID
    (15) tipo -> . INT
    (16) tipo -> . FLOAT
    (17) tipo -> . CHAR

    RIGHT_PAR       shift and go to state 61
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    tipo                           shift and go to state 59
    parametros                     shift and go to state 60
    dec_var_param                  shift and go to state 62

state 36

    (31) funciones_aux -> VOID FUNC ID LEFT_PAR . RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (32) funciones_aux -> VOID FUNC ID LEFT_PAR . parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL
    (33) parametros -> . dec_var_param COMMA parametros
    (34) parametros -> . dec_var_param
    (35) dec_var_param -> . tipo ID
    (15) tipo -> . INT
    (16) tipo -> . FLOAT
    (17) tipo -> . CHAR

    RIGHT_PAR       shift and go to state 63
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    parametros                     shift and go to state 64
    dec_var_param                  shift and go to state 62
    tipo                           shift and go to state 59

state 37

    (7) main -> MAIN LEFT_PAR RIGHT_PAR LEFT_CURL main_aux . RIGHT_CURL

    RIGHT_CURL      shift and go to state 65


state 38

    (8) main_aux -> estatutos_main_multiple .

    RIGHT_CURL      reduce using rule 8 (main_aux -> estatutos_main_multiple .)


state 39

    (9) main_aux -> empty .

    RIGHT_CURL      reduce using rule 9 (main_aux -> empty .)


state 40

    (80) estatutos_main_multiple -> estatutos_main . estatutos_main_multiple
    (81) estatutos_main_multiple -> estatutos_main .
    (80) estatutos_main_multiple -> . estatutos_main estatutos_main_multiple
    (81) estatutos_main_multiple -> . estatutos_main
    (74) estatutos_main -> . asignacion SEMICOLON
    (75) estatutos_main -> . llamada SEMICOLON
    (76) estatutos_main -> . lectura SEMICOLON
    (77) estatutos_main -> . escritura SEMICOLON
    (78) estatutos_main -> . decision SEMICOLON
    (79) estatutos_main -> . repeticion SEMICOLON
    (84) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (88) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (89) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (92) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (97) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (105) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL
    (106) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL
    (107) repeticion -> . condicional
    (108) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (114) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (109) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RIGHT_CURL      reduce using rule 81 (estatutos_main_multiple -> estatutos_main .)
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    estatutos_main                 shift and go to state 40
    estatutos_main_multiple        shift and go to state 66
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 41

    (74) estatutos_main -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 67


state 42

    (75) estatutos_main -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 68


state 43

    (76) estatutos_main -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 69


state 44

    (77) estatutos_main -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 70


state 45

    (78) estatutos_main -> decision . SEMICOLON

    SEMICOLON       shift and go to state 71


state 46

    (79) estatutos_main -> repeticion . SEMICOLON

    SEMICOLON       shift and go to state 72


state 47

    (84) asignacion -> dec_varaux . punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (85) punto_asignacion_var -> .

    EQUALS          reduce using rule 85 (punto_asignacion_var -> .)

    punto_asignacion_var           shift and go to state 73

state 48

    (88) llamada -> VD . ID LEFT_PAR RIGHT_PAR
    (89) llamada -> VD . ID LEFT_PAR dec_var RIGHT_PAR

    ID              shift and go to state 74


state 49

    (21) dec_varaux -> ID .
    (22) dec_varaux -> ID . LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> ID . LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    EQUALS          reduce using rule 21 (dec_varaux -> ID .)
    COMMA           reduce using rule 21 (dec_varaux -> ID .)
    MORE            reduce using rule 21 (dec_varaux -> ID .)
    SEMICOLON       reduce using rule 21 (dec_varaux -> ID .)
    RIGHT_PAR       reduce using rule 21 (dec_varaux -> ID .)
    LEFT_BR         shift and go to state 75


state 50

    (92) lectura -> READ . LEFT_PAR lectura_var RIGHT_PAR

    LEFT_PAR        shift and go to state 76


state 51

    (97) escritura -> WRITE . LEFT_PAR escritura_aux RIGHT_PAR

    LEFT_PAR        shift and go to state 77


state 52

    (105) decision -> IF . LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL
    (106) decision -> IF . LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL

    LEFT_PAR        shift and go to state 78


state 53

    (107) repeticion -> condicional .

    SEMICOLON       reduce using rule 107 (repeticion -> condicional .)


state 54

    (108) repeticion -> no_condicional .

    SEMICOLON       reduce using rule 108 (repeticion -> no_condicional .)


state 55

    (114) condicional -> WHILE . punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (115) punto_while -> .

    LEFT_PAR        reduce using rule 115 (punto_while -> .)

    punto_while                    shift and go to state 79

state 56

    (109) no_condicional -> FOR . LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for

    LEFT_PAR        shift and go to state 80


state 57

    (13) variables_aux -> tipo COLON declaracion_inicial .
    (14) variables_aux -> tipo COLON declaracion_inicial . MORE variables_aux

    SEMICOLON       reduce using rule 13 (variables_aux -> tipo COLON declaracion_inicial .)
    MORE            shift and go to state 81


state 58

    (18) declaracion_inicial -> dec_varaux . punto_dec_var_1 COMMA declaracion_inicial
    (19) declaracion_inicial -> dec_varaux . punto_dec_var_1
    (20) punto_dec_var_1 -> .

    COMMA           reduce using rule 20 (punto_dec_var_1 -> .)
    MORE            reduce using rule 20 (punto_dec_var_1 -> .)
    SEMICOLON       reduce using rule 20 (punto_dec_var_1 -> .)

    punto_dec_var_1                shift and go to state 82

state 59

    (35) dec_var_param -> tipo . ID

    ID              shift and go to state 83


state 60

    (29) funciones_aux -> tipo FUNC ID LEFT_PAR parametros . RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL

    RIGHT_PAR       shift and go to state 84


state 61

    (30) funciones_aux -> tipo FUNC ID LEFT_PAR RIGHT_PAR . LEFT_CURL variables estatutos RIGHT_CURL

    LEFT_CURL       shift and go to state 85


state 62

    (33) parametros -> dec_var_param . COMMA parametros
    (34) parametros -> dec_var_param .

    COMMA           shift and go to state 86
    RIGHT_PAR       reduce using rule 34 (parametros -> dec_var_param .)


state 63

    (31) funciones_aux -> VOID FUNC ID LEFT_PAR RIGHT_PAR . LEFT_CURL variables estatutos RIGHT_CURL

    LEFT_CURL       shift and go to state 87


state 64

    (32) funciones_aux -> VOID FUNC ID LEFT_PAR parametros . RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL

    RIGHT_PAR       shift and go to state 88


state 65

    (7) main -> MAIN LEFT_PAR RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL .

    $end            reduce using rule 7 (main -> MAIN LEFT_PAR RIGHT_PAR LEFT_CURL main_aux RIGHT_CURL .)


state 66

    (80) estatutos_main_multiple -> estatutos_main estatutos_main_multiple .

    RIGHT_CURL      reduce using rule 80 (estatutos_main_multiple -> estatutos_main estatutos_main_multiple .)


state 67

    (74) estatutos_main -> asignacion SEMICOLON .

    VD              reduce using rule 74 (estatutos_main -> asignacion SEMICOLON .)
    READ            reduce using rule 74 (estatutos_main -> asignacion SEMICOLON .)
    WRITE           reduce using rule 74 (estatutos_main -> asignacion SEMICOLON .)
    IF              reduce using rule 74 (estatutos_main -> asignacion SEMICOLON .)
    ID              reduce using rule 74 (estatutos_main -> asignacion SEMICOLON .)
    WHILE           reduce using rule 74 (estatutos_main -> asignacion SEMICOLON .)
    FOR             reduce using rule 74 (estatutos_main -> asignacion SEMICOLON .)
    RIGHT_CURL      reduce using rule 74 (estatutos_main -> asignacion SEMICOLON .)
    RETURN          reduce using rule 74 (estatutos_main -> asignacion SEMICOLON .)


state 68

    (75) estatutos_main -> llamada SEMICOLON .

    VD              reduce using rule 75 (estatutos_main -> llamada SEMICOLON .)
    READ            reduce using rule 75 (estatutos_main -> llamada SEMICOLON .)
    WRITE           reduce using rule 75 (estatutos_main -> llamada SEMICOLON .)
    IF              reduce using rule 75 (estatutos_main -> llamada SEMICOLON .)
    ID              reduce using rule 75 (estatutos_main -> llamada SEMICOLON .)
    WHILE           reduce using rule 75 (estatutos_main -> llamada SEMICOLON .)
    FOR             reduce using rule 75 (estatutos_main -> llamada SEMICOLON .)
    RIGHT_CURL      reduce using rule 75 (estatutos_main -> llamada SEMICOLON .)
    RETURN          reduce using rule 75 (estatutos_main -> llamada SEMICOLON .)


state 69

    (76) estatutos_main -> lectura SEMICOLON .

    VD              reduce using rule 76 (estatutos_main -> lectura SEMICOLON .)
    READ            reduce using rule 76 (estatutos_main -> lectura SEMICOLON .)
    WRITE           reduce using rule 76 (estatutos_main -> lectura SEMICOLON .)
    IF              reduce using rule 76 (estatutos_main -> lectura SEMICOLON .)
    ID              reduce using rule 76 (estatutos_main -> lectura SEMICOLON .)
    WHILE           reduce using rule 76 (estatutos_main -> lectura SEMICOLON .)
    FOR             reduce using rule 76 (estatutos_main -> lectura SEMICOLON .)
    RIGHT_CURL      reduce using rule 76 (estatutos_main -> lectura SEMICOLON .)
    RETURN          reduce using rule 76 (estatutos_main -> lectura SEMICOLON .)


state 70

    (77) estatutos_main -> escritura SEMICOLON .

    VD              reduce using rule 77 (estatutos_main -> escritura SEMICOLON .)
    READ            reduce using rule 77 (estatutos_main -> escritura SEMICOLON .)
    WRITE           reduce using rule 77 (estatutos_main -> escritura SEMICOLON .)
    IF              reduce using rule 77 (estatutos_main -> escritura SEMICOLON .)
    ID              reduce using rule 77 (estatutos_main -> escritura SEMICOLON .)
    WHILE           reduce using rule 77 (estatutos_main -> escritura SEMICOLON .)
    FOR             reduce using rule 77 (estatutos_main -> escritura SEMICOLON .)
    RIGHT_CURL      reduce using rule 77 (estatutos_main -> escritura SEMICOLON .)
    RETURN          reduce using rule 77 (estatutos_main -> escritura SEMICOLON .)


state 71

    (78) estatutos_main -> decision SEMICOLON .

    VD              reduce using rule 78 (estatutos_main -> decision SEMICOLON .)
    READ            reduce using rule 78 (estatutos_main -> decision SEMICOLON .)
    WRITE           reduce using rule 78 (estatutos_main -> decision SEMICOLON .)
    IF              reduce using rule 78 (estatutos_main -> decision SEMICOLON .)
    ID              reduce using rule 78 (estatutos_main -> decision SEMICOLON .)
    WHILE           reduce using rule 78 (estatutos_main -> decision SEMICOLON .)
    FOR             reduce using rule 78 (estatutos_main -> decision SEMICOLON .)
    RIGHT_CURL      reduce using rule 78 (estatutos_main -> decision SEMICOLON .)
    RETURN          reduce using rule 78 (estatutos_main -> decision SEMICOLON .)


state 72

    (79) estatutos_main -> repeticion SEMICOLON .

    VD              reduce using rule 79 (estatutos_main -> repeticion SEMICOLON .)
    READ            reduce using rule 79 (estatutos_main -> repeticion SEMICOLON .)
    WRITE           reduce using rule 79 (estatutos_main -> repeticion SEMICOLON .)
    IF              reduce using rule 79 (estatutos_main -> repeticion SEMICOLON .)
    ID              reduce using rule 79 (estatutos_main -> repeticion SEMICOLON .)
    WHILE           reduce using rule 79 (estatutos_main -> repeticion SEMICOLON .)
    FOR             reduce using rule 79 (estatutos_main -> repeticion SEMICOLON .)
    RIGHT_CURL      reduce using rule 79 (estatutos_main -> repeticion SEMICOLON .)
    RETURN          reduce using rule 79 (estatutos_main -> repeticion SEMICOLON .)


state 73

    (84) asignacion -> dec_varaux punto_asignacion_var . EQUALS punto_igual m_exp punto_asignacion

    EQUALS          shift and go to state 89


state 74

    (88) llamada -> VD ID . LEFT_PAR RIGHT_PAR
    (89) llamada -> VD ID . LEFT_PAR dec_var RIGHT_PAR

    LEFT_PAR        shift and go to state 90


state 75

    (22) dec_varaux -> ID LEFT_BR . CTE_I RIGHT_BR
    (23) dec_varaux -> ID LEFT_BR . CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    CTE_I           shift and go to state 91


state 76

    (92) lectura -> READ LEFT_PAR . lectura_var RIGHT_PAR
    (93) lectura_var -> . punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand COMMA lectura_var
    (94) lectura_var -> . punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand
    (91) punto_read_stack -> .

    ID              reduce using rule 91 (punto_read_stack -> .)

    lectura_var                    shift and go to state 92
    punto_read_stack               shift and go to state 93

state 77

    (97) escritura -> WRITE LEFT_PAR . escritura_aux RIGHT_PAR
    (98) escritura_aux -> . punto_write_stack STR punto_escritura_push punto_add_write_operand
    (99) escritura_aux -> . punto_write_stack m_exp punto_escritura_push punto_add_write_operand
    (100) escritura_aux -> . punto_write_stack STR punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (101) escritura_aux -> . punto_write_stack m_exp punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (103) punto_write_stack -> .

    STR             reduce using rule 103 (punto_write_stack -> .)
    ID              reduce using rule 103 (punto_write_stack -> .)
    LEFT_PAR        reduce using rule 103 (punto_write_stack -> .)
    CTE_I           reduce using rule 103 (punto_write_stack -> .)
    CTE_CHAR        reduce using rule 103 (punto_write_stack -> .)

    escritura_aux                  shift and go to state 94
    punto_write_stack              shift and go to state 95

state 78

    (105) decision -> IF LEFT_PAR . exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL
    (106) decision -> IF LEFT_PAR . exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL
    (36) exp_or -> . t_exp punto_pop_or t_exp_or_aux
    (37) exp_or -> . t_exp punto_pop_or
    (41) t_exp -> . g_exp pop_and t_exp_aux
    (42) t_exp -> . g_exp pop_and
    (46) g_exp -> . m_exp
    (47) g_exp -> . m_exp relacionales punto_relacionales m_exp punto_pop_relacional
    (50) m_exp -> . termino punto_mexp_pop
    (51) m_exp -> . termino punto_mexp_pop m_exp_aux
    (56) termino -> . factor punto_termino_pop
    (57) termino -> . factor punto_termino_pop termino_aux
    (62) factor -> . cte
    (63) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (64) factor -> . ID LEFT_PAR RIGHT_PAR
    (65) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (118) cte -> . ID factor_push_operand
    (119) cte -> . CTE_I factor_int_push
    (120) cte -> . cte_f factor_float_push
    (121) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 104
    LEFT_PAR        shift and go to state 96
    CTE_I           shift and go to state 105
    CTE_CHAR        shift and go to state 107

    exp_or                         shift and go to state 97
    t_exp                          shift and go to state 98
    g_exp                          shift and go to state 99
    m_exp                          shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    cte                            shift and go to state 103
    cte_f                          shift and go to state 106

state 79

    (114) condicional -> WHILE punto_while . LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while

    LEFT_PAR        shift and go to state 108


state 80

    (109) no_condicional -> FOR LEFT_PAR . dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    ID              shift and go to state 49

    dec_varaux                     shift and go to state 109

state 81

    (14) variables_aux -> tipo COLON declaracion_inicial MORE . variables_aux
    (13) variables_aux -> . tipo COLON declaracion_inicial
    (14) variables_aux -> . tipo COLON declaracion_inicial MORE variables_aux
    (15) tipo -> . INT
    (16) tipo -> . FLOAT
    (17) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    tipo                           shift and go to state 29
    variables_aux                  shift and go to state 110

state 82

    (18) declaracion_inicial -> dec_varaux punto_dec_var_1 . COMMA declaracion_inicial
    (19) declaracion_inicial -> dec_varaux punto_dec_var_1 .

    COMMA           shift and go to state 111
    MORE            reduce using rule 19 (declaracion_inicial -> dec_varaux punto_dec_var_1 .)
    SEMICOLON       reduce using rule 19 (declaracion_inicial -> dec_varaux punto_dec_var_1 .)


state 83

    (35) dec_var_param -> tipo ID .

    COMMA           reduce using rule 35 (dec_var_param -> tipo ID .)
    RIGHT_PAR       reduce using rule 35 (dec_var_param -> tipo ID .)


state 84

    (29) funciones_aux -> tipo FUNC ID LEFT_PAR parametros RIGHT_PAR . LEFT_CURL variables estatutos RIGHT_CURL

    LEFT_CURL       shift and go to state 112


state 85

    (30) funciones_aux -> tipo FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL . variables estatutos RIGHT_CURL
    (10) variables -> . VAR punto_variables_1 SEMICOLON
    (11) variables -> . VAR punto_variables_1 variables_aux SEMICOLON

    VAR             shift and go to state 10

    variables                      shift and go to state 113

state 86

    (33) parametros -> dec_var_param COMMA . parametros
    (33) parametros -> . dec_var_param COMMA parametros
    (34) parametros -> . dec_var_param
    (35) dec_var_param -> . tipo ID
    (15) tipo -> . INT
    (16) tipo -> . FLOAT
    (17) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    dec_var_param                  shift and go to state 62
    parametros                     shift and go to state 114
    tipo                           shift and go to state 59

state 87

    (31) funciones_aux -> VOID FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL . variables estatutos RIGHT_CURL
    (10) variables -> . VAR punto_variables_1 SEMICOLON
    (11) variables -> . VAR punto_variables_1 variables_aux SEMICOLON

    VAR             shift and go to state 10

    variables                      shift and go to state 115

state 88

    (32) funciones_aux -> VOID FUNC ID LEFT_PAR parametros RIGHT_PAR . LEFT_CURL variables estatutos RIGHT_CURL

    LEFT_CURL       shift and go to state 116


state 89

    (84) asignacion -> dec_varaux punto_asignacion_var EQUALS . punto_igual m_exp punto_asignacion
    (86) punto_igual -> .

    ID              reduce using rule 86 (punto_igual -> .)
    LEFT_PAR        reduce using rule 86 (punto_igual -> .)
    CTE_I           reduce using rule 86 (punto_igual -> .)
    CTE_CHAR        reduce using rule 86 (punto_igual -> .)

    punto_igual                    shift and go to state 117

state 90

    (88) llamada -> VD ID LEFT_PAR . RIGHT_PAR
    (89) llamada -> VD ID LEFT_PAR . dec_var RIGHT_PAR
    (25) dec_var -> . dec_varaux COMMA dec_var
    (26) dec_var -> . dec_varaux
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    RIGHT_PAR       shift and go to state 118
    ID              shift and go to state 49

    dec_var                        shift and go to state 119
    dec_varaux                     shift and go to state 120

state 91

    (22) dec_varaux -> ID LEFT_BR CTE_I . RIGHT_BR
    (23) dec_varaux -> ID LEFT_BR CTE_I . RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    RIGHT_BR        shift and go to state 121


state 92

    (92) lectura -> READ LEFT_PAR lectura_var . RIGHT_PAR

    RIGHT_PAR       shift and go to state 122


state 93

    (93) lectura_var -> punto_read_stack . dec_varaux punto_push_dec_var punto_add_read_operand COMMA lectura_var
    (94) lectura_var -> punto_read_stack . dec_varaux punto_push_dec_var punto_add_read_operand
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    ID              shift and go to state 49

    dec_varaux                     shift and go to state 123

state 94

    (97) escritura -> WRITE LEFT_PAR escritura_aux . RIGHT_PAR

    RIGHT_PAR       shift and go to state 124


state 95

    (98) escritura_aux -> punto_write_stack . STR punto_escritura_push punto_add_write_operand
    (99) escritura_aux -> punto_write_stack . m_exp punto_escritura_push punto_add_write_operand
    (100) escritura_aux -> punto_write_stack . STR punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (101) escritura_aux -> punto_write_stack . m_exp punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (50) m_exp -> . termino punto_mexp_pop
    (51) m_exp -> . termino punto_mexp_pop m_exp_aux
    (56) termino -> . factor punto_termino_pop
    (57) termino -> . factor punto_termino_pop termino_aux
    (62) factor -> . cte
    (63) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (64) factor -> . ID LEFT_PAR RIGHT_PAR
    (65) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (118) cte -> . ID factor_push_operand
    (119) cte -> . CTE_I factor_int_push
    (120) cte -> . cte_f factor_float_push
    (121) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    STR             shift and go to state 125
    ID              shift and go to state 104
    LEFT_PAR        shift and go to state 96
    CTE_I           shift and go to state 105
    CTE_CHAR        shift and go to state 107

    m_exp                          shift and go to state 126
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    cte                            shift and go to state 103
    cte_f                          shift and go to state 106

state 96

    (65) factor -> LEFT_PAR . exp_or RIGHT_PAR
    (36) exp_or -> . t_exp punto_pop_or t_exp_or_aux
    (37) exp_or -> . t_exp punto_pop_or
    (41) t_exp -> . g_exp pop_and t_exp_aux
    (42) t_exp -> . g_exp pop_and
    (46) g_exp -> . m_exp
    (47) g_exp -> . m_exp relacionales punto_relacionales m_exp punto_pop_relacional
    (50) m_exp -> . termino punto_mexp_pop
    (51) m_exp -> . termino punto_mexp_pop m_exp_aux
    (56) termino -> . factor punto_termino_pop
    (57) termino -> . factor punto_termino_pop termino_aux
    (62) factor -> . cte
    (63) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (64) factor -> . ID LEFT_PAR RIGHT_PAR
    (65) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (118) cte -> . ID factor_push_operand
    (119) cte -> . CTE_I factor_int_push
    (120) cte -> . cte_f factor_float_push
    (121) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 104
    LEFT_PAR        shift and go to state 96
    CTE_I           shift and go to state 105
    CTE_CHAR        shift and go to state 107

    exp_or                         shift and go to state 127
    t_exp                          shift and go to state 98
    g_exp                          shift and go to state 99
    m_exp                          shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    cte                            shift and go to state 103
    cte_f                          shift and go to state 106

state 97

    (105) decision -> IF LEFT_PAR exp_or . RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL
    (106) decision -> IF LEFT_PAR exp_or . RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL

    RIGHT_PAR       shift and go to state 128


state 98

    (36) exp_or -> t_exp . punto_pop_or t_exp_or_aux
    (37) exp_or -> t_exp . punto_pop_or
    (38) punto_pop_or -> .

    OR              reduce using rule 38 (punto_pop_or -> .)
    RIGHT_PAR       reduce using rule 38 (punto_pop_or -> .)

    punto_pop_or                   shift and go to state 129

state 99

    (41) t_exp -> g_exp . pop_and t_exp_aux
    (42) t_exp -> g_exp . pop_and
    (43) pop_and -> .

    AND             reduce using rule 43 (pop_and -> .)
    OR              reduce using rule 43 (pop_and -> .)
    RIGHT_PAR       reduce using rule 43 (pop_and -> .)

    pop_and                        shift and go to state 130

state 100

    (46) g_exp -> m_exp .
    (47) g_exp -> m_exp . relacionales punto_relacionales m_exp punto_pop_relacional
    (66) relacionales -> . LESS_THAN
    (67) relacionales -> . GREATER_THAN
    (68) relacionales -> . DIFFERENT
    (69) relacionales -> . EQUAL
    (70) relacionales -> . GREATER_EQUAL
    (71) relacionales -> . LESS_EQUAL

    AND             reduce using rule 46 (g_exp -> m_exp .)
    OR              reduce using rule 46 (g_exp -> m_exp .)
    RIGHT_PAR       reduce using rule 46 (g_exp -> m_exp .)
    LESS_THAN       shift and go to state 132
    GREATER_THAN    shift and go to state 133
    DIFFERENT       shift and go to state 134
    EQUAL           shift and go to state 135
    GREATER_EQUAL   shift and go to state 136
    LESS_EQUAL      shift and go to state 137

    relacionales                   shift and go to state 131

state 101

    (50) m_exp -> termino . punto_mexp_pop
    (51) m_exp -> termino . punto_mexp_pop m_exp_aux
    (52) punto_mexp_pop -> .

    PLUS            reduce using rule 52 (punto_mexp_pop -> .)
    MINUS           reduce using rule 52 (punto_mexp_pop -> .)
    LESS_THAN       reduce using rule 52 (punto_mexp_pop -> .)
    GREATER_THAN    reduce using rule 52 (punto_mexp_pop -> .)
    DIFFERENT       reduce using rule 52 (punto_mexp_pop -> .)
    EQUAL           reduce using rule 52 (punto_mexp_pop -> .)
    GREATER_EQUAL   reduce using rule 52 (punto_mexp_pop -> .)
    LESS_EQUAL      reduce using rule 52 (punto_mexp_pop -> .)
    AND             reduce using rule 52 (punto_mexp_pop -> .)
    OR              reduce using rule 52 (punto_mexp_pop -> .)
    RIGHT_PAR       reduce using rule 52 (punto_mexp_pop -> .)
    COMMA           reduce using rule 52 (punto_mexp_pop -> .)
    SEMICOLON       reduce using rule 52 (punto_mexp_pop -> .)
    TO              reduce using rule 52 (punto_mexp_pop -> .)

    punto_mexp_pop                 shift and go to state 138

state 102

    (56) termino -> factor . punto_termino_pop
    (57) termino -> factor . punto_termino_pop termino_aux
    (58) punto_termino_pop -> .

    MULTIPLY        reduce using rule 58 (punto_termino_pop -> .)
    DIVIDE          reduce using rule 58 (punto_termino_pop -> .)
    PLUS            reduce using rule 58 (punto_termino_pop -> .)
    MINUS           reduce using rule 58 (punto_termino_pop -> .)
    LESS_THAN       reduce using rule 58 (punto_termino_pop -> .)
    GREATER_THAN    reduce using rule 58 (punto_termino_pop -> .)
    DIFFERENT       reduce using rule 58 (punto_termino_pop -> .)
    EQUAL           reduce using rule 58 (punto_termino_pop -> .)
    GREATER_EQUAL   reduce using rule 58 (punto_termino_pop -> .)
    LESS_EQUAL      reduce using rule 58 (punto_termino_pop -> .)
    AND             reduce using rule 58 (punto_termino_pop -> .)
    OR              reduce using rule 58 (punto_termino_pop -> .)
    RIGHT_PAR       reduce using rule 58 (punto_termino_pop -> .)
    COMMA           reduce using rule 58 (punto_termino_pop -> .)
    SEMICOLON       reduce using rule 58 (punto_termino_pop -> .)
    TO              reduce using rule 58 (punto_termino_pop -> .)

    punto_termino_pop              shift and go to state 139

state 103

    (62) factor -> cte .

    MULTIPLY        reduce using rule 62 (factor -> cte .)
    DIVIDE          reduce using rule 62 (factor -> cte .)
    PLUS            reduce using rule 62 (factor -> cte .)
    MINUS           reduce using rule 62 (factor -> cte .)
    LESS_THAN       reduce using rule 62 (factor -> cte .)
    GREATER_THAN    reduce using rule 62 (factor -> cte .)
    DIFFERENT       reduce using rule 62 (factor -> cte .)
    EQUAL           reduce using rule 62 (factor -> cte .)
    GREATER_EQUAL   reduce using rule 62 (factor -> cte .)
    LESS_EQUAL      reduce using rule 62 (factor -> cte .)
    AND             reduce using rule 62 (factor -> cte .)
    OR              reduce using rule 62 (factor -> cte .)
    RIGHT_PAR       reduce using rule 62 (factor -> cte .)
    COMMA           reduce using rule 62 (factor -> cte .)
    SEMICOLON       reduce using rule 62 (factor -> cte .)
    TO              reduce using rule 62 (factor -> cte .)


state 104

    (63) factor -> ID . LEFT_PAR dec_var RIGHT_PAR
    (64) factor -> ID . LEFT_PAR RIGHT_PAR
    (118) cte -> ID . factor_push_operand
    (122) factor_push_operand -> .

    LEFT_PAR        shift and go to state 140
    MULTIPLY        reduce using rule 122 (factor_push_operand -> .)
    DIVIDE          reduce using rule 122 (factor_push_operand -> .)
    PLUS            reduce using rule 122 (factor_push_operand -> .)
    MINUS           reduce using rule 122 (factor_push_operand -> .)
    LESS_THAN       reduce using rule 122 (factor_push_operand -> .)
    GREATER_THAN    reduce using rule 122 (factor_push_operand -> .)
    DIFFERENT       reduce using rule 122 (factor_push_operand -> .)
    EQUAL           reduce using rule 122 (factor_push_operand -> .)
    GREATER_EQUAL   reduce using rule 122 (factor_push_operand -> .)
    LESS_EQUAL      reduce using rule 122 (factor_push_operand -> .)
    AND             reduce using rule 122 (factor_push_operand -> .)
    OR              reduce using rule 122 (factor_push_operand -> .)
    RIGHT_PAR       reduce using rule 122 (factor_push_operand -> .)
    COMMA           reduce using rule 122 (factor_push_operand -> .)
    SEMICOLON       reduce using rule 122 (factor_push_operand -> .)
    TO              reduce using rule 122 (factor_push_operand -> .)

    factor_push_operand            shift and go to state 141

state 105

    (119) cte -> CTE_I . factor_int_push
    (1) cte_f -> CTE_I . DOT CTE_I
    (124) factor_int_push -> .

    DOT             shift and go to state 143
    MULTIPLY        reduce using rule 124 (factor_int_push -> .)
    DIVIDE          reduce using rule 124 (factor_int_push -> .)
    PLUS            reduce using rule 124 (factor_int_push -> .)
    MINUS           reduce using rule 124 (factor_int_push -> .)
    LESS_THAN       reduce using rule 124 (factor_int_push -> .)
    GREATER_THAN    reduce using rule 124 (factor_int_push -> .)
    DIFFERENT       reduce using rule 124 (factor_int_push -> .)
    EQUAL           reduce using rule 124 (factor_int_push -> .)
    GREATER_EQUAL   reduce using rule 124 (factor_int_push -> .)
    LESS_EQUAL      reduce using rule 124 (factor_int_push -> .)
    AND             reduce using rule 124 (factor_int_push -> .)
    OR              reduce using rule 124 (factor_int_push -> .)
    RIGHT_PAR       reduce using rule 124 (factor_int_push -> .)
    COMMA           reduce using rule 124 (factor_int_push -> .)
    SEMICOLON       reduce using rule 124 (factor_int_push -> .)
    TO              reduce using rule 124 (factor_int_push -> .)

    factor_int_push                shift and go to state 142

state 106

    (120) cte -> cte_f . factor_float_push
    (123) factor_float_push -> .

    MULTIPLY        reduce using rule 123 (factor_float_push -> .)
    DIVIDE          reduce using rule 123 (factor_float_push -> .)
    PLUS            reduce using rule 123 (factor_float_push -> .)
    MINUS           reduce using rule 123 (factor_float_push -> .)
    LESS_THAN       reduce using rule 123 (factor_float_push -> .)
    GREATER_THAN    reduce using rule 123 (factor_float_push -> .)
    DIFFERENT       reduce using rule 123 (factor_float_push -> .)
    EQUAL           reduce using rule 123 (factor_float_push -> .)
    GREATER_EQUAL   reduce using rule 123 (factor_float_push -> .)
    LESS_EQUAL      reduce using rule 123 (factor_float_push -> .)
    AND             reduce using rule 123 (factor_float_push -> .)
    OR              reduce using rule 123 (factor_float_push -> .)
    RIGHT_PAR       reduce using rule 123 (factor_float_push -> .)
    COMMA           reduce using rule 123 (factor_float_push -> .)
    SEMICOLON       reduce using rule 123 (factor_float_push -> .)
    TO              reduce using rule 123 (factor_float_push -> .)

    factor_float_push              shift and go to state 144

state 107

    (121) cte -> CTE_CHAR . factor_char_push
    (125) factor_char_push -> .

    MULTIPLY        reduce using rule 125 (factor_char_push -> .)
    DIVIDE          reduce using rule 125 (factor_char_push -> .)
    PLUS            reduce using rule 125 (factor_char_push -> .)
    MINUS           reduce using rule 125 (factor_char_push -> .)
    LESS_THAN       reduce using rule 125 (factor_char_push -> .)
    GREATER_THAN    reduce using rule 125 (factor_char_push -> .)
    DIFFERENT       reduce using rule 125 (factor_char_push -> .)
    EQUAL           reduce using rule 125 (factor_char_push -> .)
    GREATER_EQUAL   reduce using rule 125 (factor_char_push -> .)
    LESS_EQUAL      reduce using rule 125 (factor_char_push -> .)
    AND             reduce using rule 125 (factor_char_push -> .)
    OR              reduce using rule 125 (factor_char_push -> .)
    RIGHT_PAR       reduce using rule 125 (factor_char_push -> .)
    COMMA           reduce using rule 125 (factor_char_push -> .)
    SEMICOLON       reduce using rule 125 (factor_char_push -> .)
    TO              reduce using rule 125 (factor_char_push -> .)

    factor_char_push               shift and go to state 145

state 108

    (114) condicional -> WHILE punto_while LEFT_PAR . exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (36) exp_or -> . t_exp punto_pop_or t_exp_or_aux
    (37) exp_or -> . t_exp punto_pop_or
    (41) t_exp -> . g_exp pop_and t_exp_aux
    (42) t_exp -> . g_exp pop_and
    (46) g_exp -> . m_exp
    (47) g_exp -> . m_exp relacionales punto_relacionales m_exp punto_pop_relacional
    (50) m_exp -> . termino punto_mexp_pop
    (51) m_exp -> . termino punto_mexp_pop m_exp_aux
    (56) termino -> . factor punto_termino_pop
    (57) termino -> . factor punto_termino_pop termino_aux
    (62) factor -> . cte
    (63) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (64) factor -> . ID LEFT_PAR RIGHT_PAR
    (65) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (118) cte -> . ID factor_push_operand
    (119) cte -> . CTE_I factor_int_push
    (120) cte -> . cte_f factor_float_push
    (121) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 104
    LEFT_PAR        shift and go to state 96
    CTE_I           shift and go to state 105
    CTE_CHAR        shift and go to state 107

    exp_or                         shift and go to state 146
    t_exp                          shift and go to state 98
    g_exp                          shift and go to state 99
    m_exp                          shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    cte                            shift and go to state 103
    cte_f                          shift and go to state 106

state 109

    (109) no_condicional -> FOR LEFT_PAR dec_varaux . punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for
    (110) punto_for -> .

    EQUALS          reduce using rule 110 (punto_for -> .)

    punto_for                      shift and go to state 147

state 110

    (14) variables_aux -> tipo COLON declaracion_inicial MORE variables_aux .

    SEMICOLON       reduce using rule 14 (variables_aux -> tipo COLON declaracion_inicial MORE variables_aux .)


state 111

    (18) declaracion_inicial -> dec_varaux punto_dec_var_1 COMMA . declaracion_inicial
    (18) declaracion_inicial -> . dec_varaux punto_dec_var_1 COMMA declaracion_inicial
    (19) declaracion_inicial -> . dec_varaux punto_dec_var_1
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    ID              shift and go to state 49

    dec_varaux                     shift and go to state 58
    declaracion_inicial            shift and go to state 148

state 112

    (29) funciones_aux -> tipo FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL . variables estatutos RIGHT_CURL
    (10) variables -> . VAR punto_variables_1 SEMICOLON
    (11) variables -> . VAR punto_variables_1 variables_aux SEMICOLON

    VAR             shift and go to state 10

    variables                      shift and go to state 149

state 113

    (30) funciones_aux -> tipo FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables . estatutos RIGHT_CURL
    (72) estatutos -> . estatutos_main_aux
    (73) estatutos -> . retorno SEMICOLON
    (82) estatutos_main_aux -> . estatutos_main estatutos
    (83) estatutos_main_aux -> . estatutos_main
    (90) retorno -> . RETURN LEFT_PAR m_exp RIGHT_PAR
    (74) estatutos_main -> . asignacion SEMICOLON
    (75) estatutos_main -> . llamada SEMICOLON
    (76) estatutos_main -> . lectura SEMICOLON
    (77) estatutos_main -> . escritura SEMICOLON
    (78) estatutos_main -> . decision SEMICOLON
    (79) estatutos_main -> . repeticion SEMICOLON
    (84) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (88) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (89) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (92) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (97) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (105) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL
    (106) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL
    (107) repeticion -> . condicional
    (108) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (114) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (109) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RETURN          shift and go to state 154
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    estatutos                      shift and go to state 150
    estatutos_main_aux             shift and go to state 151
    retorno                        shift and go to state 152
    estatutos_main                 shift and go to state 153
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 114

    (33) parametros -> dec_var_param COMMA parametros .

    RIGHT_PAR       reduce using rule 33 (parametros -> dec_var_param COMMA parametros .)


state 115

    (31) funciones_aux -> VOID FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables . estatutos RIGHT_CURL
    (72) estatutos -> . estatutos_main_aux
    (73) estatutos -> . retorno SEMICOLON
    (82) estatutos_main_aux -> . estatutos_main estatutos
    (83) estatutos_main_aux -> . estatutos_main
    (90) retorno -> . RETURN LEFT_PAR m_exp RIGHT_PAR
    (74) estatutos_main -> . asignacion SEMICOLON
    (75) estatutos_main -> . llamada SEMICOLON
    (76) estatutos_main -> . lectura SEMICOLON
    (77) estatutos_main -> . escritura SEMICOLON
    (78) estatutos_main -> . decision SEMICOLON
    (79) estatutos_main -> . repeticion SEMICOLON
    (84) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (88) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (89) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (92) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (97) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (105) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL
    (106) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL
    (107) repeticion -> . condicional
    (108) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (114) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (109) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RETURN          shift and go to state 154
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    estatutos                      shift and go to state 155
    estatutos_main_aux             shift and go to state 151
    retorno                        shift and go to state 152
    estatutos_main                 shift and go to state 153
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 116

    (32) funciones_aux -> VOID FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL . variables estatutos RIGHT_CURL
    (10) variables -> . VAR punto_variables_1 SEMICOLON
    (11) variables -> . VAR punto_variables_1 variables_aux SEMICOLON

    VAR             shift and go to state 10

    variables                      shift and go to state 156

state 117

    (84) asignacion -> dec_varaux punto_asignacion_var EQUALS punto_igual . m_exp punto_asignacion
    (50) m_exp -> . termino punto_mexp_pop
    (51) m_exp -> . termino punto_mexp_pop m_exp_aux
    (56) termino -> . factor punto_termino_pop
    (57) termino -> . factor punto_termino_pop termino_aux
    (62) factor -> . cte
    (63) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (64) factor -> . ID LEFT_PAR RIGHT_PAR
    (65) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (118) cte -> . ID factor_push_operand
    (119) cte -> . CTE_I factor_int_push
    (120) cte -> . cte_f factor_float_push
    (121) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 104
    LEFT_PAR        shift and go to state 96
    CTE_I           shift and go to state 105
    CTE_CHAR        shift and go to state 107

    m_exp                          shift and go to state 157
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    cte                            shift and go to state 103
    cte_f                          shift and go to state 106

state 118

    (88) llamada -> VD ID LEFT_PAR RIGHT_PAR .

    SEMICOLON       reduce using rule 88 (llamada -> VD ID LEFT_PAR RIGHT_PAR .)


state 119

    (89) llamada -> VD ID LEFT_PAR dec_var . RIGHT_PAR

    RIGHT_PAR       shift and go to state 158


state 120

    (25) dec_var -> dec_varaux . COMMA dec_var
    (26) dec_var -> dec_varaux .

    COMMA           shift and go to state 159
    RIGHT_PAR       reduce using rule 26 (dec_var -> dec_varaux .)


state 121

    (22) dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR .
    (23) dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR . LEFT_BR CTE_I RIGHT_BR

    EQUALS          reduce using rule 22 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR .)
    COMMA           reduce using rule 22 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR .)
    MORE            reduce using rule 22 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR .)
    SEMICOLON       reduce using rule 22 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR .)
    RIGHT_PAR       reduce using rule 22 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR .)
    LEFT_BR         shift and go to state 160


state 122

    (92) lectura -> READ LEFT_PAR lectura_var RIGHT_PAR .

    SEMICOLON       reduce using rule 92 (lectura -> READ LEFT_PAR lectura_var RIGHT_PAR .)


state 123

    (93) lectura_var -> punto_read_stack dec_varaux . punto_push_dec_var punto_add_read_operand COMMA lectura_var
    (94) lectura_var -> punto_read_stack dec_varaux . punto_push_dec_var punto_add_read_operand
    (95) punto_push_dec_var -> .

    COMMA           reduce using rule 95 (punto_push_dec_var -> .)
    RIGHT_PAR       reduce using rule 95 (punto_push_dec_var -> .)

    punto_push_dec_var             shift and go to state 161

state 124

    (97) escritura -> WRITE LEFT_PAR escritura_aux RIGHT_PAR .

    SEMICOLON       reduce using rule 97 (escritura -> WRITE LEFT_PAR escritura_aux RIGHT_PAR .)


state 125

    (98) escritura_aux -> punto_write_stack STR . punto_escritura_push punto_add_write_operand
    (100) escritura_aux -> punto_write_stack STR . punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (102) punto_escritura_push -> .

    COMMA           reduce using rule 102 (punto_escritura_push -> .)
    RIGHT_PAR       reduce using rule 102 (punto_escritura_push -> .)

    punto_escritura_push           shift and go to state 162

state 126

    (99) escritura_aux -> punto_write_stack m_exp . punto_escritura_push punto_add_write_operand
    (101) escritura_aux -> punto_write_stack m_exp . punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (102) punto_escritura_push -> .

    COMMA           reduce using rule 102 (punto_escritura_push -> .)
    RIGHT_PAR       reduce using rule 102 (punto_escritura_push -> .)

    punto_escritura_push           shift and go to state 163

state 127

    (65) factor -> LEFT_PAR exp_or . RIGHT_PAR

    RIGHT_PAR       shift and go to state 164


state 128

    (105) decision -> IF LEFT_PAR exp_or RIGHT_PAR . THEN LEFT_CURL estatutos RIGHT_CURL
    (106) decision -> IF LEFT_PAR exp_or RIGHT_PAR . THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL

    THEN            shift and go to state 165


state 129

    (36) exp_or -> t_exp punto_pop_or . t_exp_or_aux
    (37) exp_or -> t_exp punto_pop_or .
    (39) t_exp_or_aux -> . OR punto_push_or exp_or

    RIGHT_PAR       reduce using rule 37 (exp_or -> t_exp punto_pop_or .)
    OR              shift and go to state 167

    t_exp_or_aux                   shift and go to state 166

state 130

    (41) t_exp -> g_exp pop_and . t_exp_aux
    (42) t_exp -> g_exp pop_and .
    (44) t_exp_aux -> . AND punto_push_and t_exp

    OR              reduce using rule 42 (t_exp -> g_exp pop_and .)
    RIGHT_PAR       reduce using rule 42 (t_exp -> g_exp pop_and .)
    AND             shift and go to state 169

    t_exp_aux                      shift and go to state 168

state 131

    (47) g_exp -> m_exp relacionales . punto_relacionales m_exp punto_pop_relacional
    (48) punto_relacionales -> .

    ID              reduce using rule 48 (punto_relacionales -> .)
    LEFT_PAR        reduce using rule 48 (punto_relacionales -> .)
    CTE_I           reduce using rule 48 (punto_relacionales -> .)
    CTE_CHAR        reduce using rule 48 (punto_relacionales -> .)

    punto_relacionales             shift and go to state 170

state 132

    (66) relacionales -> LESS_THAN .

    ID              reduce using rule 66 (relacionales -> LESS_THAN .)
    LEFT_PAR        reduce using rule 66 (relacionales -> LESS_THAN .)
    CTE_I           reduce using rule 66 (relacionales -> LESS_THAN .)
    CTE_CHAR        reduce using rule 66 (relacionales -> LESS_THAN .)


state 133

    (67) relacionales -> GREATER_THAN .

    ID              reduce using rule 67 (relacionales -> GREATER_THAN .)
    LEFT_PAR        reduce using rule 67 (relacionales -> GREATER_THAN .)
    CTE_I           reduce using rule 67 (relacionales -> GREATER_THAN .)
    CTE_CHAR        reduce using rule 67 (relacionales -> GREATER_THAN .)


state 134

    (68) relacionales -> DIFFERENT .

    ID              reduce using rule 68 (relacionales -> DIFFERENT .)
    LEFT_PAR        reduce using rule 68 (relacionales -> DIFFERENT .)
    CTE_I           reduce using rule 68 (relacionales -> DIFFERENT .)
    CTE_CHAR        reduce using rule 68 (relacionales -> DIFFERENT .)


state 135

    (69) relacionales -> EQUAL .

    ID              reduce using rule 69 (relacionales -> EQUAL .)
    LEFT_PAR        reduce using rule 69 (relacionales -> EQUAL .)
    CTE_I           reduce using rule 69 (relacionales -> EQUAL .)
    CTE_CHAR        reduce using rule 69 (relacionales -> EQUAL .)


state 136

    (70) relacionales -> GREATER_EQUAL .

    ID              reduce using rule 70 (relacionales -> GREATER_EQUAL .)
    LEFT_PAR        reduce using rule 70 (relacionales -> GREATER_EQUAL .)
    CTE_I           reduce using rule 70 (relacionales -> GREATER_EQUAL .)
    CTE_CHAR        reduce using rule 70 (relacionales -> GREATER_EQUAL .)


state 137

    (71) relacionales -> LESS_EQUAL .

    ID              reduce using rule 71 (relacionales -> LESS_EQUAL .)
    LEFT_PAR        reduce using rule 71 (relacionales -> LESS_EQUAL .)
    CTE_I           reduce using rule 71 (relacionales -> LESS_EQUAL .)
    CTE_CHAR        reduce using rule 71 (relacionales -> LESS_EQUAL .)


state 138

    (50) m_exp -> termino punto_mexp_pop .
    (51) m_exp -> termino punto_mexp_pop . m_exp_aux
    (53) m_exp_aux -> . PLUS punto_m_exp_push m_exp
    (54) m_exp_aux -> . MINUS punto_m_exp_push m_exp

    LESS_THAN       reduce using rule 50 (m_exp -> termino punto_mexp_pop .)
    GREATER_THAN    reduce using rule 50 (m_exp -> termino punto_mexp_pop .)
    DIFFERENT       reduce using rule 50 (m_exp -> termino punto_mexp_pop .)
    EQUAL           reduce using rule 50 (m_exp -> termino punto_mexp_pop .)
    GREATER_EQUAL   reduce using rule 50 (m_exp -> termino punto_mexp_pop .)
    LESS_EQUAL      reduce using rule 50 (m_exp -> termino punto_mexp_pop .)
    AND             reduce using rule 50 (m_exp -> termino punto_mexp_pop .)
    OR              reduce using rule 50 (m_exp -> termino punto_mexp_pop .)
    RIGHT_PAR       reduce using rule 50 (m_exp -> termino punto_mexp_pop .)
    COMMA           reduce using rule 50 (m_exp -> termino punto_mexp_pop .)
    SEMICOLON       reduce using rule 50 (m_exp -> termino punto_mexp_pop .)
    TO              reduce using rule 50 (m_exp -> termino punto_mexp_pop .)
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173

    m_exp_aux                      shift and go to state 171

state 139

    (56) termino -> factor punto_termino_pop .
    (57) termino -> factor punto_termino_pop . termino_aux
    (59) termino_aux -> . MULTIPLY punto_termino_aux termino
    (60) termino_aux -> . DIVIDE punto_termino_aux termino

    PLUS            reduce using rule 56 (termino -> factor punto_termino_pop .)
    MINUS           reduce using rule 56 (termino -> factor punto_termino_pop .)
    LESS_THAN       reduce using rule 56 (termino -> factor punto_termino_pop .)
    GREATER_THAN    reduce using rule 56 (termino -> factor punto_termino_pop .)
    DIFFERENT       reduce using rule 56 (termino -> factor punto_termino_pop .)
    EQUAL           reduce using rule 56 (termino -> factor punto_termino_pop .)
    GREATER_EQUAL   reduce using rule 56 (termino -> factor punto_termino_pop .)
    LESS_EQUAL      reduce using rule 56 (termino -> factor punto_termino_pop .)
    AND             reduce using rule 56 (termino -> factor punto_termino_pop .)
    OR              reduce using rule 56 (termino -> factor punto_termino_pop .)
    RIGHT_PAR       reduce using rule 56 (termino -> factor punto_termino_pop .)
    COMMA           reduce using rule 56 (termino -> factor punto_termino_pop .)
    SEMICOLON       reduce using rule 56 (termino -> factor punto_termino_pop .)
    TO              reduce using rule 56 (termino -> factor punto_termino_pop .)
    MULTIPLY        shift and go to state 175
    DIVIDE          shift and go to state 176

    termino_aux                    shift and go to state 174

state 140

    (63) factor -> ID LEFT_PAR . dec_var RIGHT_PAR
    (64) factor -> ID LEFT_PAR . RIGHT_PAR
    (25) dec_var -> . dec_varaux COMMA dec_var
    (26) dec_var -> . dec_varaux
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    RIGHT_PAR       shift and go to state 178
    ID              shift and go to state 49

    dec_var                        shift and go to state 177
    dec_varaux                     shift and go to state 120

state 141

    (118) cte -> ID factor_push_operand .

    MULTIPLY        reduce using rule 118 (cte -> ID factor_push_operand .)
    DIVIDE          reduce using rule 118 (cte -> ID factor_push_operand .)
    PLUS            reduce using rule 118 (cte -> ID factor_push_operand .)
    MINUS           reduce using rule 118 (cte -> ID factor_push_operand .)
    LESS_THAN       reduce using rule 118 (cte -> ID factor_push_operand .)
    GREATER_THAN    reduce using rule 118 (cte -> ID factor_push_operand .)
    DIFFERENT       reduce using rule 118 (cte -> ID factor_push_operand .)
    EQUAL           reduce using rule 118 (cte -> ID factor_push_operand .)
    GREATER_EQUAL   reduce using rule 118 (cte -> ID factor_push_operand .)
    LESS_EQUAL      reduce using rule 118 (cte -> ID factor_push_operand .)
    AND             reduce using rule 118 (cte -> ID factor_push_operand .)
    OR              reduce using rule 118 (cte -> ID factor_push_operand .)
    RIGHT_PAR       reduce using rule 118 (cte -> ID factor_push_operand .)
    COMMA           reduce using rule 118 (cte -> ID factor_push_operand .)
    SEMICOLON       reduce using rule 118 (cte -> ID factor_push_operand .)
    TO              reduce using rule 118 (cte -> ID factor_push_operand .)


state 142

    (119) cte -> CTE_I factor_int_push .

    MULTIPLY        reduce using rule 119 (cte -> CTE_I factor_int_push .)
    DIVIDE          reduce using rule 119 (cte -> CTE_I factor_int_push .)
    PLUS            reduce using rule 119 (cte -> CTE_I factor_int_push .)
    MINUS           reduce using rule 119 (cte -> CTE_I factor_int_push .)
    LESS_THAN       reduce using rule 119 (cte -> CTE_I factor_int_push .)
    GREATER_THAN    reduce using rule 119 (cte -> CTE_I factor_int_push .)
    DIFFERENT       reduce using rule 119 (cte -> CTE_I factor_int_push .)
    EQUAL           reduce using rule 119 (cte -> CTE_I factor_int_push .)
    GREATER_EQUAL   reduce using rule 119 (cte -> CTE_I factor_int_push .)
    LESS_EQUAL      reduce using rule 119 (cte -> CTE_I factor_int_push .)
    AND             reduce using rule 119 (cte -> CTE_I factor_int_push .)
    OR              reduce using rule 119 (cte -> CTE_I factor_int_push .)
    RIGHT_PAR       reduce using rule 119 (cte -> CTE_I factor_int_push .)
    COMMA           reduce using rule 119 (cte -> CTE_I factor_int_push .)
    SEMICOLON       reduce using rule 119 (cte -> CTE_I factor_int_push .)
    TO              reduce using rule 119 (cte -> CTE_I factor_int_push .)


state 143

    (1) cte_f -> CTE_I DOT . CTE_I

    CTE_I           shift and go to state 179


state 144

    (120) cte -> cte_f factor_float_push .

    MULTIPLY        reduce using rule 120 (cte -> cte_f factor_float_push .)
    DIVIDE          reduce using rule 120 (cte -> cte_f factor_float_push .)
    PLUS            reduce using rule 120 (cte -> cte_f factor_float_push .)
    MINUS           reduce using rule 120 (cte -> cte_f factor_float_push .)
    LESS_THAN       reduce using rule 120 (cte -> cte_f factor_float_push .)
    GREATER_THAN    reduce using rule 120 (cte -> cte_f factor_float_push .)
    DIFFERENT       reduce using rule 120 (cte -> cte_f factor_float_push .)
    EQUAL           reduce using rule 120 (cte -> cte_f factor_float_push .)
    GREATER_EQUAL   reduce using rule 120 (cte -> cte_f factor_float_push .)
    LESS_EQUAL      reduce using rule 120 (cte -> cte_f factor_float_push .)
    AND             reduce using rule 120 (cte -> cte_f factor_float_push .)
    OR              reduce using rule 120 (cte -> cte_f factor_float_push .)
    RIGHT_PAR       reduce using rule 120 (cte -> cte_f factor_float_push .)
    COMMA           reduce using rule 120 (cte -> cte_f factor_float_push .)
    SEMICOLON       reduce using rule 120 (cte -> cte_f factor_float_push .)
    TO              reduce using rule 120 (cte -> cte_f factor_float_push .)


state 145

    (121) cte -> CTE_CHAR factor_char_push .

    MULTIPLY        reduce using rule 121 (cte -> CTE_CHAR factor_char_push .)
    DIVIDE          reduce using rule 121 (cte -> CTE_CHAR factor_char_push .)
    PLUS            reduce using rule 121 (cte -> CTE_CHAR factor_char_push .)
    MINUS           reduce using rule 121 (cte -> CTE_CHAR factor_char_push .)
    LESS_THAN       reduce using rule 121 (cte -> CTE_CHAR factor_char_push .)
    GREATER_THAN    reduce using rule 121 (cte -> CTE_CHAR factor_char_push .)
    DIFFERENT       reduce using rule 121 (cte -> CTE_CHAR factor_char_push .)
    EQUAL           reduce using rule 121 (cte -> CTE_CHAR factor_char_push .)
    GREATER_EQUAL   reduce using rule 121 (cte -> CTE_CHAR factor_char_push .)
    LESS_EQUAL      reduce using rule 121 (cte -> CTE_CHAR factor_char_push .)
    AND             reduce using rule 121 (cte -> CTE_CHAR factor_char_push .)
    OR              reduce using rule 121 (cte -> CTE_CHAR factor_char_push .)
    RIGHT_PAR       reduce using rule 121 (cte -> CTE_CHAR factor_char_push .)
    COMMA           reduce using rule 121 (cte -> CTE_CHAR factor_char_push .)
    SEMICOLON       reduce using rule 121 (cte -> CTE_CHAR factor_char_push .)
    TO              reduce using rule 121 (cte -> CTE_CHAR factor_char_push .)


state 146

    (114) condicional -> WHILE punto_while LEFT_PAR exp_or . RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while

    RIGHT_PAR       shift and go to state 180


state 147

    (109) no_condicional -> FOR LEFT_PAR dec_varaux punto_for . EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for

    EQUALS          shift and go to state 181


state 148

    (18) declaracion_inicial -> dec_varaux punto_dec_var_1 COMMA declaracion_inicial .

    MORE            reduce using rule 18 (declaracion_inicial -> dec_varaux punto_dec_var_1 COMMA declaracion_inicial .)
    SEMICOLON       reduce using rule 18 (declaracion_inicial -> dec_varaux punto_dec_var_1 COMMA declaracion_inicial .)


state 149

    (29) funciones_aux -> tipo FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables . estatutos RIGHT_CURL
    (72) estatutos -> . estatutos_main_aux
    (73) estatutos -> . retorno SEMICOLON
    (82) estatutos_main_aux -> . estatutos_main estatutos
    (83) estatutos_main_aux -> . estatutos_main
    (90) retorno -> . RETURN LEFT_PAR m_exp RIGHT_PAR
    (74) estatutos_main -> . asignacion SEMICOLON
    (75) estatutos_main -> . llamada SEMICOLON
    (76) estatutos_main -> . lectura SEMICOLON
    (77) estatutos_main -> . escritura SEMICOLON
    (78) estatutos_main -> . decision SEMICOLON
    (79) estatutos_main -> . repeticion SEMICOLON
    (84) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (88) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (89) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (92) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (97) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (105) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL
    (106) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL
    (107) repeticion -> . condicional
    (108) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (114) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (109) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RETURN          shift and go to state 154
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    estatutos                      shift and go to state 182
    estatutos_main_aux             shift and go to state 151
    retorno                        shift and go to state 152
    estatutos_main                 shift and go to state 153
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 150

    (30) funciones_aux -> tipo FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos . RIGHT_CURL

    RIGHT_CURL      shift and go to state 183


state 151

    (72) estatutos -> estatutos_main_aux .

    RIGHT_CURL      reduce using rule 72 (estatutos -> estatutos_main_aux .)


state 152

    (73) estatutos -> retorno . SEMICOLON

    SEMICOLON       shift and go to state 184


state 153

    (82) estatutos_main_aux -> estatutos_main . estatutos
    (83) estatutos_main_aux -> estatutos_main .
    (72) estatutos -> . estatutos_main_aux
    (73) estatutos -> . retorno SEMICOLON
    (82) estatutos_main_aux -> . estatutos_main estatutos
    (83) estatutos_main_aux -> . estatutos_main
    (90) retorno -> . RETURN LEFT_PAR m_exp RIGHT_PAR
    (74) estatutos_main -> . asignacion SEMICOLON
    (75) estatutos_main -> . llamada SEMICOLON
    (76) estatutos_main -> . lectura SEMICOLON
    (77) estatutos_main -> . escritura SEMICOLON
    (78) estatutos_main -> . decision SEMICOLON
    (79) estatutos_main -> . repeticion SEMICOLON
    (84) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (88) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (89) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (92) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (97) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (105) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL
    (106) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL
    (107) repeticion -> . condicional
    (108) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (114) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (109) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RIGHT_CURL      reduce using rule 83 (estatutos_main_aux -> estatutos_main .)
    RETURN          shift and go to state 154
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    estatutos_main                 shift and go to state 153
    estatutos                      shift and go to state 185
    estatutos_main_aux             shift and go to state 151
    retorno                        shift and go to state 152
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 154

    (90) retorno -> RETURN . LEFT_PAR m_exp RIGHT_PAR

    LEFT_PAR        shift and go to state 186


state 155

    (31) funciones_aux -> VOID FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos . RIGHT_CURL

    RIGHT_CURL      shift and go to state 187


state 156

    (32) funciones_aux -> VOID FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables . estatutos RIGHT_CURL
    (72) estatutos -> . estatutos_main_aux
    (73) estatutos -> . retorno SEMICOLON
    (82) estatutos_main_aux -> . estatutos_main estatutos
    (83) estatutos_main_aux -> . estatutos_main
    (90) retorno -> . RETURN LEFT_PAR m_exp RIGHT_PAR
    (74) estatutos_main -> . asignacion SEMICOLON
    (75) estatutos_main -> . llamada SEMICOLON
    (76) estatutos_main -> . lectura SEMICOLON
    (77) estatutos_main -> . escritura SEMICOLON
    (78) estatutos_main -> . decision SEMICOLON
    (79) estatutos_main -> . repeticion SEMICOLON
    (84) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (88) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (89) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (92) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (97) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (105) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL
    (106) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL
    (107) repeticion -> . condicional
    (108) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (114) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (109) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RETURN          shift and go to state 154
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    estatutos                      shift and go to state 188
    estatutos_main_aux             shift and go to state 151
    retorno                        shift and go to state 152
    estatutos_main                 shift and go to state 153
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 157

    (84) asignacion -> dec_varaux punto_asignacion_var EQUALS punto_igual m_exp . punto_asignacion
    (87) punto_asignacion -> .

    SEMICOLON       reduce using rule 87 (punto_asignacion -> .)

    punto_asignacion               shift and go to state 189

state 158

    (89) llamada -> VD ID LEFT_PAR dec_var RIGHT_PAR .

    SEMICOLON       reduce using rule 89 (llamada -> VD ID LEFT_PAR dec_var RIGHT_PAR .)


state 159

    (25) dec_var -> dec_varaux COMMA . dec_var
    (25) dec_var -> . dec_varaux COMMA dec_var
    (26) dec_var -> . dec_varaux
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR

    ID              shift and go to state 49

    dec_varaux                     shift and go to state 120
    dec_var                        shift and go to state 190

state 160

    (23) dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR . CTE_I RIGHT_BR

    CTE_I           shift and go to state 191


state 161

    (93) lectura_var -> punto_read_stack dec_varaux punto_push_dec_var . punto_add_read_operand COMMA lectura_var
    (94) lectura_var -> punto_read_stack dec_varaux punto_push_dec_var . punto_add_read_operand
    (96) punto_add_read_operand -> .

    COMMA           reduce using rule 96 (punto_add_read_operand -> .)
    RIGHT_PAR       reduce using rule 96 (punto_add_read_operand -> .)

    punto_add_read_operand         shift and go to state 192

state 162

    (98) escritura_aux -> punto_write_stack STR punto_escritura_push . punto_add_write_operand
    (100) escritura_aux -> punto_write_stack STR punto_escritura_push . punto_add_write_operand COMMA escritura_aux
    (104) punto_add_write_operand -> .

    COMMA           reduce using rule 104 (punto_add_write_operand -> .)
    RIGHT_PAR       reduce using rule 104 (punto_add_write_operand -> .)

    punto_add_write_operand        shift and go to state 193

state 163

    (99) escritura_aux -> punto_write_stack m_exp punto_escritura_push . punto_add_write_operand
    (101) escritura_aux -> punto_write_stack m_exp punto_escritura_push . punto_add_write_operand COMMA escritura_aux
    (104) punto_add_write_operand -> .

    COMMA           reduce using rule 104 (punto_add_write_operand -> .)
    RIGHT_PAR       reduce using rule 104 (punto_add_write_operand -> .)

    punto_add_write_operand        shift and go to state 194

state 164

    (65) factor -> LEFT_PAR exp_or RIGHT_PAR .

    MULTIPLY        reduce using rule 65 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    DIVIDE          reduce using rule 65 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    PLUS            reduce using rule 65 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    MINUS           reduce using rule 65 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    LESS_THAN       reduce using rule 65 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    GREATER_THAN    reduce using rule 65 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    DIFFERENT       reduce using rule 65 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    EQUAL           reduce using rule 65 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    GREATER_EQUAL   reduce using rule 65 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    LESS_EQUAL      reduce using rule 65 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    AND             reduce using rule 65 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    OR              reduce using rule 65 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    RIGHT_PAR       reduce using rule 65 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    COMMA           reduce using rule 65 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    SEMICOLON       reduce using rule 65 (factor -> LEFT_PAR exp_or RIGHT_PAR .)
    TO              reduce using rule 65 (factor -> LEFT_PAR exp_or RIGHT_PAR .)


state 165

    (105) decision -> IF LEFT_PAR exp_or RIGHT_PAR THEN . LEFT_CURL estatutos RIGHT_CURL
    (106) decision -> IF LEFT_PAR exp_or RIGHT_PAR THEN . LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL

    LEFT_CURL       shift and go to state 195


state 166

    (36) exp_or -> t_exp punto_pop_or t_exp_or_aux .

    RIGHT_PAR       reduce using rule 36 (exp_or -> t_exp punto_pop_or t_exp_or_aux .)


state 167

    (39) t_exp_or_aux -> OR . punto_push_or exp_or
    (40) punto_push_or -> .

    ID              reduce using rule 40 (punto_push_or -> .)
    LEFT_PAR        reduce using rule 40 (punto_push_or -> .)
    CTE_I           reduce using rule 40 (punto_push_or -> .)
    CTE_CHAR        reduce using rule 40 (punto_push_or -> .)

    punto_push_or                  shift and go to state 196

state 168

    (41) t_exp -> g_exp pop_and t_exp_aux .

    OR              reduce using rule 41 (t_exp -> g_exp pop_and t_exp_aux .)
    RIGHT_PAR       reduce using rule 41 (t_exp -> g_exp pop_and t_exp_aux .)


state 169

    (44) t_exp_aux -> AND . punto_push_and t_exp
    (45) punto_push_and -> .

    ID              reduce using rule 45 (punto_push_and -> .)
    LEFT_PAR        reduce using rule 45 (punto_push_and -> .)
    CTE_I           reduce using rule 45 (punto_push_and -> .)
    CTE_CHAR        reduce using rule 45 (punto_push_and -> .)

    punto_push_and                 shift and go to state 197

state 170

    (47) g_exp -> m_exp relacionales punto_relacionales . m_exp punto_pop_relacional
    (50) m_exp -> . termino punto_mexp_pop
    (51) m_exp -> . termino punto_mexp_pop m_exp_aux
    (56) termino -> . factor punto_termino_pop
    (57) termino -> . factor punto_termino_pop termino_aux
    (62) factor -> . cte
    (63) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (64) factor -> . ID LEFT_PAR RIGHT_PAR
    (65) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (118) cte -> . ID factor_push_operand
    (119) cte -> . CTE_I factor_int_push
    (120) cte -> . cte_f factor_float_push
    (121) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 104
    LEFT_PAR        shift and go to state 96
    CTE_I           shift and go to state 105
    CTE_CHAR        shift and go to state 107

    m_exp                          shift and go to state 198
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    cte                            shift and go to state 103
    cte_f                          shift and go to state 106

state 171

    (51) m_exp -> termino punto_mexp_pop m_exp_aux .

    LESS_THAN       reduce using rule 51 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    GREATER_THAN    reduce using rule 51 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    DIFFERENT       reduce using rule 51 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    EQUAL           reduce using rule 51 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    GREATER_EQUAL   reduce using rule 51 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    LESS_EQUAL      reduce using rule 51 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    AND             reduce using rule 51 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    OR              reduce using rule 51 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    RIGHT_PAR       reduce using rule 51 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    COMMA           reduce using rule 51 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    SEMICOLON       reduce using rule 51 (m_exp -> termino punto_mexp_pop m_exp_aux .)
    TO              reduce using rule 51 (m_exp -> termino punto_mexp_pop m_exp_aux .)


state 172

    (53) m_exp_aux -> PLUS . punto_m_exp_push m_exp
    (55) punto_m_exp_push -> .

    ID              reduce using rule 55 (punto_m_exp_push -> .)
    LEFT_PAR        reduce using rule 55 (punto_m_exp_push -> .)
    CTE_I           reduce using rule 55 (punto_m_exp_push -> .)
    CTE_CHAR        reduce using rule 55 (punto_m_exp_push -> .)

    punto_m_exp_push               shift and go to state 199

state 173

    (54) m_exp_aux -> MINUS . punto_m_exp_push m_exp
    (55) punto_m_exp_push -> .

    ID              reduce using rule 55 (punto_m_exp_push -> .)
    LEFT_PAR        reduce using rule 55 (punto_m_exp_push -> .)
    CTE_I           reduce using rule 55 (punto_m_exp_push -> .)
    CTE_CHAR        reduce using rule 55 (punto_m_exp_push -> .)

    punto_m_exp_push               shift and go to state 200

state 174

    (57) termino -> factor punto_termino_pop termino_aux .

    PLUS            reduce using rule 57 (termino -> factor punto_termino_pop termino_aux .)
    MINUS           reduce using rule 57 (termino -> factor punto_termino_pop termino_aux .)
    LESS_THAN       reduce using rule 57 (termino -> factor punto_termino_pop termino_aux .)
    GREATER_THAN    reduce using rule 57 (termino -> factor punto_termino_pop termino_aux .)
    DIFFERENT       reduce using rule 57 (termino -> factor punto_termino_pop termino_aux .)
    EQUAL           reduce using rule 57 (termino -> factor punto_termino_pop termino_aux .)
    GREATER_EQUAL   reduce using rule 57 (termino -> factor punto_termino_pop termino_aux .)
    LESS_EQUAL      reduce using rule 57 (termino -> factor punto_termino_pop termino_aux .)
    AND             reduce using rule 57 (termino -> factor punto_termino_pop termino_aux .)
    OR              reduce using rule 57 (termino -> factor punto_termino_pop termino_aux .)
    RIGHT_PAR       reduce using rule 57 (termino -> factor punto_termino_pop termino_aux .)
    COMMA           reduce using rule 57 (termino -> factor punto_termino_pop termino_aux .)
    SEMICOLON       reduce using rule 57 (termino -> factor punto_termino_pop termino_aux .)
    TO              reduce using rule 57 (termino -> factor punto_termino_pop termino_aux .)


state 175

    (59) termino_aux -> MULTIPLY . punto_termino_aux termino
    (61) punto_termino_aux -> .

    ID              reduce using rule 61 (punto_termino_aux -> .)
    LEFT_PAR        reduce using rule 61 (punto_termino_aux -> .)
    CTE_I           reduce using rule 61 (punto_termino_aux -> .)
    CTE_CHAR        reduce using rule 61 (punto_termino_aux -> .)

    punto_termino_aux              shift and go to state 201

state 176

    (60) termino_aux -> DIVIDE . punto_termino_aux termino
    (61) punto_termino_aux -> .

    ID              reduce using rule 61 (punto_termino_aux -> .)
    LEFT_PAR        reduce using rule 61 (punto_termino_aux -> .)
    CTE_I           reduce using rule 61 (punto_termino_aux -> .)
    CTE_CHAR        reduce using rule 61 (punto_termino_aux -> .)

    punto_termino_aux              shift and go to state 202

state 177

    (63) factor -> ID LEFT_PAR dec_var . RIGHT_PAR

    RIGHT_PAR       shift and go to state 203


state 178

    (64) factor -> ID LEFT_PAR RIGHT_PAR .

    MULTIPLY        reduce using rule 64 (factor -> ID LEFT_PAR RIGHT_PAR .)
    DIVIDE          reduce using rule 64 (factor -> ID LEFT_PAR RIGHT_PAR .)
    PLUS            reduce using rule 64 (factor -> ID LEFT_PAR RIGHT_PAR .)
    MINUS           reduce using rule 64 (factor -> ID LEFT_PAR RIGHT_PAR .)
    LESS_THAN       reduce using rule 64 (factor -> ID LEFT_PAR RIGHT_PAR .)
    GREATER_THAN    reduce using rule 64 (factor -> ID LEFT_PAR RIGHT_PAR .)
    DIFFERENT       reduce using rule 64 (factor -> ID LEFT_PAR RIGHT_PAR .)
    EQUAL           reduce using rule 64 (factor -> ID LEFT_PAR RIGHT_PAR .)
    GREATER_EQUAL   reduce using rule 64 (factor -> ID LEFT_PAR RIGHT_PAR .)
    LESS_EQUAL      reduce using rule 64 (factor -> ID LEFT_PAR RIGHT_PAR .)
    AND             reduce using rule 64 (factor -> ID LEFT_PAR RIGHT_PAR .)
    OR              reduce using rule 64 (factor -> ID LEFT_PAR RIGHT_PAR .)
    RIGHT_PAR       reduce using rule 64 (factor -> ID LEFT_PAR RIGHT_PAR .)
    COMMA           reduce using rule 64 (factor -> ID LEFT_PAR RIGHT_PAR .)
    SEMICOLON       reduce using rule 64 (factor -> ID LEFT_PAR RIGHT_PAR .)
    TO              reduce using rule 64 (factor -> ID LEFT_PAR RIGHT_PAR .)


state 179

    (1) cte_f -> CTE_I DOT CTE_I .

    MULTIPLY        reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    DIVIDE          reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    PLUS            reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    MINUS           reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    LESS_THAN       reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    GREATER_THAN    reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    DIFFERENT       reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    EQUAL           reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    GREATER_EQUAL   reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    LESS_EQUAL      reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    AND             reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    OR              reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    RIGHT_PAR       reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    COMMA           reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    SEMICOLON       reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)
    TO              reduce using rule 1 (cte_f -> CTE_I DOT CTE_I .)


state 180

    (114) condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR . punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (116) punto_validar_exp -> .

    DO              reduce using rule 116 (punto_validar_exp -> .)

    punto_validar_exp              shift and go to state 204

state 181

    (109) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS . m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for
    (50) m_exp -> . termino punto_mexp_pop
    (51) m_exp -> . termino punto_mexp_pop m_exp_aux
    (56) termino -> . factor punto_termino_pop
    (57) termino -> . factor punto_termino_pop termino_aux
    (62) factor -> . cte
    (63) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (64) factor -> . ID LEFT_PAR RIGHT_PAR
    (65) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (118) cte -> . ID factor_push_operand
    (119) cte -> . CTE_I factor_int_push
    (120) cte -> . cte_f factor_float_push
    (121) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 104
    LEFT_PAR        shift and go to state 96
    CTE_I           shift and go to state 105
    CTE_CHAR        shift and go to state 107

    m_exp                          shift and go to state 205
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    cte                            shift and go to state 103
    cte_f                          shift and go to state 106

state 182

    (29) funciones_aux -> tipo FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos . RIGHT_CURL

    RIGHT_CURL      shift and go to state 206


state 183

    (30) funciones_aux -> tipo FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .

    VOID            reduce using rule 30 (funciones_aux -> tipo FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)
    INT             reduce using rule 30 (funciones_aux -> tipo FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)
    FLOAT           reduce using rule 30 (funciones_aux -> tipo FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)
    CHAR            reduce using rule 30 (funciones_aux -> tipo FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)
    MAIN            reduce using rule 30 (funciones_aux -> tipo FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)


state 184

    (73) estatutos -> retorno SEMICOLON .

    RIGHT_CURL      reduce using rule 73 (estatutos -> retorno SEMICOLON .)


state 185

    (82) estatutos_main_aux -> estatutos_main estatutos .

    RIGHT_CURL      reduce using rule 82 (estatutos_main_aux -> estatutos_main estatutos .)


state 186

    (90) retorno -> RETURN LEFT_PAR . m_exp RIGHT_PAR
    (50) m_exp -> . termino punto_mexp_pop
    (51) m_exp -> . termino punto_mexp_pop m_exp_aux
    (56) termino -> . factor punto_termino_pop
    (57) termino -> . factor punto_termino_pop termino_aux
    (62) factor -> . cte
    (63) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (64) factor -> . ID LEFT_PAR RIGHT_PAR
    (65) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (118) cte -> . ID factor_push_operand
    (119) cte -> . CTE_I factor_int_push
    (120) cte -> . cte_f factor_float_push
    (121) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 104
    LEFT_PAR        shift and go to state 96
    CTE_I           shift and go to state 105
    CTE_CHAR        shift and go to state 107

    m_exp                          shift and go to state 207
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    cte                            shift and go to state 103
    cte_f                          shift and go to state 106

state 187

    (31) funciones_aux -> VOID FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .

    VOID            reduce using rule 31 (funciones_aux -> VOID FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)
    INT             reduce using rule 31 (funciones_aux -> VOID FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)
    FLOAT           reduce using rule 31 (funciones_aux -> VOID FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)
    CHAR            reduce using rule 31 (funciones_aux -> VOID FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)
    MAIN            reduce using rule 31 (funciones_aux -> VOID FUNC ID LEFT_PAR RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)


state 188

    (32) funciones_aux -> VOID FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos . RIGHT_CURL

    RIGHT_CURL      shift and go to state 208


state 189

    (84) asignacion -> dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion .

    SEMICOLON       reduce using rule 84 (asignacion -> dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion .)


state 190

    (25) dec_var -> dec_varaux COMMA dec_var .

    RIGHT_PAR       reduce using rule 25 (dec_var -> dec_varaux COMMA dec_var .)


state 191

    (23) dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I . RIGHT_BR

    RIGHT_BR        shift and go to state 209


state 192

    (93) lectura_var -> punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand . COMMA lectura_var
    (94) lectura_var -> punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand .

    COMMA           shift and go to state 210
    RIGHT_PAR       reduce using rule 94 (lectura_var -> punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand .)


state 193

    (98) escritura_aux -> punto_write_stack STR punto_escritura_push punto_add_write_operand .
    (100) escritura_aux -> punto_write_stack STR punto_escritura_push punto_add_write_operand . COMMA escritura_aux

    RIGHT_PAR       reduce using rule 98 (escritura_aux -> punto_write_stack STR punto_escritura_push punto_add_write_operand .)
    COMMA           shift and go to state 211


state 194

    (99) escritura_aux -> punto_write_stack m_exp punto_escritura_push punto_add_write_operand .
    (101) escritura_aux -> punto_write_stack m_exp punto_escritura_push punto_add_write_operand . COMMA escritura_aux

    RIGHT_PAR       reduce using rule 99 (escritura_aux -> punto_write_stack m_exp punto_escritura_push punto_add_write_operand .)
    COMMA           shift and go to state 212


state 195

    (105) decision -> IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL . estatutos RIGHT_CURL
    (106) decision -> IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL . estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL
    (72) estatutos -> . estatutos_main_aux
    (73) estatutos -> . retorno SEMICOLON
    (82) estatutos_main_aux -> . estatutos_main estatutos
    (83) estatutos_main_aux -> . estatutos_main
    (90) retorno -> . RETURN LEFT_PAR m_exp RIGHT_PAR
    (74) estatutos_main -> . asignacion SEMICOLON
    (75) estatutos_main -> . llamada SEMICOLON
    (76) estatutos_main -> . lectura SEMICOLON
    (77) estatutos_main -> . escritura SEMICOLON
    (78) estatutos_main -> . decision SEMICOLON
    (79) estatutos_main -> . repeticion SEMICOLON
    (84) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (88) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (89) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (92) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (97) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (105) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL
    (106) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL
    (107) repeticion -> . condicional
    (108) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (114) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (109) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RETURN          shift and go to state 154
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    estatutos                      shift and go to state 213
    estatutos_main_aux             shift and go to state 151
    retorno                        shift and go to state 152
    estatutos_main                 shift and go to state 153
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 196

    (39) t_exp_or_aux -> OR punto_push_or . exp_or
    (36) exp_or -> . t_exp punto_pop_or t_exp_or_aux
    (37) exp_or -> . t_exp punto_pop_or
    (41) t_exp -> . g_exp pop_and t_exp_aux
    (42) t_exp -> . g_exp pop_and
    (46) g_exp -> . m_exp
    (47) g_exp -> . m_exp relacionales punto_relacionales m_exp punto_pop_relacional
    (50) m_exp -> . termino punto_mexp_pop
    (51) m_exp -> . termino punto_mexp_pop m_exp_aux
    (56) termino -> . factor punto_termino_pop
    (57) termino -> . factor punto_termino_pop termino_aux
    (62) factor -> . cte
    (63) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (64) factor -> . ID LEFT_PAR RIGHT_PAR
    (65) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (118) cte -> . ID factor_push_operand
    (119) cte -> . CTE_I factor_int_push
    (120) cte -> . cte_f factor_float_push
    (121) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 104
    LEFT_PAR        shift and go to state 96
    CTE_I           shift and go to state 105
    CTE_CHAR        shift and go to state 107

    exp_or                         shift and go to state 214
    t_exp                          shift and go to state 98
    g_exp                          shift and go to state 99
    m_exp                          shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    cte                            shift and go to state 103
    cte_f                          shift and go to state 106

state 197

    (44) t_exp_aux -> AND punto_push_and . t_exp
    (41) t_exp -> . g_exp pop_and t_exp_aux
    (42) t_exp -> . g_exp pop_and
    (46) g_exp -> . m_exp
    (47) g_exp -> . m_exp relacionales punto_relacionales m_exp punto_pop_relacional
    (50) m_exp -> . termino punto_mexp_pop
    (51) m_exp -> . termino punto_mexp_pop m_exp_aux
    (56) termino -> . factor punto_termino_pop
    (57) termino -> . factor punto_termino_pop termino_aux
    (62) factor -> . cte
    (63) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (64) factor -> . ID LEFT_PAR RIGHT_PAR
    (65) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (118) cte -> . ID factor_push_operand
    (119) cte -> . CTE_I factor_int_push
    (120) cte -> . cte_f factor_float_push
    (121) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 104
    LEFT_PAR        shift and go to state 96
    CTE_I           shift and go to state 105
    CTE_CHAR        shift and go to state 107

    t_exp                          shift and go to state 215
    g_exp                          shift and go to state 99
    m_exp                          shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    cte                            shift and go to state 103
    cte_f                          shift and go to state 106

state 198

    (47) g_exp -> m_exp relacionales punto_relacionales m_exp . punto_pop_relacional
    (49) punto_pop_relacional -> .

    AND             reduce using rule 49 (punto_pop_relacional -> .)
    OR              reduce using rule 49 (punto_pop_relacional -> .)
    RIGHT_PAR       reduce using rule 49 (punto_pop_relacional -> .)

    punto_pop_relacional           shift and go to state 216

state 199

    (53) m_exp_aux -> PLUS punto_m_exp_push . m_exp
    (50) m_exp -> . termino punto_mexp_pop
    (51) m_exp -> . termino punto_mexp_pop m_exp_aux
    (56) termino -> . factor punto_termino_pop
    (57) termino -> . factor punto_termino_pop termino_aux
    (62) factor -> . cte
    (63) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (64) factor -> . ID LEFT_PAR RIGHT_PAR
    (65) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (118) cte -> . ID factor_push_operand
    (119) cte -> . CTE_I factor_int_push
    (120) cte -> . cte_f factor_float_push
    (121) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 104
    LEFT_PAR        shift and go to state 96
    CTE_I           shift and go to state 105
    CTE_CHAR        shift and go to state 107

    m_exp                          shift and go to state 217
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    cte                            shift and go to state 103
    cte_f                          shift and go to state 106

state 200

    (54) m_exp_aux -> MINUS punto_m_exp_push . m_exp
    (50) m_exp -> . termino punto_mexp_pop
    (51) m_exp -> . termino punto_mexp_pop m_exp_aux
    (56) termino -> . factor punto_termino_pop
    (57) termino -> . factor punto_termino_pop termino_aux
    (62) factor -> . cte
    (63) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (64) factor -> . ID LEFT_PAR RIGHT_PAR
    (65) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (118) cte -> . ID factor_push_operand
    (119) cte -> . CTE_I factor_int_push
    (120) cte -> . cte_f factor_float_push
    (121) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 104
    LEFT_PAR        shift and go to state 96
    CTE_I           shift and go to state 105
    CTE_CHAR        shift and go to state 107

    m_exp                          shift and go to state 218
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    cte                            shift and go to state 103
    cte_f                          shift and go to state 106

state 201

    (59) termino_aux -> MULTIPLY punto_termino_aux . termino
    (56) termino -> . factor punto_termino_pop
    (57) termino -> . factor punto_termino_pop termino_aux
    (62) factor -> . cte
    (63) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (64) factor -> . ID LEFT_PAR RIGHT_PAR
    (65) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (118) cte -> . ID factor_push_operand
    (119) cte -> . CTE_I factor_int_push
    (120) cte -> . cte_f factor_float_push
    (121) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 104
    LEFT_PAR        shift and go to state 96
    CTE_I           shift and go to state 105
    CTE_CHAR        shift and go to state 107

    termino                        shift and go to state 219
    factor                         shift and go to state 102
    cte                            shift and go to state 103
    cte_f                          shift and go to state 106

state 202

    (60) termino_aux -> DIVIDE punto_termino_aux . termino
    (56) termino -> . factor punto_termino_pop
    (57) termino -> . factor punto_termino_pop termino_aux
    (62) factor -> . cte
    (63) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (64) factor -> . ID LEFT_PAR RIGHT_PAR
    (65) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (118) cte -> . ID factor_push_operand
    (119) cte -> . CTE_I factor_int_push
    (120) cte -> . cte_f factor_float_push
    (121) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 104
    LEFT_PAR        shift and go to state 96
    CTE_I           shift and go to state 105
    CTE_CHAR        shift and go to state 107

    termino                        shift and go to state 220
    factor                         shift and go to state 102
    cte                            shift and go to state 103
    cte_f                          shift and go to state 106

state 203

    (63) factor -> ID LEFT_PAR dec_var RIGHT_PAR .

    MULTIPLY        reduce using rule 63 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    DIVIDE          reduce using rule 63 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    PLUS            reduce using rule 63 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    MINUS           reduce using rule 63 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    LESS_THAN       reduce using rule 63 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    GREATER_THAN    reduce using rule 63 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    DIFFERENT       reduce using rule 63 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    EQUAL           reduce using rule 63 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    GREATER_EQUAL   reduce using rule 63 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    LESS_EQUAL      reduce using rule 63 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    AND             reduce using rule 63 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    OR              reduce using rule 63 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    RIGHT_PAR       reduce using rule 63 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    COMMA           reduce using rule 63 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    SEMICOLON       reduce using rule 63 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)
    TO              reduce using rule 63 (factor -> ID LEFT_PAR dec_var RIGHT_PAR .)


state 204

    (114) condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp . DO LEFT_CURL estatutos RIGHT_CURL punto_end_while

    DO              shift and go to state 221


state 205

    (109) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp . punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for
    (111) punto_exp_for_inf -> .

    TO              reduce using rule 111 (punto_exp_for_inf -> .)

    punto_exp_for_inf              shift and go to state 222

state 206

    (29) funciones_aux -> tipo FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .

    VOID            reduce using rule 29 (funciones_aux -> tipo FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)
    INT             reduce using rule 29 (funciones_aux -> tipo FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)
    FLOAT           reduce using rule 29 (funciones_aux -> tipo FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)
    CHAR            reduce using rule 29 (funciones_aux -> tipo FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)
    MAIN            reduce using rule 29 (funciones_aux -> tipo FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)


state 207

    (90) retorno -> RETURN LEFT_PAR m_exp . RIGHT_PAR

    RIGHT_PAR       shift and go to state 223


state 208

    (32) funciones_aux -> VOID FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .

    VOID            reduce using rule 32 (funciones_aux -> VOID FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)
    INT             reduce using rule 32 (funciones_aux -> VOID FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)
    FLOAT           reduce using rule 32 (funciones_aux -> VOID FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)
    CHAR            reduce using rule 32 (funciones_aux -> VOID FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)
    MAIN            reduce using rule 32 (funciones_aux -> VOID FUNC ID LEFT_PAR parametros RIGHT_PAR LEFT_CURL variables estatutos RIGHT_CURL .)


state 209

    (23) dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR .

    EQUALS          reduce using rule 23 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR .)
    COMMA           reduce using rule 23 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR .)
    MORE            reduce using rule 23 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR .)
    SEMICOLON       reduce using rule 23 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR .)
    RIGHT_PAR       reduce using rule 23 (dec_varaux -> ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR .)


state 210

    (93) lectura_var -> punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand COMMA . lectura_var
    (93) lectura_var -> . punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand COMMA lectura_var
    (94) lectura_var -> . punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand
    (91) punto_read_stack -> .

    ID              reduce using rule 91 (punto_read_stack -> .)

    punto_read_stack               shift and go to state 93
    lectura_var                    shift and go to state 224

state 211

    (100) escritura_aux -> punto_write_stack STR punto_escritura_push punto_add_write_operand COMMA . escritura_aux
    (98) escritura_aux -> . punto_write_stack STR punto_escritura_push punto_add_write_operand
    (99) escritura_aux -> . punto_write_stack m_exp punto_escritura_push punto_add_write_operand
    (100) escritura_aux -> . punto_write_stack STR punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (101) escritura_aux -> . punto_write_stack m_exp punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (103) punto_write_stack -> .

    STR             reduce using rule 103 (punto_write_stack -> .)
    ID              reduce using rule 103 (punto_write_stack -> .)
    LEFT_PAR        reduce using rule 103 (punto_write_stack -> .)
    CTE_I           reduce using rule 103 (punto_write_stack -> .)
    CTE_CHAR        reduce using rule 103 (punto_write_stack -> .)

    punto_write_stack              shift and go to state 95
    escritura_aux                  shift and go to state 225

state 212

    (101) escritura_aux -> punto_write_stack m_exp punto_escritura_push punto_add_write_operand COMMA . escritura_aux
    (98) escritura_aux -> . punto_write_stack STR punto_escritura_push punto_add_write_operand
    (99) escritura_aux -> . punto_write_stack m_exp punto_escritura_push punto_add_write_operand
    (100) escritura_aux -> . punto_write_stack STR punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (101) escritura_aux -> . punto_write_stack m_exp punto_escritura_push punto_add_write_operand COMMA escritura_aux
    (103) punto_write_stack -> .

    STR             reduce using rule 103 (punto_write_stack -> .)
    ID              reduce using rule 103 (punto_write_stack -> .)
    LEFT_PAR        reduce using rule 103 (punto_write_stack -> .)
    CTE_I           reduce using rule 103 (punto_write_stack -> .)
    CTE_CHAR        reduce using rule 103 (punto_write_stack -> .)

    punto_write_stack              shift and go to state 95
    escritura_aux                  shift and go to state 226

state 213

    (105) decision -> IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos . RIGHT_CURL
    (106) decision -> IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos . RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL

    RIGHT_CURL      shift and go to state 227


state 214

    (39) t_exp_or_aux -> OR punto_push_or exp_or .

    RIGHT_PAR       reduce using rule 39 (t_exp_or_aux -> OR punto_push_or exp_or .)


state 215

    (44) t_exp_aux -> AND punto_push_and t_exp .

    OR              reduce using rule 44 (t_exp_aux -> AND punto_push_and t_exp .)
    RIGHT_PAR       reduce using rule 44 (t_exp_aux -> AND punto_push_and t_exp .)


state 216

    (47) g_exp -> m_exp relacionales punto_relacionales m_exp punto_pop_relacional .

    AND             reduce using rule 47 (g_exp -> m_exp relacionales punto_relacionales m_exp punto_pop_relacional .)
    OR              reduce using rule 47 (g_exp -> m_exp relacionales punto_relacionales m_exp punto_pop_relacional .)
    RIGHT_PAR       reduce using rule 47 (g_exp -> m_exp relacionales punto_relacionales m_exp punto_pop_relacional .)


state 217

    (53) m_exp_aux -> PLUS punto_m_exp_push m_exp .

    LESS_THAN       reduce using rule 53 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    GREATER_THAN    reduce using rule 53 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    DIFFERENT       reduce using rule 53 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    EQUAL           reduce using rule 53 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    GREATER_EQUAL   reduce using rule 53 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    LESS_EQUAL      reduce using rule 53 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    AND             reduce using rule 53 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    OR              reduce using rule 53 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    RIGHT_PAR       reduce using rule 53 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    COMMA           reduce using rule 53 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    SEMICOLON       reduce using rule 53 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)
    TO              reduce using rule 53 (m_exp_aux -> PLUS punto_m_exp_push m_exp .)


state 218

    (54) m_exp_aux -> MINUS punto_m_exp_push m_exp .

    LESS_THAN       reduce using rule 54 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    GREATER_THAN    reduce using rule 54 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    DIFFERENT       reduce using rule 54 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    EQUAL           reduce using rule 54 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    GREATER_EQUAL   reduce using rule 54 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    LESS_EQUAL      reduce using rule 54 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    AND             reduce using rule 54 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    OR              reduce using rule 54 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    RIGHT_PAR       reduce using rule 54 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    COMMA           reduce using rule 54 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    SEMICOLON       reduce using rule 54 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)
    TO              reduce using rule 54 (m_exp_aux -> MINUS punto_m_exp_push m_exp .)


state 219

    (59) termino_aux -> MULTIPLY punto_termino_aux termino .

    PLUS            reduce using rule 59 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    MINUS           reduce using rule 59 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    LESS_THAN       reduce using rule 59 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    GREATER_THAN    reduce using rule 59 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    DIFFERENT       reduce using rule 59 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    EQUAL           reduce using rule 59 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    GREATER_EQUAL   reduce using rule 59 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    LESS_EQUAL      reduce using rule 59 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    AND             reduce using rule 59 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    OR              reduce using rule 59 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    RIGHT_PAR       reduce using rule 59 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    COMMA           reduce using rule 59 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    SEMICOLON       reduce using rule 59 (termino_aux -> MULTIPLY punto_termino_aux termino .)
    TO              reduce using rule 59 (termino_aux -> MULTIPLY punto_termino_aux termino .)


state 220

    (60) termino_aux -> DIVIDE punto_termino_aux termino .

    PLUS            reduce using rule 60 (termino_aux -> DIVIDE punto_termino_aux termino .)
    MINUS           reduce using rule 60 (termino_aux -> DIVIDE punto_termino_aux termino .)
    LESS_THAN       reduce using rule 60 (termino_aux -> DIVIDE punto_termino_aux termino .)
    GREATER_THAN    reduce using rule 60 (termino_aux -> DIVIDE punto_termino_aux termino .)
    DIFFERENT       reduce using rule 60 (termino_aux -> DIVIDE punto_termino_aux termino .)
    EQUAL           reduce using rule 60 (termino_aux -> DIVIDE punto_termino_aux termino .)
    GREATER_EQUAL   reduce using rule 60 (termino_aux -> DIVIDE punto_termino_aux termino .)
    LESS_EQUAL      reduce using rule 60 (termino_aux -> DIVIDE punto_termino_aux termino .)
    AND             reduce using rule 60 (termino_aux -> DIVIDE punto_termino_aux termino .)
    OR              reduce using rule 60 (termino_aux -> DIVIDE punto_termino_aux termino .)
    RIGHT_PAR       reduce using rule 60 (termino_aux -> DIVIDE punto_termino_aux termino .)
    COMMA           reduce using rule 60 (termino_aux -> DIVIDE punto_termino_aux termino .)
    SEMICOLON       reduce using rule 60 (termino_aux -> DIVIDE punto_termino_aux termino .)
    TO              reduce using rule 60 (termino_aux -> DIVIDE punto_termino_aux termino .)


state 221

    (114) condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO . LEFT_CURL estatutos RIGHT_CURL punto_end_while

    LEFT_CURL       shift and go to state 228


state 222

    (109) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf . TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for

    TO              shift and go to state 229


state 223

    (90) retorno -> RETURN LEFT_PAR m_exp RIGHT_PAR .

    SEMICOLON       reduce using rule 90 (retorno -> RETURN LEFT_PAR m_exp RIGHT_PAR .)


state 224

    (93) lectura_var -> punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand COMMA lectura_var .

    RIGHT_PAR       reduce using rule 93 (lectura_var -> punto_read_stack dec_varaux punto_push_dec_var punto_add_read_operand COMMA lectura_var .)


state 225

    (100) escritura_aux -> punto_write_stack STR punto_escritura_push punto_add_write_operand COMMA escritura_aux .

    RIGHT_PAR       reduce using rule 100 (escritura_aux -> punto_write_stack STR punto_escritura_push punto_add_write_operand COMMA escritura_aux .)


state 226

    (101) escritura_aux -> punto_write_stack m_exp punto_escritura_push punto_add_write_operand COMMA escritura_aux .

    RIGHT_PAR       reduce using rule 101 (escritura_aux -> punto_write_stack m_exp punto_escritura_push punto_add_write_operand COMMA escritura_aux .)


state 227

    (105) decision -> IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL .
    (106) decision -> IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL . ELSE LEFT_CURL estatutos RIGHT_CURL

    SEMICOLON       reduce using rule 105 (decision -> IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL .)
    ELSE            shift and go to state 230


state 228

    (114) condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL . estatutos RIGHT_CURL punto_end_while
    (72) estatutos -> . estatutos_main_aux
    (73) estatutos -> . retorno SEMICOLON
    (82) estatutos_main_aux -> . estatutos_main estatutos
    (83) estatutos_main_aux -> . estatutos_main
    (90) retorno -> . RETURN LEFT_PAR m_exp RIGHT_PAR
    (74) estatutos_main -> . asignacion SEMICOLON
    (75) estatutos_main -> . llamada SEMICOLON
    (76) estatutos_main -> . lectura SEMICOLON
    (77) estatutos_main -> . escritura SEMICOLON
    (78) estatutos_main -> . decision SEMICOLON
    (79) estatutos_main -> . repeticion SEMICOLON
    (84) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (88) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (89) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (92) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (97) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (105) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL
    (106) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL
    (107) repeticion -> . condicional
    (108) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (114) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (109) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RETURN          shift and go to state 154
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    estatutos                      shift and go to state 231
    estatutos_main_aux             shift and go to state 151
    retorno                        shift and go to state 152
    estatutos_main                 shift and go to state 153
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 229

    (109) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO . m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for
    (50) m_exp -> . termino punto_mexp_pop
    (51) m_exp -> . termino punto_mexp_pop m_exp_aux
    (56) termino -> . factor punto_termino_pop
    (57) termino -> . factor punto_termino_pop termino_aux
    (62) factor -> . cte
    (63) factor -> . ID LEFT_PAR dec_var RIGHT_PAR
    (64) factor -> . ID LEFT_PAR RIGHT_PAR
    (65) factor -> . LEFT_PAR exp_or RIGHT_PAR
    (118) cte -> . ID factor_push_operand
    (119) cte -> . CTE_I factor_int_push
    (120) cte -> . cte_f factor_float_push
    (121) cte -> . CTE_CHAR factor_char_push
    (1) cte_f -> . CTE_I DOT CTE_I

    ID              shift and go to state 104
    LEFT_PAR        shift and go to state 96
    CTE_I           shift and go to state 105
    CTE_CHAR        shift and go to state 107

    m_exp                          shift and go to state 232
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    cte                            shift and go to state 103
    cte_f                          shift and go to state 106

state 230

    (106) decision -> IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE . LEFT_CURL estatutos RIGHT_CURL

    LEFT_CURL       shift and go to state 233


state 231

    (114) condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos . RIGHT_CURL punto_end_while

    RIGHT_CURL      shift and go to state 234


state 232

    (109) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp . punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for
    (112) punto_exp_for_sup -> .

    RIGHT_PAR       reduce using rule 112 (punto_exp_for_sup -> .)

    punto_exp_for_sup              shift and go to state 235

state 233

    (106) decision -> IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL . estatutos RIGHT_CURL
    (72) estatutos -> . estatutos_main_aux
    (73) estatutos -> . retorno SEMICOLON
    (82) estatutos_main_aux -> . estatutos_main estatutos
    (83) estatutos_main_aux -> . estatutos_main
    (90) retorno -> . RETURN LEFT_PAR m_exp RIGHT_PAR
    (74) estatutos_main -> . asignacion SEMICOLON
    (75) estatutos_main -> . llamada SEMICOLON
    (76) estatutos_main -> . lectura SEMICOLON
    (77) estatutos_main -> . escritura SEMICOLON
    (78) estatutos_main -> . decision SEMICOLON
    (79) estatutos_main -> . repeticion SEMICOLON
    (84) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (88) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (89) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (92) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (97) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (105) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL
    (106) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL
    (107) repeticion -> . condicional
    (108) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (114) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (109) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RETURN          shift and go to state 154
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    estatutos                      shift and go to state 236
    estatutos_main_aux             shift and go to state 151
    retorno                        shift and go to state 152
    estatutos_main                 shift and go to state 153
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    dec_varaux                     shift and go to state 47
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 234

    (114) condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL . punto_end_while
    (117) punto_end_while -> .

    SEMICOLON       reduce using rule 117 (punto_end_while -> .)

    punto_end_while                shift and go to state 237

state 235

    (109) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup . RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RIGHT_PAR       shift and go to state 238


state 236

    (106) decision -> IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos . RIGHT_CURL

    RIGHT_CURL      shift and go to state 239


state 237

    (114) condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while .

    SEMICOLON       reduce using rule 114 (condicional -> WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while .)


state 238

    (109) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR . DO LEFT_CURL estatutos RIGHT_CURL punto_end_for

    DO              shift and go to state 240


state 239

    (106) decision -> IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL .

    SEMICOLON       reduce using rule 106 (decision -> IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL .)


state 240

    (109) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO . LEFT_CURL estatutos RIGHT_CURL punto_end_for

    LEFT_CURL       shift and go to state 241


state 241

    (109) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL . estatutos RIGHT_CURL punto_end_for
    (72) estatutos -> . estatutos_main_aux
    (73) estatutos -> . retorno SEMICOLON
    (82) estatutos_main_aux -> . estatutos_main estatutos
    (83) estatutos_main_aux -> . estatutos_main
    (90) retorno -> . RETURN LEFT_PAR m_exp RIGHT_PAR
    (74) estatutos_main -> . asignacion SEMICOLON
    (75) estatutos_main -> . llamada SEMICOLON
    (76) estatutos_main -> . lectura SEMICOLON
    (77) estatutos_main -> . escritura SEMICOLON
    (78) estatutos_main -> . decision SEMICOLON
    (79) estatutos_main -> . repeticion SEMICOLON
    (84) asignacion -> . dec_varaux punto_asignacion_var EQUALS punto_igual m_exp punto_asignacion
    (88) llamada -> . VD ID LEFT_PAR RIGHT_PAR
    (89) llamada -> . VD ID LEFT_PAR dec_var RIGHT_PAR
    (92) lectura -> . READ LEFT_PAR lectura_var RIGHT_PAR
    (97) escritura -> . WRITE LEFT_PAR escritura_aux RIGHT_PAR
    (105) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL
    (106) decision -> . IF LEFT_PAR exp_or RIGHT_PAR THEN LEFT_CURL estatutos RIGHT_CURL ELSE LEFT_CURL estatutos RIGHT_CURL
    (107) repeticion -> . condicional
    (108) repeticion -> . no_condicional
    (21) dec_varaux -> . ID
    (22) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR
    (23) dec_varaux -> . ID LEFT_BR CTE_I RIGHT_BR LEFT_BR CTE_I RIGHT_BR
    (114) condicional -> . WHILE punto_while LEFT_PAR exp_or RIGHT_PAR punto_validar_exp DO LEFT_CURL estatutos RIGHT_CURL punto_end_while
    (109) no_condicional -> . FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for

    RETURN          shift and go to state 154
    VD              shift and go to state 48
    READ            shift and go to state 50
    WRITE           shift and go to state 51
    IF              shift and go to state 52
    ID              shift and go to state 49
    WHILE           shift and go to state 55
    FOR             shift and go to state 56

    dec_varaux                     shift and go to state 47
    estatutos                      shift and go to state 242
    estatutos_main_aux             shift and go to state 151
    retorno                        shift and go to state 152
    estatutos_main                 shift and go to state 153
    asignacion                     shift and go to state 41
    llamada                        shift and go to state 42
    lectura                        shift and go to state 43
    escritura                      shift and go to state 44
    decision                       shift and go to state 45
    repeticion                     shift and go to state 46
    condicional                    shift and go to state 53
    no_condicional                 shift and go to state 54

state 242

    (109) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos . RIGHT_CURL punto_end_for

    RIGHT_CURL      shift and go to state 243


state 243

    (109) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL . punto_end_for
    (113) punto_end_for -> .

    SEMICOLON       reduce using rule 113 (punto_end_for -> .)

    punto_end_for                  shift and go to state 244

state 244

    (109) no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for .

    SEMICOLON       reduce using rule 109 (no_condicional -> FOR LEFT_PAR dec_varaux punto_for EQUALS m_exp punto_exp_for_inf TO m_exp punto_exp_for_sup RIGHT_PAR DO LEFT_CURL estatutos RIGHT_CURL punto_end_for .)

